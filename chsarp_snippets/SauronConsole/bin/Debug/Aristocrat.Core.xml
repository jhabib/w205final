<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Aristocrat.Core</name>
    </assembly>
    <members>
        <member name="T:Aristocrat.Configuration.ConfigurationElementCollection`1">
            <summary>
            An abstract base class for a <see cref="T:Aristocrat.Configuration.ConfigurationElementCollection{T}"/>.
            </summary>
            <typeparam name="TConfigurationElement">The type of this configuration element.</typeparam>
        </member>
        <member name="M:Aristocrat.Configuration.ConfigurationElementCollection`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Aristocrat.Configuration.ConfigurationElementCollection{T}"/> class.
            </summary>
        </member>
        <member name="M:Aristocrat.Configuration.ConfigurationElementCollection`1.#ctor(System.Configuration.ConfigurationElementCollectionType,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Aristocrat.Configuration.ConfigurationElementCollection{T}"/> class.
            </summary>
            <param name="collectionType">The type of the ConfigurationElementCollection.</param>
            <param name="elementName">The name of the element.</param>
        </member>
        <member name="M:Aristocrat.Configuration.ConfigurationElementCollection`1.Add(`0)">
            <summary>
            Adds the specified configuration element to this collection.
            </summary>
            <param name="element">The configuration element to be added.</param>
            <exception cref="T:System.ArgumentNullException"><i>element</i> is <b>null</b> or empty.</exception>
        </member>
        <member name="M:Aristocrat.Configuration.ConfigurationElementCollection`1.ContainsKey(System.Object)">
            <summary>
            Returns a boolean value that indicates whether this collection contains a configuration element with the 
            specified key.
            </summary>
            <param name="key">The configuration element to search for in the collection.</param>
            <returns><b>true</b> if the collection contains a configuration element with the specified <i>key</i>; 
            otherwise, <b>false</b>.</returns>
            <exception cref="T:System.ArgumentNullException"><i>key</i> is <b>null</b>.</exception>
        </member>
        <member name="M:Aristocrat.Configuration.ConfigurationElementCollection`1.Clear">
            <summary>
            Removes all the configuration elements from this collection.
            </summary>
        </member>
        <member name="M:Aristocrat.Configuration.ConfigurationElementCollection`1.IndexOf(`0)">
            <summary>
            Returns the zero-based index of the first occurrence of a configuration element in this collection.
            </summary>
            <param name="element">The configuration element to locate in the collection.</param>
            <returns>The index of element if found in the collection; <i>-1</i> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">element is <b>null</b>.</exception>
        </member>
        <member name="M:Aristocrat.Configuration.ConfigurationElementCollection`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific configuration element from the collection.
            </summary>
            <param name="element">The configuration element to be removed from the collection.</param>
            <exception cref="T:System.ArgumentNullException"><i>element</i> is <b>null</b>.-and-The configuration file is read-only.
            </exception>
        </member>
        <member name="M:Aristocrat.Configuration.ConfigurationElementCollection`1.RemoveAt(System.Int32)">
            <summary>
            Removes the configuration element at the specified index of this collection.
            </summary>
            <param name="index">The zero-based index of the configuration element to remove.</param>
            <exception cref="T:System.ArgumentNullException"><i>index</i> is <b>null</b>.-and-The configuration file is read-only.
            </exception>
        </member>
        <member name="M:Aristocrat.Configuration.ConfigurationElementCollection`1.RemoveAt(System.Object)">
            <summary>
            Removes the configuration element with the specified key from this collection.
            </summary>
            <param name="key">The configuration element with the specified key from this collection.</param>
            <exception cref="T:System.ArgumentNullException"><i>element</i> is <b>null</b>.-and-The configuration file is read-only.
            </exception>
        </member>
        <member name="M:Aristocrat.Configuration.ConfigurationElementCollection`1.BaseAdd(System.Configuration.ConfigurationElement)">
            <summary>
            Adds the specified <see cref="T:ConfigurationElement"/> object to this collection.
            </summary>
            <param name="element">The configuration element to add.</param>
            <exception cref="T:ConfigurationErrorsException">The configuration file contains an 
            existingBehaviors element identical to element.</exception>
            <exception cref="T:System.ArgumentNullException">element is <b>null</b> or empty.</exception>
        </member>
        <member name="M:Aristocrat.Configuration.ConfigurationElementCollection`1.CreateNewElement">
            <summary>
            Creates a new <see cref="T:ConfigurationElement"/>.
            </summary>
            <returns>A new <see cref="T:ConfigurationElement"/>.</returns>
        </member>
        <member name="P:Aristocrat.Configuration.ConfigurationElementCollection`1.Item(System.Int32)">
            <summary>
            Gets or sets a property, attribute, or child element of a 
            <see cref="T:ConfigurationElement"/> object with the specified index.
            </summary>
            <param name="index">The index of the element to be accessed.</param>
            <returns>A TConfigurationElement.</returns>
        </member>
        <member name="P:Aristocrat.Configuration.ConfigurationElementCollection`1.Item(System.Object)">
            <summary>
            Gets or sets a property, attribute, or child element of a 
            <see cref="T:ConfigurationElement"/> object with the specified key.
            </summary>
            <param name="key">The key of the element to be accessed.</param>
            <returns>A TConfigurationElement.</returns>
            <exception cref="T:System.ArgumentNullException"><i>key</i> is <b>null</b>.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"><i>key</i> is not found.</exception>
        </member>
        <member name="P:Aristocrat.Configuration.ConfigurationElementCollection`1.CollectionType">
            <summary>
            Gets the type of the configuration collection.
            </summary>
        </member>
        <member name="P:Aristocrat.Configuration.ConfigurationElementCollection`1.ElementName">
            <summary>
            Gets the name used to identify this collection of elements in the configuration file.
            </summary>
        </member>
        <member name="T:Aristocrat.Configuration.EnumValidator">
            <summary>
            Acts as a validation class for an enumeration.
            </summary>
        </member>
        <member name="M:Aristocrat.Configuration.EnumValidator.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Aristocrat.Configuration.EnumValidator"/> class.
            </summary>
            <param name="enumType">The type of the enum to validate.</param>
        </member>
        <member name="M:Aristocrat.Configuration.EnumValidator.CanValidate(System.Type)">
            <summary>
            Determines whether an object can be validated based on <i>type</i>.
            </summary>
            <param name="type">The object <see cref="T:System.Type"/>.</param>
            <returns><b>true</b> if the <i>type</i> parameter value matches the expected type; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Aristocrat.Configuration.EnumValidator.Validate(System.Object)">
            <summary>
            Determines whether the value of an object is valid.
            </summary>
            <param name="value">The object value</param>
        </member>
        <member name="T:Aristocrat.Configuration.EnumValidatorAttribute">
            <summary>
            Declaratively instructs the .NET Framework to perform enum validation on a configuration property.
            </summary>
        </member>
        <member name="M:Aristocrat.Configuration.EnumValidatorAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Aristocrat.Configuration.EnumValidatorAttribute"/> class.
            </summary>
            <param name="enumType">The type of the enum to validate.</param>
        </member>
        <member name="P:Aristocrat.Configuration.EnumValidatorAttribute.EnumType">
            <summary>
            Gets or sets the type of the enumeration to validate.
            </summary>
        </member>
        <member name="P:Aristocrat.Configuration.EnumValidatorAttribute.ValidatorInstance">
            <summary>
            Gets an instance of the <see cref="T:Aristocrat.Configuration.EnumValidator"/>.
            </summary>
        </member>
        <member name="T:Aristocrat.Data.DBCompromiseException">
            <summary>
            Class that is used as wrapper for DB compromise exceptions raised by DB
            </summary>
        </member>
        <member name="F:Aristocrat.Data.DBCompromiseException.CompromisedErrorCode">
            <summary>
            Constant to check the DB compromised status
            </summary>
        </member>
        <member name="F:Aristocrat.Data.DBCompromiseException.CompromisedOnStartupErrorCode">
            <summary>
            Constant to check the DB compromised status on start-up
            </summary>
        </member>
        <member name="M:Aristocrat.Data.DBCompromiseException.#ctor">
            <summary>
            Initializes a new instance of the class
            </summary>
        </member>
        <member name="M:Aristocrat.Data.DBCompromiseException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the class with specified parameters
            </summary>
            <param name="message"> The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Aristocrat.Data.DBCompromiseException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the class with specified parameters
            </summary>
            <param name="errorMessage"> The error message that explains the reason for the exception.</param>
            <param name="innerException"> The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:Aristocrat.Data.DBCompromiseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the class with specified parameters for deserialization
            </summary>
            <param name="info"> The System.Runtime.Serialization.SerializationInfo that holds the serialized
            object data about the exception being thrown.</param>
            <param name="context"> The System.Runtime.Serialization.StreamingContext that contains contextual
            information about the source or destination.</param>
        </member>
        <member name="T:Aristocrat.Diagnostics.AtiDebug">
            <summary>
            Class that contains assorted functionality for making an application debuggable. 
            </summary>
        </member>
        <member name="M:Aristocrat.Diagnostics.AtiDebug.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Aristocrat.Diagnostics.AtiDebug"/> class. 
            </summary>
            <param name="applicationName">The name of the application. This string will be used in the event log to store error information.</param>
        </member>
        <member name="M:Aristocrat.Diagnostics.AtiDebug.Finalize">
            <summary>
            Finalizes the class.
            </summary>
        </member>
        <member name="M:Aristocrat.Diagnostics.AtiDebug.GetVerboseExceptionInfo(System.Exception)">
            <summary>
            Gets a display string for an exception with verbose info.
            </summary>
            <param name="ex">An exception</param>
            <example>
            2) Exception Information
            *********************************************
            Message: Exception of type 'System.Exception' was thrown.
            
            StackTrace Information
            *********************************************
              at Aristocrat.Diagnostics.Test.AtiDebugTest.ThrowException() in C:\Chameleon\usdltech\Aristocrat.Diagnostics\Aristocrat.Diagnostics.Test\AtiDebugTest.cs:line 103
              at Aristocrat.Diagnostics.Test.AtiDebugTest.ThrowInnerException() in C:\Chameleon\usdltech\Aristocrat.Diagnostics\Aristocrat.Diagnostics.Test\AtiDebugTest.cs:line 91
            *********************************************
            Machine Name: CHAMELEON02-DXP
            Thread Identity: Bob2
            Windows Identity: ARISTOCRAT\jsecrest
            AppDomain Name: UnitTestAdapterDomain_ForC:\Chameleon\usdltech\Aristocrat.Diagnostics\TestResults\jsecrest_CHAMELEON02-DXP 2008-05-14 09_31_13\Out\Aristocrat.Diagnostics.Test.dll
            Created Time: 5/14/2008 9:31:14 AM
            HelpLink: NULL
            Source: Aristocrat.Diagnostics.Test</example>
            <returns>A displayable string containing the exception info.</returns>
        </member>
        <member name="M:Aristocrat.Diagnostics.AtiDebug.PublishException(System.Exception)">
            <summary>
            Writes exception information to the event log.
            </summary>
            <param name="ex">An exception worth logging.</param>
        </member>
        <member name="M:Aristocrat.Diagnostics.AtiDebug.PublishWarning(System.Exception)">
            <summary>
            Writes the exception to the event log, but flags it as a warning.
            </summary>
            <param name="ex">A warning worth logging. In exception form, naturally.</param>
        </member>
        <member name="M:Aristocrat.Diagnostics.AtiDebug.ToDatabaseBinary(System.Byte[])">
            <summary>
            Converts an array of data into a displayable string in 0x00 format.
            </summary>
            <param name="data">An array of data.</param>
            <returns>A display string.</returns>
            <example>0x000102030405</example>
        </member>
        <member name="M:Aristocrat.Diagnostics.AtiDebug.ToHexString(System.Byte[])">
            <summary>
            Converts an array of data into a displayable string.
            </summary>
            <param name="data">An array of data.</param>
            <returns>A display string.</returns>
            <example>00-01-02-03 04-05-06-07 08-09-0A-0B</example>
        </member>
        <member name="M:Aristocrat.Diagnostics.AtiDebug.ToHexString(System.Byte[],System.Char,System.Boolean)">
            <summary>
            Converts the specified data to a string displaying hexidecimal. 
            </summary>
            <param name="data">An array of data.</param>
            <param name="delimiter">The character used to separate data.</param>
            <param name="useSpaceOnFourth">Separates the display of 4 data with a space, otherwise the normal delimiter is used.</param>
            <returns>A display string.</returns>
        </member>
        <member name="M:Aristocrat.Diagnostics.AtiDebug.LogEvent(System.String)">
            <summary>
            Logs an event to the event log.
            </summary>
            <param name="message">A message that will be stored in the event log.</param>
        </member>
        <member name="M:Aristocrat.Diagnostics.AtiDebug.LogWarning(System.String)">
            <summary>
            Logs a warning to the event log.
            </summary>
            <param name="message">The text of the warning.</param>
        </member>
        <member name="M:Aristocrat.Diagnostics.AtiDebug.GetStackTrace(System.Type[])">
            <summary>
            Gets a stack trace, trimming the bottom to not include methods contained certian types
            </summary>
            <param name="ignoredClasses">Types to filter out</param>
            <returns>A stack trace</returns>
        </member>
        <member name="M:Aristocrat.Diagnostics.AtiDebug.StackTraceString(System.Diagnostics.StackTrace)">
            <summary>
            Casts a stack trace to a string
            </summary>
            <param name="stackTrace">The stack trace</param>
            <returns>string</returns>
        </member>
        <member name="M:Aristocrat.Diagnostics.AtiDebug.Dispose">
            <summary>
            Disposes of this object. 
            </summary>
        </member>
        <member name="P:Aristocrat.Diagnostics.AtiDebug.DefaultAtiDebug">
            <summary>
            The default instance of AtiDebug. Fun with global variables.
            </summary>
        </member>
        <member name="T:Aristocrat.Diagnostics.EventLogWriter">
            <summary>
            This class is used internally to write information to the event log.
            </summary>
        </member>
        <member name="M:Aristocrat.Diagnostics.EventLogWriter.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Aristocrat.Diagnostics.EventLogWriter class.
            </summary>
            <param name="applicationName">The name of the eventLog that will be used.</param>
            <remarks>The first eight characters of the event log have to be unique.</remarks>
        </member>
        <member name="M:Aristocrat.Diagnostics.EventLogWriter.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Aristocrat.Diagnostics.EventLogWriter.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the Aristocrat.Diagnostics.EventLogWriter and optionally releases the 
            managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged
            resources.</param>
        </member>
        <member name="T:Aristocrat.Diagnostics.AtiDebugTraceListener">
            <summary>
            Trace listener that simply fires an event when a trace statement occurs. 
            If you hook up to the event in your application you can receive trace events 
            as they occur. Make some sort of scrolling display with that.
            </summary>
        </member>
        <member name="E:Aristocrat.Diagnostics.AtiDebugTraceListener.Traced">
            <summary>
            Event that is fired when trace output occurs. 
            </summary>
        </member>
        <member name="M:Aristocrat.Diagnostics.AtiDebugTraceListener.Start">
            <summary>
            Begins listening to the trace output. 
            </summary>
        </member>
        <member name="M:Aristocrat.Diagnostics.AtiDebugTraceListener.OnTraced(System.String)">
            <summary>
            Fires the Traced event. 
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Aristocrat.Diagnostics.AtiDebugTraceListener.Write(System.String)">
            <summary>
            Writes some trace output. 
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Aristocrat.Diagnostics.AtiDebugTraceListener.WriteLine(System.String)">
            <summary>
            Writes some trace output. 
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:Aristocrat.Diagnostics.AtiDebugTraceListenerEventArgs">
            <summary>
            Some event args for a trace event. 
            </summary>
        </member>
        <member name="M:Aristocrat.Diagnostics.AtiDebugTraceListenerEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Aristocrat.Diagnostics.AtiDebugTraceListenerEventArgs class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="P:Aristocrat.Diagnostics.AtiDebugTraceListenerEventArgs.Message">
            <summary>
            The trace message. 
            </summary>
        </member>
        <member name="T:Aristocrat.Diagnostics.AtiTrace">
            <summary>
            Class that contains methods for Tracing in applications. 
            </summary>
            <remarks>There is support for override the default ToString implementation that will be used with most objects. For 
            instance, an array of data results in the data being listed out in a readable format, 00-01-02-03, rather than 
            Sytem.Bytes[].</remarks>
        </member>
        <member name="M:Aristocrat.Diagnostics.AtiTrace.TraceIf(System.Boolean)">
            <summary>
            Conditionally enters a trace statement. 
            </summary>
            <param name="condition">True to actually do the trace.</param>
        </member>
        <member name="M:Aristocrat.Diagnostics.AtiTrace.TraceWarning(System.Exception)">
            <summary>
            Writes the exception to trace output, but not to the event log.
            </summary>
            <param name="ex"></param>
        </member>
        <member name="M:Aristocrat.Diagnostics.AtiTrace.Trace">
            <summary>
            Logs the assembly, class, and method that called Trace() to the log file. 
            </summary>
        </member>
        <member name="M:Aristocrat.Diagnostics.AtiTrace.TraceIf(System.Boolean,System.Object[])">
            <summary>
            Conditionally traces a variable amount of objects. 
            </summary>
            <param name="condition">True to actually do the trace.</param>
            <param name="args">A list of arguments to log in the trace.</param>
            <returns></returns>
        </member>
        <member name="M:Aristocrat.Diagnostics.AtiTrace.Trace(System.Object[])">
            <summary>
            Logs the assembly, class, and method that called Trace, along with the specified arguments to the log file.
            </summary>
            <param name="args">A list of object to put in the trace.</param>
        </member>
        <member name="M:Aristocrat.Diagnostics.AtiTrace.TraceIf(System.Boolean,System.Byte[])">
            <summary>
            Conditionally traces an array of data.
            </summary>
            <param name="condition">True to actually do the trace.</param>
            <param name="data">An array of interesting data.</param>
            <returns></returns>
        </member>
        <member name="M:Aristocrat.Diagnostics.AtiTrace.Trace(System.Byte[])">
            <summary>
            Writes the data to the trace file in a readable format. 
            </summary>
            <param name="data">An array of interesting data.</param>
        </member>
        <member name="M:Aristocrat.Diagnostics.AtiTrace.TraceIf(System.Boolean,System.String)">
            <summary>
            Conditionally traces a message. 
            </summary>
            <param name="condition">True to actually do the trace.</param>
            <param name="message">A trace message</param>
        </member>
        <member name="M:Aristocrat.Diagnostics.AtiTrace.Trace(System.String)">
            <summary>
            Logs the message and the assembly, class, and method that called Trace to the log file. 
            </summary>
            <param name="message">The message to trace.</param>
        </member>
        <member name="M:Aristocrat.Diagnostics.AtiTrace.Trace(System.Boolean,System.Object)">
            <summary>
            Conditionally traces an object. 
            </summary>
            <param name="condition">True to actually do the trace.</param>
            <param name="ob">An interesting object.</param>
        </member>
        <member name="M:Aristocrat.Diagnostics.AtiTrace.Trace(System.Object)">
            <summary>
            Writes the string representation of the object to the log file. 
            </summary>
            <param name="ob">The object that is being written to the log file.</param>
        </member>
        <member name="T:Aristocrat.Diagnostics.ConsoleLevelTraceListener">
            <summary>
            Directs tracing or debugging output to either the standard output or the standard error stream.
            </summary>
        </member>
        <member name="M:Aristocrat.Diagnostics.ConsoleLevelTraceListener.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Aristocrat.Diagnostics.ConsoleLevelTraceListener"/> class with trace output written to the 
            standard output stream.
            </summary>
        </member>
        <member name="M:Aristocrat.Diagnostics.ConsoleLevelTraceListener.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Aristocrat.Diagnostics.ConsoleLevelTraceListener"/> class with an option to write trace 
            output to the standard output stream or the standard error stream.
            </summary>
            <param name="useErrorStream"><b>true</b> to write tracing and debugging output to the standard error stream; 
            <b>false</b> to write tracing and debugging output to the standard output stream.</param>
        </member>
        <member name="M:Aristocrat.Diagnostics.ConsoleLevelTraceListener.Fail(System.String)">
            <summary>
            Emits or displays a message and a stack trace for an assertion that always fails.
            </summary>
            <param name="message">A message to emit.</param>
        </member>
        <member name="M:Aristocrat.Diagnostics.ConsoleLevelTraceListener.Fail(System.String,System.String)">
            <summary>
            Emits or displays a message and a stack trace for an assertion that always fails.
            </summary>
            <param name="message">A message to emit.</param>
            <param name="detailMessage">A detailed message to emit.</param>
        </member>
        <member name="M:Aristocrat.Diagnostics.ConsoleLevelTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)">
            <summary>
            Writes trace and event information to the console.
            </summary>
            <param name="eventCache">A <see cref="T:System.Diagnostics.TraceEventCache"/> object that contains the current process ID, thread ID, 
            and stack trace information.</param>
            <param name="source">A name used to identify the output, typically the name of the application that generated 
            the trace event.</param>
            <param name="eventType">One of the <see cref="T:System.Diagnostics.TraceEventType"/> values specifying the type of 
            event that has caused the trace></param>
            <param name="id">A numeric identifier for the event.</param>
            <param name="data">An array of objects to emit as data.</param>
        </member>
        <member name="M:Aristocrat.Diagnostics.ConsoleLevelTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])">
            <summary>
            Writes trace and event information to the console.
            </summary>
            <param name="eventCache">A <see cref="T:System.Diagnostics.TraceEventCache"/> object that contains the current process ID, thread ID, 
            and stack trace information.</param>
            <param name="source">A name used to identify the output, typically the name of the application that generated 
            the trace event.</param>
            <param name="eventType">One of the <see cref="T:System.Diagnostics.TraceEventType"/> values specifying the type of event that has 
            caused the trace.</param>
            <param name="id">A numeric identifier for the event.</param>
            <param name="data">An array of objects to emit as data.</param>
        </member>
        <member name="M:Aristocrat.Diagnostics.ConsoleLevelTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)">
            <summary>
            Writes trace and event information to the console.
            </summary>
            <param name="eventCache">A <see cref="T:System.Diagnostics.TraceEventCache"/> object that contains the current process ID, thread ID, 
            and stack trace information.</param>
            <param name="source">A name used to identify the output, typically the name of the application that generated 
            the trace event.</param>
            <param name="eventType">One of the <see cref="T:System.Diagnostics.TraceEventType"/> values specifying the type of 
            event that has caused the trace></param>
            <param name="id">A numeric identifier for the event.</param>
            <param name="message">A message to write.</param>
        </member>
        <member name="M:Aristocrat.Diagnostics.ConsoleLevelTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])">
            <summary>
            Writes trace and event information to the console.
            </summary>
            <param name="eventCache">A <see cref="T:System.Diagnostics.TraceEventCache"/> object that contains the current process ID, thread ID, 
            and stack trace information.</param>
            <param name="source">A name used to identify the output, typically the name of the application that generated 
            the trace event.</param>
            <param name="eventType">One of the <see cref="T:System.Diagnostics.TraceEventType"/> values specifying the type of event that has 
            caused the trace></param>
            <param name="id">A numeric identifier for the event.</param>
            <param name="format">A format string that contains zero or more format items, which correspond to objects in the 
            args array.</param>
            <param name="args">An object array containing zero or more objects to format.</param>
        </member>
        <member name="M:Aristocrat.Diagnostics.ConsoleLevelTraceListener.SetConsoleColor(System.Diagnostics.TraceEventType)">
            <summary>
            Sets the console color for the specified event type.
            </summary>
            <param name="eventType">One of the <see cref="T:System.Diagnostics.TraceEventType"/> values specifying the type of event to set the 
            text color for.</param>
        </member>
        <member name="M:Aristocrat.Diagnostics.ConsoleLevelTraceListener.RestoreConsoleColor">
            <summary>
            Resets the console color to the restore colors.
            </summary>
        </member>
        <member name="P:Aristocrat.Diagnostics.ConsoleLevelTraceListener.CriticalBackgroundColor">
            <summary>
            Gets the critical background color.
            </summary>
        </member>
        <member name="P:Aristocrat.Diagnostics.ConsoleLevelTraceListener.CriticalForegroundColor">
            <summary>
            Gets the critical console foreground color.
            </summary>
        </member>
        <member name="P:Aristocrat.Diagnostics.ConsoleLevelTraceListener.ErrorBackgroundColor">
            <summary>
            Gets the error background color.
            </summary>
        </member>
        <member name="P:Aristocrat.Diagnostics.ConsoleLevelTraceListener.ErrorForegroundColor">
            <summary>
            Gets the error console foreground color.
            </summary>
        </member>
        <member name="P:Aristocrat.Diagnostics.ConsoleLevelTraceListener.InformationBackgroundColor">
            <summary>
            Gets the information background color.
            </summary>
        </member>
        <member name="P:Aristocrat.Diagnostics.ConsoleLevelTraceListener.InformationForegroundColor">
            <summary>
            Gets the information console foreground color.
            </summary>
        </member>
        <member name="P:Aristocrat.Diagnostics.ConsoleLevelTraceListener.RestoreBackgroundColor">
            <summary>
            Gets or sets the color to restore the console background color to.
            </summary>
        </member>
        <member name="P:Aristocrat.Diagnostics.ConsoleLevelTraceListener.RestoreForegroundColor">
            <summary>
            Gets or sets the color to restore the console foreground color to.
            </summary>
        </member>
        <member name="P:Aristocrat.Diagnostics.ConsoleLevelTraceListener.VerboseBackgroundColor">
            <summary>
            Gets the verbose background color.
            </summary>
        </member>
        <member name="P:Aristocrat.Diagnostics.ConsoleLevelTraceListener.VerboseForegroundColor">
            <summary>
            Gets the verbose console foreground color.
            </summary>
        </member>
        <member name="P:Aristocrat.Diagnostics.ConsoleLevelTraceListener.WarningBackgroundColor">
            <summary>
            Gets the warning background color.
            </summary>
        </member>
        <member name="P:Aristocrat.Diagnostics.ConsoleLevelTraceListener.WarningForegroundColor">
            <summary>
            Gets the warning console foreground color.
            </summary>
        </member>
        <member name="T:Aristocrat.Diagnostics.ExceptionInfo">
            <summary>
            Whether or not exception information is included
            </summary>
        </member>
        <member name="F:Aristocrat.Diagnostics.ExceptionInfo.None">
            <summary>
            No exception information is to be included
            </summary>
        </member>
        <member name="F:Aristocrat.Diagnostics.ExceptionInfo.Present">
            <summary>
            Exception information is to be included
            </summary>
        </member>
        <member name="T:Aristocrat.Diagnostics.ExtendedTraceSource">
            <summary>
            Extended trace source.
            </summary>
            <seealso cref="T:System.Diagnostics.TraceSource" />
        </member>
        <member name="M:Aristocrat.Diagnostics.ExtendedTraceSource.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ExtendedTraceSource"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Aristocrat.Diagnostics.ExtendedTraceSource.#ctor(System.String,System.Diagnostics.SourceLevels)">
            <summary>
            Initializes a new instance of the <see cref="T:ExtendedTraceSource"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="defaultLevel">The default level.</param>
        </member>
        <member name="M:Aristocrat.Diagnostics.ExtendedTraceSource.TraceEvent(System.Diagnostics.TraceEventType,System.Int32,System.String)">
            <summary>
            Writes a trace event message to the trace listeners in the 
            <see cref="P:System.Diagnostics.TraceSource.Listeners"/> collection using the specified event type, event 
            identifier, and message.
            </summary>
            <param name="eventType">One of the <see cref="T:TraceEventType"/> values that specifies the event type of the
            trace data.</param>
            <param name="id">A numeric identifier for the event.</param>
            <param name="message">The trace message to write.</param>
        </member>
        <member name="M:Aristocrat.Diagnostics.ExtendedTraceSource.TraceEvent(System.Diagnostics.TraceEventType,System.Int32,System.String,Aristocrat.Diagnostics.TraceCollection)">
            <summary>
            Writes a trace event message to the trace listeners in the 
            <see cref="P:System.Diagnostics.TraceSource.Listeners"/> collection using the specified event type, event 
            identifier, message, and trace collection.
            </summary>
            <param name="eventType">One of the <see cref="T:TraceEventType"/> values that specifies the event type of the
            trace data.</param>
            <param name="id">A numeric identifier for the event.</param>
            <param name="message">The trace message to write.</param>
            <param name="collection">A trace collection object containing objects to append to the message.</param>
        </member>
        <member name="M:Aristocrat.Diagnostics.ExtendedTraceSource.TraceEvent(System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])">
            <summary>
            Writes a trace event message to the trace listeners in the 
            <see cref="P:System.Diagnostics.TraceSource.Listeners"/> collection using the specified event type, event 
            identifier, and argument array and format.
            </summary>
            <param name="eventType">One of the <see cref="T:TraceEventType"/> values that specifies the event type of the
            trace data.</param>
            <param name="id">A numeric identifier for the event.</param>
            <param name="format">A composite format string that contains text intermixed with zero or more format items, 
            which correspond to objects in the args array.</param>
            <param name="args">An object array containing zero or more objects to format.</param>
        </member>
        <member name="M:Aristocrat.Diagnostics.ExtendedTraceSource.TraceEvent(System.Diagnostics.TraceEventType,System.Int32,System.String,Aristocrat.Diagnostics.TraceCollection,System.Object[])">
            <summary>
            Writes a trace event message to the trace listeners in the 
            <see cref="P:System.Diagnostics.TraceSource.Listeners"/> collection using the specified event type, event 
            identifier, and argument array, format, and trace collection.
            </summary>
            <param name="eventType">One of the <see cref="T:TraceEventType"/> values that specifies the event type of the
            trace data.</param>
            <param name="id">A numeric identifier for the event.</param>
            <param name="format">A composite format string that contains text intermixed with zero or more format items, 
            which correspond to objects in the args array.</param>
            <param name="collection">A trace collection object containing objects to append to the message.</param>
            <param name="args">An object array containing zero or more objects to format.</param>
        </member>
        <member name="M:Aristocrat.Diagnostics.ExtendedTraceSource.TraceInformation(System.String)">
            <summary>
            Writes an informational message to the trace listeners in the 
            <see cref="P:System.Diagnostics.TraceSource.Listeners"/> collection using the specified message.
            </summary>
            <param name="message">The informative message to write.</param>
        </member>
        <member name="M:Aristocrat.Diagnostics.ExtendedTraceSource.TraceInformation(System.String,Aristocrat.Diagnostics.TraceCollection)">
            <summary>
            Writes an informational message to the trace listeners in the 
            <see cref="P:System.Diagnostics.TraceSource.Listeners"/> collection using the specified message and trace
            collection.
            </summary>
            <param name="message">The informative message to write.</param>
            <param name="collection">A trace collection object.</param>
        </member>
        <member name="M:Aristocrat.Diagnostics.ExtendedTraceSource.TraceInformation(System.String,System.Object[])">
            <summary>
            Writes an informational message to the trace listeners in the 
            <see cref="P:System.Diagnostics.TraceSource.Listeners"/> collection using the specified object array and 
            formatting information.
            </summary>
            <param name="format">A composite format string that contains text intermixed with zero or more format items, 
            which correspond to objects in the args array.</param>
            <param name="args">An object array containing zero or more objects to format.</param>
        </member>
        <member name="M:Aristocrat.Diagnostics.ExtendedTraceSource.TraceInformation(System.String,Aristocrat.Diagnostics.TraceCollection,System.Object[])">
            <summary>
            Writes an informational message to the trace listeners in the 
            <see cref="P:System.Diagnostics.TraceSource.Listeners"/> collection using the specified object array, formatting 
            information, and trace collection.
            </summary>
            <param name="format">A composite format string that contains text intermixed with zero or more format items, 
            which correspond to objects in the args array.</param>
            <param name="collection">A trace collection object.</param>
            <param name="args">An object array containing zero or more objects to format.</param>
        </member>
        <member name="M:Aristocrat.Diagnostics.ExtendedTraceSource.TraceTransfer(System.Int32,System.String,System.Guid)">
            <summary>
            Writes a trace transfer message to the trace listeners in the 
            <see cref="P:System.Diagnostics.TraceSource.Listeners"/> collection using the specified numeric identifier, 
            message, and related activity identifier.
            </summary>
            <param name="id">A numeric identifier for the event.</param>
            <param name="message">The trace message to write.</param>
            <param name="relatedActivityId">A <see cref="T:Guid"/> structure that identifies the related activity.</param>
        </member>
        <member name="M:Aristocrat.Diagnostics.ExtendedTraceSource.GetSupportedAttributes">
            <summary>
            Gets supported attributes.
            </summary>
        </member>
        <member name="P:Aristocrat.Diagnostics.ExtendedTraceSource.EventSourceFrame">
            <summary>
            Gets or sets the event source frame number.
            </summary>
            <remarks>Defaults to 3.</remarks>
        </member>
        <member name="P:Aristocrat.Diagnostics.ExtendedTraceSource.TraceEventSource">
            <summary>
            Gets or sets a value indicating whether to trace the event source.
            </summary>
            <remarks>Defaults to false.</remarks>
        </member>
        <member name="T:Aristocrat.Diagnostics.Logger">
            <summary>
            This is a base class for classes that do file logging and other types of logging. 
            </summary>
            <remarks>It is expandable through use of the IWriteStrategy interface.</remarks>
        </member>
        <member name="M:Aristocrat.Diagnostics.Logger.#ctor">
            <summary>
            Constructor 
            </summary>
        </member>
        <member name="M:Aristocrat.Diagnostics.Logger.Finalize">
            <summary>
            Finalizer
            </summary>
        </member>
        <member name="P:Aristocrat.Diagnostics.Logger.CurrentFileName">
            <summary>
            Gets the name of the file that is currently being written to.
            </summary>
        </member>
        <member name="M:Aristocrat.Diagnostics.Logger.ForceRollover">
            <summary>
            Forces a log rollover. This is probably only used for test.
            </summary>
        </member>
        <member name="M:Aristocrat.Diagnostics.Logger.Write(System.String)">
            <summary>
            Writes a message to the log. 
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Aristocrat.Diagnostics.Logger.Flush">
            <summary>
            Forces the contents of the fileStream to disk.
            </summary>
        </member>
        <member name="M:Aristocrat.Diagnostics.Logger.Dispose">
            <summary>
              Disposes of this object and its resources. 
            </summary>
        </member>
        <member name="M:Aristocrat.Diagnostics.Logger.Dispose(System.Boolean)">
            <summary>
             Releases the resources that this object is using.
            </summary>
        </member>
        <member name="T:Aristocrat.Diagnostics.LoggerSettings">
            <summary>
            Class that contains settings for the RollingLengthStrategy
            </summary>
        </member>
        <member name="P:Aristocrat.Diagnostics.LoggerSettings.Directory">
            <summary>
            This is the directory where logs are stored. Use nothing to store logs in the running application directory.
            </summary>
        </member>
        <member name="P:Aristocrat.Diagnostics.LoggerSettings.LogName">
            <summary>
            The base Log name. 
            </summary>
        </member>
        <member name="P:Aristocrat.Diagnostics.LoggerSettings.MaxLogs">
            <summary>
            The maximum number of logs to include in the log file rotation. The MinimumAge property takes precedence over this. Use -1 to not have a MaximumLogs restriction.
            </summary>
        </member>
        <member name="P:Aristocrat.Diagnostics.LoggerSettings.MaxLength">
            <summary>
            The maximum length of a log file. Use -1 to not have a restriction on the file length. 
            </summary>
        </member>
        <member name="P:Aristocrat.Diagnostics.LoggerSettings.Duration">
            <summary>
            The length of time that an individual log file will represent. Use -1 to not have a maximum time period.
            </summary>
        </member>
        <member name="P:Aristocrat.Diagnostics.LoggerSettings.MinimumAge">
            <summary>
            The minimum age of a log file before it can be recycled when using a rolling strategy.
            </summary>
        </member>
        <member name="P:Aristocrat.Diagnostics.LoggerSettings.Encoding">
            <summary>
            
            </summary>
        </member>
        <member name="T:Aristocrat.Diagnostics.MiniDump">
            <summary>
            Constructs a MiniDump from a .Net Process
            </summary>
        </member>
        <member name="M:Aristocrat.Diagnostics.MiniDump.Write(System.Runtime.InteropServices.SafeHandle,Aristocrat.Diagnostics.MiniDumpTypes,Aristocrat.Diagnostics.ExceptionInfo)">
            <summary>
            Write the mini dump for the current process
            </summary>
            <param name="fileHandle">A Stream SafeHandle to write to</param>
            <param name="miniDumpTypes">What type of MiniDump to write</param>
            <param name="exceptionInfo">Whether or not to include exception information</param>
            <returns>True if the MiniDump is successfully written, false if not.</returns>
        </member>
        <member name="M:Aristocrat.Diagnostics.MiniDump.Write(System.Diagnostics.Process,System.Runtime.InteropServices.SafeHandle,Aristocrat.Diagnostics.MiniDumpTypes,Aristocrat.Diagnostics.ExceptionInfo)">
            <summary>
            Write the mini dump for the specified process
            </summary>
            <param name="process">A reference to the process to peform the minidump for</param>
            <param name="fileHandle">A Stream SafeHandle to write to</param>
            <param name="miniDumpType">What type of MiniDump to write</param>
            <param name="exceptionInfo">Whether or not to include exception information</param>
            <returns>True if the MiniDump is successfully written, false if not.</returns>
        </member>
        <member name="M:Aristocrat.Diagnostics.MiniDump.Write(System.Runtime.InteropServices.SafeHandle,Aristocrat.Diagnostics.MiniDumpTypes)">
            <summary>
            Write the mini dump without exception information for the current process
            </summary>
            <param name="fileHandle">A Stream SafeHandle to write to.</param>
            <param name="miniDumpType">The type of MiniDump to write</param>
            <returns>True if the MiniDump was successfully written, false if not.</returns>
        </member>
        <member name="M:Aristocrat.Diagnostics.MiniDump.Write(System.Diagnostics.Process,System.Runtime.InteropServices.SafeHandle,Aristocrat.Diagnostics.MiniDumpTypes)">
            <summary>
            Write the mini dump for the specified process without exception information
            </summary>
            <param name="process">A reference to the process to peform the minidump for</param>
            <param name="fileHandle">A Stream SafeHandle to write to.</param>
            <param name="miniDumpType">The type of MiniDump to write</param>
            <returns>True if the MiniDump was successfully written, false if not.</returns>
        </member>
        <member name="T:Aristocrat.Diagnostics.MiniDumpExceptionInformation">
            <summary>
            Contains the exception information written to the MiniDump file by the MiniDumpWriteDump function.
            </summary>
        </member>
        <member name="F:Aristocrat.Diagnostics.MiniDumpExceptionInformation.ThreadId">
            <summary>
            The identifier of the thread throwing the exception.
            </summary>
        </member>
        <member name="F:Aristocrat.Diagnostics.MiniDumpExceptionInformation.ExceptionPointers">
            <summary>
            A pointer to an EXCEPTION_POINTERS structure specifying a computer-independent description of the exception and 
            the processor context at the time of the exception.
            </summary>
        </member>
        <member name="F:Aristocrat.Diagnostics.MiniDumpExceptionInformation.ClientPointers">
            <summary>
            Determines where to get the memory regions pointed to by the ExceptionPointers member. Set to TRUE if the memory 
            resides in the process being debugged (the target process of the debugger). Otherwise, set to FALSE if the 
            memory resides in the address space of the calling program (the debugger process). If you are accessing local 
            memory (in the calling process) you should not set this member to TRUE.
            </summary>
        </member>
        <member name="T:Aristocrat.Diagnostics.MiniDumpTypes">
            <summary>
            Identifies the type of information that will be written to the MiniDump file by the MiniDumpWriteDump function.
            </summary>
        </member>
        <member name="F:Aristocrat.Diagnostics.MiniDumpTypes.Normal">
            <summary>
            Include just the information necessary to capture stack traces for all existing threads in a process.
            </summary>
        </member>
        <member name="F:Aristocrat.Diagnostics.MiniDumpTypes.WithDataSegs">
            <summary>
            Include the data sections from all loaded modules. This results in the inclusion of global variables, which can 
            make the MiniDump file significantly larger. For per-module control, use the ModuleWriteDataSeg enumeration 
            value from MODULE_WRITE_FLAGS.
            </summary>
        </member>
        <member name="F:Aristocrat.Diagnostics.MiniDumpTypes.WithFullMemory">
            <summary>
            Include all accessible memory in the process. The raw memory data is included at the end, so that the initial 
            structures can be mapped directly without the raw memory information. This option can result in a very large file.
            </summary>
        </member>
        <member name="F:Aristocrat.Diagnostics.MiniDumpTypes.WithHandleData">
            <summary>
            Include high-level information about the operating system handles that are active when the MiniDump is made.
            </summary>
        </member>
        <member name="F:Aristocrat.Diagnostics.MiniDumpTypes.FilterMemory">
            <summary>
            Stack and backing store memory written to the MiniDump file should be filtered to remove all but the pointer 
            values necessary to reconstruct a stack trace.
            </summary>
        </member>
        <member name="F:Aristocrat.Diagnostics.MiniDumpTypes.ScanMemory">
            <summary>
            Stack and backing store memory should be scanned for pointer references to modules in the module list. If a 
            module is referenced by stack or backing store memory, the ModuleWriteFlags member of the 
            MiniDump_CALLBACK_OUTPUT structure is set to ModuleReferencedByMemory.
            </summary>
        </member>
        <member name="F:Aristocrat.Diagnostics.MiniDumpTypes.WithUnloadedModules">
            <summary>
            Include information from the list of modules that were recently unloaded, if this information is maintained by 
            the operating system.
            </summary>
        </member>
        <member name="F:Aristocrat.Diagnostics.MiniDumpTypes.WithIndirectlyReferencedMemory">
            <summary>
            Include pages with data referenced by locals or other stack memory. This option can increase the size of the 
            MiniDump file significantly.
            </summary>
        </member>
        <member name="F:Aristocrat.Diagnostics.MiniDumpTypes.FilterModulePaths">
            <summary>
            Filter module paths for information such as user names or important directories. This option may prevent the 
            system from locating the image file and should be used only in special situations.
            </summary>
        </member>
        <member name="F:Aristocrat.Diagnostics.MiniDumpTypes.WithProcessThreadData">
            <summary>
            Include complete per-process and per-thread information from the operating system.
            </summary>
        </member>
        <member name="F:Aristocrat.Diagnostics.MiniDumpTypes.WithPrivateReadWriteMemory">
            <summary>
            Scan the virtual address space for PAGE_READWRITE memory to be included.
            </summary>
        </member>
        <member name="F:Aristocrat.Diagnostics.MiniDumpTypes.WithoutOptionalData">
            <summary>
            Reduce the data that is dumped by eliminating memory regions that are not essential to meet criteria specified 
            for the dump. This can avoid dumping memory that may contain data that is private to the user. However, it is 
            not a guarantee that no private information will be present.
            </summary>
        </member>
        <member name="F:Aristocrat.Diagnostics.MiniDumpTypes.WithFullMemoryInfo">
            <summary>
            Include memory region information. For more information, see MiniDump_MEMORY_INFO_LIST.
            </summary>
        </member>
        <member name="F:Aristocrat.Diagnostics.MiniDumpTypes.WithThreadInfo">
            <summary>
            Include thread state information. For more information, see MiniDump_THREAD_INFO_LIST.
            </summary>
        </member>
        <member name="F:Aristocrat.Diagnostics.MiniDumpTypes.WithCodeSegs">
            <summary>
            Include all code and code-related sections from loaded modules to capture executable content. For per-module 
            control, use the ModuleWriteCodeSegs enumeration value from MODULE_WRITE_FLAGS.
            </summary>
        </member>
        <member name="F:Aristocrat.Diagnostics.MiniDumpTypes.WithoutAuxiliaryState">
            <summary>
            Turns off secondary auxiliary-supported memory gathering.
            </summary>
        </member>
        <member name="F:Aristocrat.Diagnostics.MiniDumpTypes.WithFullAuxiliaryState">
            <summary>
            Requests that auxiliary data providers include their state in the dump image; the state data that is included 
            is provider dependent. This option can result in a large dump image.
            </summary>
        </member>
        <member name="F:Aristocrat.Diagnostics.MiniDumpTypes.WithPrivateWriteCopyMemory">
            <summary>
            Scans the virtual address space for PAGE_WRITECOPY memory to be included.
            </summary>
        </member>
        <member name="F:Aristocrat.Diagnostics.MiniDumpTypes.IgnoreInaccessibleMemory">
            <summary>
            If you specify MiniDumpWithFullMemory, the MiniDumpWriteDump function will fail if the function cannot read the 
            memory regions; however, if you include MiniDumpIgnoreInaccessibleMemory, the MiniDumpWriteDump function will 
            ignore the memory read failures and continue to generate the dump. Note that the inaccessible memory regions are 
            not included in the dump.
            </summary>
        </member>
        <member name="F:Aristocrat.Diagnostics.MiniDumpTypes.ValidTypeFlags">
            <summary>
            Adds security token related data. This will make the "!token" extension work when processing a user-mode dump.
            </summary>
        </member>
        <member name="M:Aristocrat.Diagnostics.NativeMethods.MiniDumpWriteDump(System.IntPtr,System.UInt32,System.Runtime.InteropServices.SafeHandle,System.UInt32,Aristocrat.Diagnostics.MiniDumpExceptionInformation@,System.IntPtr,System.IntPtr)">
            <summary>
            Writes user-mode MiniDump information to the specified file.
            </summary>
            <param name="hProcess">A handle to the process for which the information is to be generated. This handle must have PROCESS_QUERY_INFORMATION and PROCESS_VM_READ access to the process. For more information, see Process Security and Access Rights. The caller must also be able to get THREAD_ALL_ACCESS access to the threads in the process. For more information, see Thread Security and Access Rights.</param>
            <param name="processId">The identifier of the process for which the information is to be generated.</param>
            <param name="hFile">A handle to the file in which the information is to be written.</param>
            <param name="dumpType">The type of information to be generated. This parameter can be one or more of the values from the MiniDump_TYPE enumeration.</param>
            <param name="expParam">A pointer to a MiniDump_EXCEPTION_INFORMATION structure describing the client exception that caused the MiniDump to be generated. If the value of this parameter is NULL, no exception information is included in the MiniDump file.</param>
            <param name="userStreamParam">A pointer to a MiniDump_USER_STREAM_INFORMATION structure. If the value of this parameter is NULL, no user-defined information is included in the MiniDump file.</param>
            <param name="callbackParam">A pointer to a MiniDump_CALLBACK_INFORMATION structure that specifies a callback routine which is to receive extended MiniDump information. If the value of this parameter is NULL, no callbacks are performed.</param>
            <returns>If the function succeeds, the return value is TRUE; otherwise, the return value is FALSE. To retrieve extended error information, call GetLastError. Note that the last error will be an HRESULT value.</returns>
        </member>
        <member name="M:Aristocrat.Diagnostics.NativeMethods.MiniDumpWriteDump(System.IntPtr,System.UInt32,System.Runtime.InteropServices.SafeHandle,System.UInt32,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            Writes user-mode MiniDump information to the specified file.
            </summary>
            <param name="hProcess">A handle to the process for which the information is to be generated. This handle must have PROCESS_QUERY_INFORMATION and PROCESS_VM_READ access to the process. For more information, see Process Security and Access Rights. The caller must also be able to get THREAD_ALL_ACCESS access to the threads in the process. For more information, see Thread Security and Access Rights.</param>
            <param name="processId">The identifier of the process for which the information is to be generated.</param>
            <param name="hFile">A handle to the file in which the information is to be written.</param>
            <param name="dumpType">The type of information to be generated. This parameter can be one or more of the values from the MiniDump_TYPE enumeration.</param>
            <param name="expParam">A pointer to a MiniDump_EXCEPTION_INFORMATION structure describing the client exception that caused the MiniDump to be generated. If the value of this parameter is NULL, no exception information is included in the MiniDump file.</param>
            <param name="userStreamParam">A pointer to a MiniDump_USER_STREAM_INFORMATION structure. If the value of this parameter is NULL, no user-defined information is included in the MiniDump file.</param>
            <param name="callbackParam">A pointer to a MiniDump_CALLBACK_INFORMATION structure that specifies a callback routine which is to receive extended MiniDump information. If the value of this parameter is NULL, no callbacks are performed.</param>
            <returns>If the function succeeds, the return value is TRUE; otherwise, the return value is FALSE. To retrieve extended error information, call GetLastError. Note that the last error will be an HRESULT value.</returns>
        </member>
        <member name="M:Aristocrat.Diagnostics.NativeMethods.GetCurrentThreadId">
            <summary>
            Retrieves the thread identifier of the calling thread.
            </summary>
            <returns>The return value is the thread identifier of the calling thread.</returns>
        </member>
        <member name="T:Aristocrat.Diagnostics.RollFileBehavior">
            <summary>
            Defines the behavior when the rool file is created.
            </summary>
        </member>
        <member name="F:Aristocrat.Diagnostics.RollFileBehavior.Overwrite">
            <summary>
            Overwrites the file if it already exists.
            </summary>
        </member>
        <member name="F:Aristocrat.Diagnostics.RollFileBehavior.Increment">
            <summary>
            Use a sequence number at the end of the generated file if it already exists. If it fails again then increment 
            the sequence until a non existent filename is found.
            </summary>
        </member>
        <member name="F:Aristocrat.Diagnostics.RollFileBehavior.Timestamp">
            <summary>
            Use the current time to stamp at the end of the generated file.
            </summary>
        </member>
        <member name="F:Aristocrat.Diagnostics.RollFileBehavior.Circular">
            <summary>
            A finite number of sequential files, each with a maximum file size. When the 
            <see cref="P:Aristocrat.Diagnostics.RollFileTraceListener.MaximumNumberOfFiles"/> property value is reached, the 
            first file is cleared and overwritten. Files are then incrementally overwritten in a circular manner.
            </summary>
        </member>
        <member name="T:Aristocrat.Diagnostics.RollFileTraceListener">
            <summary>
            Performs logging to a file and rolls the output file when either time or maximum file size thresholds are exceeded.
            </summary>
            <remarks>Logging always occurs to the configured file name, and when roll occurs a new rolled file name is 
            calculatedby adding the timestamp pattern to the configured file name.<para/>The need of rolling is calculated 
            before performing a logging operation, so even if the thresholds are exceeded roll will not occur until a new entry 
            is logged.<para/>Both time and maximum file size thresholds can be configured, and when the first of them occurs 
            both will be reset.<para/>The elapsed time is calculated from the creation date of the logging file.</remarks>
        </member>
        <member name="M:Aristocrat.Diagnostics.RollFileTraceListener.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RollFileTraceListener"/> class.
            </summary>
        </member>
        <member name="M:Aristocrat.Diagnostics.RollFileTraceListener.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RollFileTraceListener"/> class, using the file as the recipient 
            of the debugging and tracing output.
            </summary>
            <param name="fileName">The name of the file the <see cref="T:RollFileTraceListener"/> writes to.</param>
            <exception cref="T:System.ArgumentNullException">The file is null. </exception>
        </member>
        <member name="M:Aristocrat.Diagnostics.RollFileTraceListener.#ctor(System.String,Aristocrat.Diagnostics.RollFileBehavior,System.Int32,Aristocrat.Diagnostics.RollInterval,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:RollFileTraceListener"/> 
            </summary>
            <param name="fileName">The filename where the entries will be logged.</param>
            <param name="behavior">Expected behavior that will be used when the roll file has to be created.</param>
            <param name="rollSize">The maximum file size, in bytes, before rolling.</param>
            <param name="interval">The time interval that makes the file roll.</param>
            <param name="timestampPattern">The date format that will be appended to the new roll file.</param>
        </member>
        <member name="M:Aristocrat.Diagnostics.RollFileTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)">
            <summary>
            Writes trace and event information to the console.
            </summary>
            <param name="eventCache">A <see cref="T:TraceEventCache"/> object that contains the current process ID, thread 
            ID, and stack trace information.</param>
            <param name="source">A name used to identify the output, typically the name of the application that generated 
            the trace event.</param>
            <param name="eventType">One of the <see cref="T:TraceEventType"/> values specifying the type of event that has 
            caused the trace></param>
            <param name="id">A numeric identifier for the event</param>
            <param name="data">An array of objects to emit as data.</param>
        </member>
        <member name="M:Aristocrat.Diagnostics.RollFileTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])">
            <summary>
            Writes trace and event information to the console.
            </summary>
            <param name="eventCache">A <see cref="T:TraceEventCache"/> object that contains the current process ID, thread 
            ID, and stack trace information.</param>
            <param name="source">A name used to identify the output, typically the name of the application that generated 
            the trace event.</param>
            <param name="eventType">One of the <see cref="T:TraceEventType"/> values specifying the type of event that has 
            caused the trace></param>
            <param name="id">A numeric identifier for the event</param>
            <param name="data">An array of objects to emit as data.</param>
        </member>
        <member name="M:Aristocrat.Diagnostics.RollFileTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])">
            <summary>
            Writes trace and event information to the console.
            </summary>
            <param name="eventCache">A <see cref="T:TraceEventCache"/> object that contains the current process ID, thread 
            ID, and stack trace information.</param>
            <param name="source">A name used to identify the output, typically the name of the application that generated 
            the trace event.</param>
            <param name="eventType">One of the <see cref="T:TraceEventType"/> values specifying the type of event that has 
            caused the trace></param>
            <param name="id">A numeric identifier for the event</param>
            <param name="format">A format string that contains zero or more format items, which correspond to objects in the 
            args array.</param>
            <param name="args">An object array containing zero or more objects to format.</param>
        </member>
        <member name="M:Aristocrat.Diagnostics.RollFileTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)">
            <summary>
            Writes trace and event information to the console.
            </summary>
            <param name="eventCache">A <see cref="T:TraceEventCache"/> object that contains the current process ID, thread 
            ID, and stack trace information.</param>
            <param name="source">A name used to identify the output, typically the name of the application that generated 
            the trace event.</param>
            <param name="eventType">One of the <see cref="T:TraceEventType"/> values specifying the type of event that has 
            caused the trace></param>
            <param name="id">A numeric identifier for the event</param>
            <param name="message">A message to write.</param>
        </member>
        <member name="M:Aristocrat.Diagnostics.RollFileTraceListener.GetSupportedAttributes">
            <summary>
            Gets the custom attributes supported by the trace listener.
            </summary>
            <returns>A string array naming the custom attributes supported by the trace listener, or <see langref="null"/> 
            if there are no custom attributes.</returns>
        </member>
        <member name="P:Aristocrat.Diagnostics.RollFileTraceListener.RollFileBehavior">
            <summary>
            Get or set the expected behavior that will be used when the roll file has to be created.
            </summary>
        </member>
        <member name="P:Aristocrat.Diagnostics.RollFileTraceListener.RollInterval">
            <summary>
            Get or set the time interval that makes the file roll.
            </summary>
        </member>
        <member name="P:Aristocrat.Diagnostics.RollFileTraceListener.MaximumFileSize">
            <summary>
            Get or set the maximum file size, in bytes, before rolling.
            </summary>
        </member>
        <member name="P:Aristocrat.Diagnostics.RollFileTraceListener.MaximumNumberOfFiles">
            <summary>
            Get or set the maximum number of log files.
            </summary>
            <remarks>This is only used by the <see cref="F:RollFileBehavior.Circular"/> behavior.</remarks>
        </member>
        <member name="P:Aristocrat.Diagnostics.RollFileTraceListener.TimestampPattern">
            <summary>
            Get or set the date format that will be appended to the new roll file.
            </summary>
        </member>
        <member name="T:Aristocrat.Diagnostics.RollInterval">
            <summary>
            Defines the frequency when the trace file from <see cref="T:Aristocrat.Diagnostics.RollFileTraceListener"/> needs to 
            be rolled.
            </summary>
        </member>
        <member name="F:Aristocrat.Diagnostics.RollInterval.None">
            <summary>
            The roll file should never be rolled.
            </summary>
        </member>
        <member name="F:Aristocrat.Diagnostics.RollInterval.Minute">
            <summary>
            The roll file should rolled every minute.
            </summary>
        </member>
        <member name="F:Aristocrat.Diagnostics.RollInterval.Hour">
            <summary>
            The roll file should rolled every hour.
            </summary>
        </member>
        <member name="F:Aristocrat.Diagnostics.RollInterval.Day">
            <summary>
            The roll file should rolled every day.
            </summary>
        </member>
        <member name="F:Aristocrat.Diagnostics.RollInterval.Midnight">
            <summary>
            The roll file should rolled every day at midnight.
            </summary>
        </member>
        <member name="F:Aristocrat.Diagnostics.RollInterval.Week">
            <summary>
            The roll file should rolled every week.
            </summary>
        </member>
        <member name="F:Aristocrat.Diagnostics.RollInterval.Month">
            <summary>
            The roll file should rolled every month.
            </summary>
        </member>
        <member name="F:Aristocrat.Diagnostics.RollInterval.Year">
            <summary>
            The roll file should rolled every year.
            </summary>
        </member>
        <member name="T:Aristocrat.Diagnostics.SourceTrace">
            <summary>
            Provides a set of methods and properties that help trace the execution of code.
            </summary>
        </member>
        <member name="M:Aristocrat.Diagnostics.SourceTrace.GetAttributes(System.String)">
            <summary>
            Gets the custom switch attributes defined in the application configuration file.
            </summary>
            <param name="source">The name of the source, typically the name of the application.</param>
            <returns>A <see cref="T:System.Collections.Specialized.StringDictionary"/> containing the custom attributes for the trace switch.</returns>
        </member>
        <member name="M:Aristocrat.Diagnostics.SourceTrace.GetListeners(System.String)">
            <summary>
            Gets the collection of trace listeners for the trace source.
            </summary>
            <param name="source">The name of the source, typically the name of the application.</param>
            <returns>A <see cref="T:System.Diagnostics.TraceListenerCollection"/> that contains the active trace listeners associated with the 
            source.</returns>
        </member>
        <member name="M:Aristocrat.Diagnostics.SourceTrace.GetSwitch(System.String)">
            <summary>
            Gets the source switch data.
            </summary>
            <param name="source">The name of the source, typically the name of the application.</param>
            <returns>A <see cref="T:System.Diagnostics.SourceSwitch"/> object representing the source switch data.</returns>
        </member>
        <member name="M:Aristocrat.Diagnostics.SourceTrace.SetSwitch(System.String,System.Diagnostics.SourceSwitch)">
            <summary>
            Sets the source switch data.
            </summary>
            <param name="source">The name of the source, typically the name of the application.</param>
            <param name="sourceSwitch">A <see cref="T:System.Diagnostics.SourceSwitch"/> to set to the source.</param>
            <returns>A <see cref="T:System.Diagnostics.SourceSwitch"/> object representing the source switch data.</returns>
        </member>
        <member name="M:Aristocrat.Diagnostics.SourceTrace.TraceCritical(System.String,System.String)">
            <summary>
            Writes a critical message to the trace listeners in the <see cref="P:System.Diagnostics.TraceSource.Listeners"/> collection using the 
            specified message.
            </summary>
            <param name="source">The name of the source, typically the name of the application.</param>
            <param name="message">The critical message to write.</param>
        </member>
        <member name="M:Aristocrat.Diagnostics.SourceTrace.TraceCritical(System.String,System.Int32,System.String)">
            <summary>
            Writes a critical message to the trace listeners in the <see cref="P:System.Diagnostics.TraceSource.Listeners"/> collection using the 
            specified message.
            </summary>
            <param name="source">The name of the source, typically the name of the application.</param>
            <param name="id">A numeric identifier for the message.</param>
            <param name="message">The critical message to write.</param>
        </member>
        <member name="M:Aristocrat.Diagnostics.SourceTrace.TraceCritical(System.String,System.String,Aristocrat.Diagnostics.TraceCollection)">
            <summary>
            Writes a critical message to the trace listeners in the <see cref="P:System.Diagnostics.TraceSource.Listeners"/> collection using the 
            specified message and trace collection.
            </summary>
            <param name="source">The name of the source, typically the name of the application.</param>
            <param name="message">The critical message to write.</param>
            <param name="collection">A trace collection object.</param>
        </member>
        <member name="M:Aristocrat.Diagnostics.SourceTrace.TraceCritical(System.String,System.Int32,System.String,Aristocrat.Diagnostics.TraceCollection)">
            <summary>
            Writes a critical message to the trace listeners in the <see cref="P:System.Diagnostics.TraceSource.Listeners"/> collection using the 
            specified message and trace collection.
            </summary>
            <param name="source">The name of the source, typically the name of the application.</param>
            <param name="id">A numeric identifier for the message.</param>
            <param name="message">The critical message to write.</param>
            <param name="collection">A trace collection object.</param>
        </member>
        <member name="M:Aristocrat.Diagnostics.SourceTrace.TraceCritical(System.String,System.String,System.Object[])">
            <summary>
            Writes a critical message to the trace listeners in the <see cref="P:System.Diagnostics.TraceSource.Listeners"/> collection using the 
            specified object array and formatting information.
            </summary>
            <param name="source">The name of the source, typically the name of the application.</param>
            <param name="format">A format string that contains zero or more format items that correspond to objects in the 
            args array.</param>
            <param name="args">An array containing zero or more objects to format.</param>
        </member>
        <member name="M:Aristocrat.Diagnostics.SourceTrace.TraceCritical(System.String,System.Int32,System.String,Aristocrat.Diagnostics.TraceCollection,System.Object[])">
            <summary>
            Writes a critical message to the trace listeners in the <see cref="P:System.Diagnostics.TraceSource.Listeners"/> collection using the 
            specified object array, formatting information, and trace collection.
            </summary>
            <param name="source">The name of the source, typically the name of the application.</param>
            <param name="id">A numeric identifier for the message.</param>
            <param name="format">A format string that contains zero or more format items that correspond to objects in the 
            args array.</param>
            <param name="collection">A trace collection object.</param>
            <param name="args">An array containing zero or more objects to format.</param>
        </member>
        <member name="M:Aristocrat.Diagnostics.SourceTrace.TraceCritical(System.String,System.String,Aristocrat.Diagnostics.TraceCollection,System.Object[])">
            <summary>
            Writes a critical message to the trace listeners in the <see cref="P:System.Diagnostics.TraceSource.Listeners"/> collection using the 
            specified object array, formatting information, and trace collection.
            </summary>
            <param name="source">The name of the source, typically the name of the application.</param>
            <param name="format">A format string that contains zero or more format items that correspond to objects in the 
            args array.</param>
            <param name="collection">A trace collection object.</param>
            <param name="args">An array containing zero or more objects to format.</param>
        </member>
        <member name="M:Aristocrat.Diagnostics.SourceTrace.TraceCritical(System.String,System.Int32,System.String,System.Object[])">
            <summary>
            Writes a critical message to the trace listeners in the <see cref="P:System.Diagnostics.TraceSource.Listeners"/> collection using the 
            specified object array and formatting information.
            </summary>
            <param name="source">The name of the source, typically the name of the application.</param>
            <param name="id">A numeric identifier for the message.</param>
            <param name="format">A format string that contains zero or more format items that correspond to objects in the 
            args array.</param>
            <param name="args">An array containing zero or more objects to format.</param>
        </member>
        <member name="M:Aristocrat.Diagnostics.SourceTrace.TraceError(System.String,System.String)">
            <summary>
            Writes an error message to the trace listeners in the <see cref="P:System.Diagnostics.TraceSource.Listeners"/> collection using the 
            specified message.
            </summary>
            <param name="source">The name of the source, typically the name of the application.</param>
            <param name="message">The error message to write.</param>
        </member>
        <member name="M:Aristocrat.Diagnostics.SourceTrace.TraceError(System.String,System.Int32,System.String)">
            <summary>
            Writes an error message to the trace listeners in the <see cref="P:System.Diagnostics.TraceSource.Listeners"/> collection using the 
            specified message.
            </summary>
            <param name="source">The name of the source, typically the name of the application.</param>
            <param name="id">A numeric identifier for the message.</param>
            <param name="message">The error message to write.</param>
        </member>
        <member name="M:Aristocrat.Diagnostics.SourceTrace.TraceError(System.String,System.String,Aristocrat.Diagnostics.TraceCollection)">
            <summary>
            Writes an error message to the trace listeners in the <see cref="P:System.Diagnostics.TraceSource.Listeners"/> collection using the 
            specified message and trace collection.
            </summary>
            <param name="source">The name of the source, typically the name of the application.</param>
            <param name="message">The error message to write.</param>
            <param name="collection">A trace collection object.</param>
        </member>
        <member name="M:Aristocrat.Diagnostics.SourceTrace.TraceError(System.String,System.Int32,System.String,Aristocrat.Diagnostics.TraceCollection)">
            <summary>
            Writes an error message to the trace listeners in the <see cref="P:System.Diagnostics.TraceSource.Listeners"/> collection using the 
            specified message and trace collection.
            </summary>
            <param name="source">The name of the source, typically the name of the application.</param>
            <param name="id">A numeric identifier for the message.</param>
            <param name="message">The error message to write.</param>
            <param name="collection">A trace collection object.</param>
        </member>
        <member name="M:Aristocrat.Diagnostics.SourceTrace.TraceError(System.String,System.String,System.Object[])">
            <summary>
            Writes an error message to the trace listeners in the <see cref="P:System.Diagnostics.TraceSource.Listeners"/> collection using the 
            specified object array and formatting information.
            </summary>
            <param name="source">The name of the source, typically the name of the application.</param>
            <param name="format">A format string that contains zero or more format items that correspond to objects in the 
            args array.</param>
            <param name="args">An array containing zero or more objects to format.</param>
        </member>
        <member name="M:Aristocrat.Diagnostics.SourceTrace.TraceError(System.String,System.Int32,System.String,System.Object[])">
            <summary>
            Writes an error message to the trace listeners in the <see cref="P:System.Diagnostics.TraceSource.Listeners"/> collection using the 
            specified object array and formatting information.
            </summary>
            <param name="source">The name of the source, typically the name of the application.</param>
            <param name="id">A numeric identifier for the message.</param>
            <param name="format">A format string that contains zero or more format items that correspond to objects in the 
            args array.</param>
            <param name="args">An array containing zero or more objects to format.</param>
        </member>
        <member name="M:Aristocrat.Diagnostics.SourceTrace.TraceError(System.String,System.String,Aristocrat.Diagnostics.TraceCollection,System.Object[])">
            <summary>
            Writes an error message to the trace listeners in the <see cref="P:System.Diagnostics.TraceSource.Listeners"/> collection using the 
            specified object array, formatting information, and trace collection.
            </summary>
            <param name="source">The name of the source, typically the name of the application.</param>
            <param name="format">A format string that contains zero or more format items that correspond to objects in the 
            args array.</param>
            <param name="collection">A trace collection object.</param>
            <param name="args">An array containing zero or more objects to format.</param>
        </member>
        <member name="M:Aristocrat.Diagnostics.SourceTrace.TraceError(System.String,System.Int32,System.String,Aristocrat.Diagnostics.TraceCollection,System.Object[])">
            <summary>
            Writes an error message to the trace listeners in the <see cref="P:System.Diagnostics.TraceSource.Listeners"/> collection using the 
            specified object array, formatting information, and trace collection.
            </summary>
            <param name="source">The name of the source, typically the name of the application.</param>
            <param name="id">A numeric identifier for the message.</param>
            <param name="format">A format string that contains zero or more format items that correspond to objects in the 
            args array.</param>
            <param name="collection">A trace collection object.</param>
            <param name="args">An array containing zero or more objects to format.</param>
        </member>
        <member name="M:Aristocrat.Diagnostics.SourceTrace.TraceEvent(System.String,System.Diagnostics.TraceEventType,System.Int32)">
            <summary>
            Writes a trace event message to the trace listeners in the <see cref="P:System.Diagnostics.TraceSource.Listeners"/> collection using 
            the specified event type, and event identifier.
            </summary>
            <param name="source">The name of the source, typically the name of the application.</param>
            <param name="eventType">  One of the <see cref="T:System.Diagnostics.TraceEventType"/> values that specifies the event type of the 
            trace data.</param>
            <param name="id">A numeric identifier for the event.</param>
        </member>
        <member name="M:Aristocrat.Diagnostics.SourceTrace.TraceEvent(System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)">
            <summary>
            Writes a trace event message to the trace listeners in the <see cref="P:System.Diagnostics.TraceSource.Listeners"/> collection using 
            the specified event type, event identifier, and message.
            </summary>
            <param name="source">The name of the source, typically the name of the application.</param>
            <param name="eventType">  One of the <see cref="T:System.Diagnostics.TraceEventType"/> values that specifies the event type of the 
            trace data.</param>
            <param name="id">A numeric identifier for the event.</param>
            <param name="message">The trace message to write.</param>
        </member>
        <member name="M:Aristocrat.Diagnostics.SourceTrace.TraceEvent(System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,Aristocrat.Diagnostics.TraceCollection)">
            <summary>
            Writes a trace event message to the trace listeners in the <see cref="P:System.Diagnostics.TraceSource.Listeners"/> collection using 
            the specified event type, event identifier, message, and trace collection.
            </summary>
            <param name="source">The name of the source, typically the name of the application.</param>
            <param name="eventType">  One of the <see cref="T:System.Diagnostics.TraceEventType"/> values that specifies the event type of the 
            trace data.</param>
            <param name="id">A numeric identifier for the event.</param>
            <param name="message">The trace message to write.</param>
            <param name="collection">A trace collection object.</param>
        </member>
        <member name="M:Aristocrat.Diagnostics.SourceTrace.TraceEvent(System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])">
            <summary>
            Writes a trace event to the trace listeners in the in the <see cref="P:System.Diagnostics.TraceSource.Listeners"/> collection using 
            the specified event type, event identifier, and argument array and format.
            </summary>
            <param name="source">The name of the source, typically the name of the application.</param>
            <param name="eventType">  One of the <see cref="T:System.Diagnostics.TraceEventType"/> values that specifies the event type of the 
            trace data.</param>
            <param name="id">A numeric identifier for the event.</param>
            <param name="format">A composite format string that contains text intermixed with zero or more format items, 
            which correspond to objects in the args array.</param>
            <param name="args">An object array containing zero or more objects to format.</param>
        </member>
        <member name="M:Aristocrat.Diagnostics.SourceTrace.TraceEvent(System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,Aristocrat.Diagnostics.TraceCollection,System.Object[])">
            <summary>
            Writes a trace event to the trace listeners in the in the <see cref="P:System.Diagnostics.TraceSource.Listeners"/> collection using 
            the specified event type, event identifier, and argument array, format and trace collection.
            </summary>
            <param name="source">The name of the source, typically the name of the application.</param>
            <param name="eventType">  One of the <see cref="T:System.Diagnostics.TraceEventType"/> values that specifies the event type of the 
            trace data.</param>
            <param name="id">A numeric identifier for the event.</param>
            <param name="format">A composite format string that contains text intermixed with zero or more format items, 
            which correspond to objects in the args array.</param>
            <param name="collection">A trace collection object.</param>
            <param name="args">An object array containing zero or more objects to format.</param>
        </member>
        <member name="M:Aristocrat.Diagnostics.SourceTrace.TraceInformation(System.String,System.String)">
            <summary>
            Writes an informational message to the trace listeners in the <see cref="P:System.Diagnostics.TraceSource.Listeners"/> collection 
            using the specified message.
            </summary>
            <param name="source">The name of the source, typically the name of the application.</param>
            <param name="message">The informative message to write.</param>
        </member>
        <member name="M:Aristocrat.Diagnostics.SourceTrace.TraceInformation(System.String,System.Int32,System.String)">
            <summary>
            Writes an informational message to the trace listeners in the <see cref="P:System.Diagnostics.TraceSource.Listeners"/> collection 
            using the specified message.
            </summary>
            <param name="source">The name of the source, typically the name of the application.</param>
            <param name="id">A numeric identifier for the message.</param>
            <param name="message">The informative message to write.</param>
        </member>
        <member name="M:Aristocrat.Diagnostics.SourceTrace.TraceInformation(System.String,System.String,Aristocrat.Diagnostics.TraceCollection)">
            <summary>
            Writes an informational message to the trace listeners in the <see cref="P:System.Diagnostics.TraceSource.Listeners"/> collection 
            using the specified message and trace collection.
            </summary>
            <param name="source">The name of the source, typically the name of the application.</param>
            <param name="message">The informative message to write.</param>
            <param name="collection">A trace collection object.</param>
        </member>
        <member name="M:Aristocrat.Diagnostics.SourceTrace.TraceInformation(System.String,System.Int32,System.String,Aristocrat.Diagnostics.TraceCollection)">
            <summary>
            Writes an informational message to the trace listeners in the <see cref="P:System.Diagnostics.TraceSource.Listeners"/> collection 
            using the specified message and trace collection.
            </summary>
            <param name="source">The name of the source, typically the name of the application.</param>
            <param name="id">A numeric identifier for the message.</param>
            <param name="message">The informative message to write.</param>
            <param name="collection">A trace collection object.</param>
        </member>
        <member name="M:Aristocrat.Diagnostics.SourceTrace.TraceInformation(System.String,System.String,System.Object[])">
            <summary>
            Writes an informational message to the trace listeners in the <see cref="P:System.Diagnostics.TraceSource.Listeners"/> collection 
            using the specified object array and formatting information.
            </summary>
            <param name="source">The name of the source, typically the name of the application.</param>
            <param name="format">A format string that contains zero or more format items that correspond to objects in the 
            args array.</param>
            <param name="args">An array containing zero or more objects to format.</param>
        </member>
        <member name="M:Aristocrat.Diagnostics.SourceTrace.TraceInformation(System.String,System.Int32,System.String,System.Object[])">
            <summary>
            Writes an informational message to the trace listeners in the <see cref="P:System.Diagnostics.TraceSource.Listeners"/> collection 
            using the specified object array and formatting information.
            </summary>
            <param name="source">The name of the source, typically the name of the application.</param>
            <param name="id">A numeric identifier for the message.</param>
            <param name="format">A format string that contains zero or more format items that correspond to objects in the 
            args array.</param>
            <param name="args">An array containing zero or more objects to format.</param>
        </member>
        <member name="M:Aristocrat.Diagnostics.SourceTrace.TraceInformation(System.String,System.String,Aristocrat.Diagnostics.TraceCollection,System.Object[])">
            <summary>
            Writes an informational message to the trace listeners in the <see cref="P:System.Diagnostics.TraceSource.Listeners"/> collection 
            using the specified object array, formatting information, and trace collection.
            </summary>
            <param name="source">The name of the source, typically the name of the application.</param>
            <param name="format">A format string that contains zero or more format items that correspond to objects in the 
            args array.</param>
            <param name="collection">A trace collection object.</param>
            <param name="args">An array containing zero or more objects to format.</param>
        </member>
        <member name="M:Aristocrat.Diagnostics.SourceTrace.TraceInformation(System.String,System.Int32,System.String,Aristocrat.Diagnostics.TraceCollection,System.Object[])">
            <summary>
            Writes an informational message to the trace listeners in the <see cref="P:System.Diagnostics.TraceSource.Listeners"/> collection 
            using the specified object array, formatting information, and trace collection.
            </summary>
            <param name="source">The name of the source, typically the name of the application.</param>
            <param name="id">A numeric identifier for the message.</param>
            <param name="format">A format string that contains zero or more format items that correspond to objects in the 
            args array.</param>
            <param name="collection">A trace collection object.</param>
            <param name="args">An array containing zero or more objects to format.</param>
        </member>
        <member name="M:Aristocrat.Diagnostics.SourceTrace.TraceVerbose(System.String,System.String)">
            <summary>
            Writes a verbose message to the trace listeners in the <see cref="P:System.Diagnostics.TraceSource.Listeners"/> collection using the 
            specified message.
            </summary>
            <param name="source">The name of the source, typically the name of the application.</param>
            <param name="message">The verbose message to write.</param>
        </member>
        <member name="M:Aristocrat.Diagnostics.SourceTrace.TraceVerbose(System.String,System.Int32,System.String)">
            <summary>
            Writes a verbose message to the trace listeners in the <see cref="P:System.Diagnostics.TraceSource.Listeners"/> collection using the 
            specified message.
            </summary>
            <param name="source">The name of the source, typically the name of the application.</param>
            <param name="id">A numeric identifier for the message.</param>
            <param name="message">The verbose message to write.</param>
        </member>
        <member name="M:Aristocrat.Diagnostics.SourceTrace.TraceVerbose(System.String,System.String,Aristocrat.Diagnostics.TraceCollection)">
            <summary>
            Writes a verbose message to the trace listeners in the <see cref="P:System.Diagnostics.TraceSource.Listeners"/> collection using the 
            specified message and trace collection.
            </summary>
            <param name="source">The name of the source, typically the name of the application.</param>
            <param name="message">The verbose message to write.</param>
            <param name="collection">A trace collection object.</param>
        </member>
        <member name="M:Aristocrat.Diagnostics.SourceTrace.TraceVerbose(System.String,System.Int32,System.String,Aristocrat.Diagnostics.TraceCollection)">
            <summary>
            Writes a verbose message to the trace listeners in the <see cref="P:System.Diagnostics.TraceSource.Listeners"/> collection using the 
            specified message and trace collection.
            </summary>
            <param name="source">The name of the source, typically the name of the application.</param>
            <param name="id">A numeric identifier for the message.</param>
            <param name="message">The verbose message to write.</param>
            <param name="collection">A trace collection object.</param>
        </member>
        <member name="M:Aristocrat.Diagnostics.SourceTrace.TraceVerbose(System.String,System.String,System.Object[])">
            <summary>
            Writes a verbose message to the trace listeners in the <see cref="P:System.Diagnostics.TraceSource.Listeners"/> collection using the 
            specified object array and formatting information.
            </summary>
            <param name="source">The name of the source, typically the name of the application.</param>
            <param name="format">A format string that contains zero or more format items that correspond to objects in the 
            args array.</param>
            <param name="args">An array containing zero or more objects to format.</param>
        </member>
        <member name="M:Aristocrat.Diagnostics.SourceTrace.TraceVerbose(System.String,System.Int32,System.String,System.Object[])">
            <summary>
            Writes a verbose message to the trace listeners in the <see cref="P:System.Diagnostics.TraceSource.Listeners"/> collection using the 
            specified object array and formatting information.
            </summary>
            <param name="source">The name of the source, typically the name of the application.</param>
            <param name="id">A numeric identifier for the message.</param>
            <param name="format">A format string that contains zero or more format items that correspond to objects in the 
            args array.</param>
            <param name="args">An array containing zero or more objects to format.</param>
        </member>
        <member name="M:Aristocrat.Diagnostics.SourceTrace.TraceVerbose(System.String,System.String,Aristocrat.Diagnostics.TraceCollection,System.Object[])">
            <summary>
            Writes a verbose message to the trace listeners in the <see cref="P:System.Diagnostics.TraceSource.Listeners"/> collection using the 
            specified object array, formatting information, and trace collection.
            </summary>
            <param name="source">The name of the source, typically the name of the application.</param>
            <param name="format">A format string that contains zero or more format items that correspond to objects in the 
            args array.</param>
            <param name="collection">A trace collection object.</param>
            <param name="args">An array containing zero or more objects to format.</param>
        </member>
        <member name="M:Aristocrat.Diagnostics.SourceTrace.TraceVerbose(System.String,System.Int32,System.String,Aristocrat.Diagnostics.TraceCollection,System.Object[])">
            <summary>
            Writes a verbose message to the trace listeners in the <see cref="P:System.Diagnostics.TraceSource.Listeners"/> collection using the 
            specified object array, formatting information, and trace collection.
            </summary>
            <param name="source">The name of the source, typically the name of the application.</param>
            <param name="id">A numeric identifier for the message.</param>
            <param name="format">A format string that contains zero or more format items that correspond to objects in the 
            args array.</param>
            <param name="collection">A trace collection object.</param>
            <param name="args">An array containing zero or more objects to format.</param>
        </member>
        <member name="M:Aristocrat.Diagnostics.SourceTrace.TraceWarning(System.String,System.String)">
            <summary>
            Writes a warning message to the trace listeners in the <see cref="P:System.Diagnostics.TraceSource.Listeners"/> collection using the 
            specified message.
            </summary>
            <param name="source">The name of the source, typically the name of the application.</param>
            <param name="message">The warning message to write.</param>
        </member>
        <member name="M:Aristocrat.Diagnostics.SourceTrace.TraceWarning(System.String,System.Int32,System.String)">
            <summary>
            Writes a warning message to the trace listeners in the <see cref="P:System.Diagnostics.TraceSource.Listeners"/> collection using the 
            specified message.
            </summary>
            <param name="source">The name of the source, typically the name of the application.</param>
            <param name="id">A numeric identifier for the message.</param>
            <param name="message">The warning message to write.</param>
        </member>
        <member name="M:Aristocrat.Diagnostics.SourceTrace.TraceWarning(System.String,System.String,Aristocrat.Diagnostics.TraceCollection)">
            <summary>
            Writes a warning message to the trace listeners in the <see cref="P:System.Diagnostics.TraceSource.Listeners"/> collection using the 
            specified message and trace collection.
            </summary>
            <param name="source">The name of the source, typically the name of the application.</param>
            <param name="message">The warning message to write.</param>
            <param name="collection">A trace collection object.</param>
        </member>
        <member name="M:Aristocrat.Diagnostics.SourceTrace.TraceWarning(System.String,System.Int32,System.String,Aristocrat.Diagnostics.TraceCollection)">
            <summary>
            Writes a warning message to the trace listeners in the <see cref="P:System.Diagnostics.TraceSource.Listeners"/> collection using the 
            specified message and trace collection.
            </summary>
            <param name="source">The name of the source, typically the name of the application.</param>
            <param name="id">A numeric identifier for the message.</param>
            <param name="message">The warning message to write.</param>
            <param name="collection">A trace collection object.</param>
        </member>
        <member name="M:Aristocrat.Diagnostics.SourceTrace.TraceWarning(System.String,System.String,System.Object[])">
            <summary>
            Writes a warning message to the trace listeners in the <see cref="P:System.Diagnostics.TraceSource.Listeners"/> collection using the 
            specified message.
            </summary>
            <param name="source">The name of the source, typically the name of the application.</param>
            <param name="format">A format string that contains zero or more format items that correspond to objects in the 
            args array.</param>
            <param name="args">An array containing zero or more objects to format.</param>
        </member>
        <member name="M:Aristocrat.Diagnostics.SourceTrace.TraceWarning(System.String,System.Int32,System.String,System.Object[])">
            <summary>
            Writes a warning message to the trace listeners in the <see cref="P:System.Diagnostics.TraceSource.Listeners"/> collection using the 
            specified message.
            </summary>
            <param name="source">The name of the source, typically the name of the application.</param>
            <param name="id">A numeric identifier for the message.</param>
            <param name="format">A format string that contains zero or more format items that correspond to objects in the 
            args array.</param>
            <param name="args">An array containing zero or more objects to format.</param>
        </member>
        <member name="M:Aristocrat.Diagnostics.SourceTrace.TraceWarning(System.String,System.String,Aristocrat.Diagnostics.TraceCollection,System.Object[])">
            <summary>
            Writes a warning message to the trace listeners in the <see cref="P:System.Diagnostics.TraceSource.Listeners"/> collection using the 
            specified object array, formatting information, and trace collection.
            </summary>
            <param name="source">The name of the source, typically the name of the application.</param>
            <param name="format">A format string that contains zero or more format items that correspond to objects in the 
            args array.</param>
            <param name="collection">A trace collection object.</param>
            <param name="args">An array containing zero or more objects to format.</param>
        </member>
        <member name="M:Aristocrat.Diagnostics.SourceTrace.TraceWarning(System.String,System.Int32,System.String,Aristocrat.Diagnostics.TraceCollection,System.Object[])">
            <summary>
            Writes a warning message to the trace listeners in the <see cref="P:System.Diagnostics.TraceSource.Listeners"/> collection using the 
            specified object array, formatting information, and trace collection.
            </summary>
            <param name="source">The name of the source, typically the name of the application.</param>
            <param name="id">A numeric identifier for the message.</param>
            <param name="format">A format string that contains zero or more format items that correspond to objects in the 
            args array.</param>
            <param name="collection">A trace collection object.</param>
            <param name="args">An array containing zero or more objects to format.</param>
        </member>
        <member name="M:Aristocrat.Diagnostics.SourceTrace.TraceCritical(System.String,System.Object)">
            <summary>
            Writes a critical data to the trace listeners in the <see cref="P:System.Diagnostics.TraceSource.Listeners"/> collection.
            </summary>
            <param name="source">The name of the source, typically the name of the application.</param>
            <param name="data">The trace data.</param>
        </member>
        <member name="M:Aristocrat.Diagnostics.SourceTrace.TraceCritical(System.String,System.Int32,System.Object)">
            <summary>
            Writes a critical data to the trace listeners in the <see cref="P:System.Diagnostics.TraceSource.Listeners"/> collection.
            </summary>
            <param name="source">The name of the source, typically the name of the application.</param>
            <param name="id">A numeric identifier for the message.</param>
            <param name="data">The trace data.</param>
        </member>
        <member name="M:Aristocrat.Diagnostics.SourceTrace.TraceError(System.String,System.Object)">
            <summary>
            Writes an error object to the trace listeners in the <see cref="P:System.Diagnostics.TraceSource.Listeners"/> collection.
            </summary>
            <param name="source">The name of the source, typically the name of the application.</param>
            <param name="data">The trace data.</param>
        </member>
        <member name="M:Aristocrat.Diagnostics.SourceTrace.TraceError(System.String,System.Int32,System.Object)">
            <summary>
            Writes an error object to the trace listeners in the <see cref="P:System.Diagnostics.TraceSource.Listeners"/> collection.
            </summary>
            <param name="source">The name of the source, typically the name of the application.</param>
            <param name="id">A numeric identifier for the message.</param>
            <param name="data">The trace data.</param>
        </member>
        <member name="M:Aristocrat.Diagnostics.SourceTrace.TraceEvent(System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)">
            <summary>
            Writes a trace event message to the trace listeners in the <see cref="P:System.Diagnostics.TraceSource.Listeners"/> collection using 
            the specified event type, and event identifier.
            </summary>
            <param name="source">The name of the source, typically the name of the application.</param>
            <param name="eventType">  One of the <see cref="T:System.Diagnostics.TraceEventType"/> values that specifies the event type of the 
            trace data.</param>
            <param name="id">A numeric identifier for the event.</param>
            <param name="data">The trace data.</param>
        </member>
        <member name="M:Aristocrat.Diagnostics.SourceTrace.TraceInformation(System.String,System.Object)">
            <summary>
            Writes an informational message to the trace listeners in the <see cref="P:System.Diagnostics.TraceSource.Listeners"/> collection.
            </summary>
            <param name="source">The name of the source, typically the name of the application.</param>
            <param name="data">The trace data.</param>
        </member>
        <member name="M:Aristocrat.Diagnostics.SourceTrace.TraceInformation(System.String,System.Int32,System.Object)">
            <summary>
            Writes an informational message to the trace listeners in the <see cref="P:System.Diagnostics.TraceSource.Listeners"/> collection.
            </summary>
            <param name="source">The name of the source, typically the name of the application.</param>
            <param name="id">A numeric identifier for the message.</param>
            <param name="data">The trace data.</param>
        </member>
        <member name="M:Aristocrat.Diagnostics.SourceTrace.TraceVerbose(System.String,System.Object)">
            <summary>
            Writes a verbose message to the trace listeners in the <see cref="P:System.Diagnostics.TraceSource.Listeners"/> collection. 
            </summary>
            <param name="source">The name of the source, typically the name of the application.</param>
            <param name="data">The trace data.</param>
        </member>
        <member name="M:Aristocrat.Diagnostics.SourceTrace.TraceVerbose(System.String,System.Int32,System.Object)">
            <summary>
            Writes a verbose message to the trace listeners in the <see cref="P:System.Diagnostics.TraceSource.Listeners"/> collection. 
            </summary>
            <param name="source">The name of the source, typically the name of the application.</param>
            <param name="id">A numeric identifier for the message.</param>
            <param name="data">The trace data.</param>
        </member>
        <member name="M:Aristocrat.Diagnostics.SourceTrace.TraceWarning(System.String,System.Object)">
            <summary>
            Writes a warning message to the trace listeners in the <see cref="P:System.Diagnostics.TraceSource.Listeners"/> collection.
            </summary>
            <param name="source">The name of the source, typically the name of the application.</param>
            <param name="data">The trace data.</param>
        </member>
        <member name="M:Aristocrat.Diagnostics.SourceTrace.TraceWarning(System.String,System.Int32,System.Object)">
            <summary>
            Writes a warning message to the trace listeners in the <see cref="P:System.Diagnostics.TraceSource.Listeners"/> collection. 
            </summary>
            <param name="source">The name of the source, typically the name of the application.</param>
            <param name="id">A numeric identifier for the message.</param>
            <param name="data">The trace data.</param>
        </member>
        <member name="P:Aristocrat.Diagnostics.SourceTrace.DefaultSourceLevel">
            <summary>
            Gets or sets a bitwise combination of the <see cref="T:System.Diagnostics.SourceLevels"/> values that specifies the default source 
            level at which to trace.
            </summary>
        </member>
        <member name="P:Aristocrat.Diagnostics.SourceTrace.Sources">
            <summary>
            Gets the collection of trace sources currently configured.
            </summary>
        </member>
        <member name="T:Aristocrat.Diagnostics.FileStreamWriter">
            <summary>
            Represents a file stream writer that keeps a tally of the length of the file.
            </summary>
        </member>
        <member name="M:Aristocrat.Diagnostics.FileStreamWriter.#ctor(System.IO.FileStream)">
            <summary>
            Initialize a new instance of the <see cref="T:Aristocrat.Diagnostics.FileStreamWriter"/> class with a <see cref="T:System.IO.FileStream"/>.
            </summary>
            <param name="stream">The <see cref="T:System.IO.FileStream"/> to write to.</param>
        </member>
        <member name="M:Aristocrat.Diagnostics.FileStreamWriter.#ctor(System.IO.FileStream,System.Text.Encoding)">
            <summary>
            Initialize a new instance of the <see cref="T:Aristocrat.Diagnostics.FileStreamWriter"/> class with a <see cref="T:System.IO.FileStream"/> and 
            <see cref="T:System.Text.Encoding"/>.
            </summary>
            <param name="stream">The <see cref="T:System.IO.FileStream"/> to write to.</param>
            <param name="encoding">The <see cref="T:System.Text.Encoding"/> to use.</param>
        </member>
        <member name="M:Aristocrat.Diagnostics.FileStreamWriter.Write(System.Char)">
            <summary>
            Writes a character to the stream.
            </summary>
            <param name="value">The character to write to the text stream.</param>
        </member>
        <member name="M:Aristocrat.Diagnostics.FileStreamWriter.Write(System.Char[])">
            <summary>
            Writes a character array to the stream.
            </summary>
            <param name="buffer">A character array containing the data to write. If buffer is null, nothing is written.
            </param>
        </member>
        <member name="M:Aristocrat.Diagnostics.FileStreamWriter.Write(System.Char[],System.Int32,System.Int32)">
            <summary>
            Writes a subarray of characters to the stream.
            </summary>
            <param name="buffer">A character array containing the data to write.</param>
            <param name="count">The number of characters to read from buffer.</param>
            <param name="index">The index into buffer at which to begin writing.</param>
        </member>
        <member name="M:Aristocrat.Diagnostics.FileStreamWriter.Write(System.String)">
            <summary>
            Writes a string to the stream.
            </summary>
            <param name="value">The string to write to the stream. If value is <b>null</b>, nothing is written.</param>
        </member>
        <member name="P:Aristocrat.Diagnostics.FileStreamWriter.Length">
            <summary>
            Gets the tally of the length of the string.
            </summary>
        </member>
        <member name="T:Aristocrat.Diagnostics.TraceData">
            <summary>
            TraceData class for additional parameters
            </summary>
        </member>
        <member name="M:Aristocrat.Diagnostics.TraceData.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the TraceData class.
            </summary>
            <param name="userName">Name of the user.</param>
            <param name="message"> The message.</param>
        </member>
        <member name="M:Aristocrat.Diagnostics.TraceData.#ctor(System.String,System.String,System.Object[])">
            <summary>
            Initializes a new instance of the TraceData class.
            </summary>
            <param name="userName">Name of the user.</param>
            <param name="format">  Describes the format to use.</param>
            <param name="args">      A variable-length parameters list containing arguments.</param>
        </member>
        <member name="M:Aristocrat.Diagnostics.TraceData.#ctor(System.Guid,System.String,System.String)">
            <summary>
            Initializes a new instance of the TraceData class.
            </summary>
            <param name="relatedActivityId">Identifier for the related activity.</param>
            <param name="userName">                         Name of the user.</param>
            <param name="message">                          The message.</param>
        </member>
        <member name="M:Aristocrat.Diagnostics.TraceData.#ctor(System.Guid,System.String,System.String,System.Object[])">
            <summary>
            Initializes a new instance of the TraceData class.
            </summary>
            <param name="relatedActivityId">Identifier for the related activity.</param>
            <param name="userName">                         Name of the user.</param>
            <param name="format">                   Describes the format to use.</param>
            <param name="args">                             A variable-length parameters list containing arguments.</param>
        </member>
        <member name="M:Aristocrat.Diagnostics.TraceData.ToString">
            <inheritdoc />
        </member>
        <member name="P:Aristocrat.Diagnostics.TraceData.RelatedActivityId">
            <summary>
            Gets or sets the identifier of the related activity.
            </summary>
            <value>
            The identifier of the related activity.
            </value>
        </member>
        <member name="P:Aristocrat.Diagnostics.TraceData.UserName">
            <summary>
            Gets or sets the name of the user.
            </summary>
            <value>
            The name of the user.
            </value>
        </member>
        <member name="P:Aristocrat.Diagnostics.TraceData.Message">
            <summary>
            Gets the message.
            </summary>
            <value>
            The message.
            </value>
        </member>
        <member name="T:Aristocrat.Diagnostics.TraceCollection">
            <summary>
            A helper object for tracing additional information
            </summary>
        </member>
        <member name="M:Aristocrat.Diagnostics.TraceCollection.Add(System.String,System.Object)">
            <summary>
            Adds the specified key value pair.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Aristocrat.Diagnostics.TraceCollection.Add(System.String,System.Object,System.String)">
            <summary>
            Adds the specified key value pair with the specified format for value.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="format">The format to use for value.</param>
        </member>
        <member name="M:Aristocrat.Diagnostics.TraceCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerator{T}" /> that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Aristocrat.Diagnostics.TraceCollection.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:Aristocrat.Diagnostics.TraceCollection.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance appended to <paramref name="message"/>.
            </summary>
            <param name="message">The message.</param>
            <returns>A <see cref="T:System.String" /> that represents this instance. </returns>
        </member>
        <member name="T:Aristocrat.Diagnostics.TraceLogger">
            <summary>
            Class that writes trace messages to a log. 
            </summary>
        </member>
        <member name="M:Aristocrat.Diagnostics.TraceLogger.Write(System.String)">
            <summary>
            Writes a message to the trace log. 
            </summary>
            <param name="message">The message that is being written to the trace log.</param>
        </member>
        <member name="T:Aristocrat.Diagnostics.TraceLoggerSettings">
            <summary>
            Settings for the trace log. 
            </summary>
        </member>
        <member name="P:Aristocrat.Diagnostics.TraceLoggerSettings.TraceFileName">
            <summary>
            This setting controls the path to the trace files.
            </summary>
        </member>
        <member name="P:Aristocrat.Diagnostics.TraceLoggerSettings.TraceFileLength">
            <summary>
            The max length of a trace file.
            </summary>
        </member>
        <member name="P:Aristocrat.Diagnostics.TraceLoggerSettings.Directory">
            <summary>
            This is the appSetting for Directory.
            </summary>
        </member>
        <member name="T:Aristocrat.Diagnostics.ErrorCallback">
            <summary>
            A callback handler to handle an error notification.
            </summary>
            <param name="caller">The caller that detected the error.</param>
            <param name="errorText">A text message describing the error.</param>
        </member>
        <member name="T:Aristocrat.Diagnostics.IErrorNotify">
            <summary>
            An error handling notification interface.
            </summary>
        </member>
        <member name="P:Aristocrat.Diagnostics.IErrorNotify.RequiresRestart">
            <summary>
            Gets or sets the callback method that should be called when a restart is required.
            </summary>
        </member>
        <member name="T:Aristocrat.EventArgs`1">
            <summary>
            Event args to provide information about the item that was affected.
            </summary>
            <typeparam name="T">The type of the information item.</typeparam>
        </member>
        <member name="M:Aristocrat.EventArgs`1.#ctor(`0)">
            <summary>
            Constructor that assigned the passed in values to the properties of the class.
            </summary>
            <param name="item">Meaningful data to sender of the event.</param>
        </member>
        <member name="P:Aristocrat.EventArgs`1.Item">
            <summary>
            Gets the item that is affected.
            </summary>
        </member>
        <member name="T:Aristocrat.EventArgs`2">
            <summary>
            Event args to provide information about the item that was affected.
            </summary>
            <typeparam name="T">The type of the information item.</typeparam>
            <typeparam name="TResult">The return type of the result.</typeparam>
        </member>
        <member name="M:Aristocrat.EventArgs`2.#ctor(`0,`1)">
            <summary>
            Constructor that assigned the passed in values to the properties of the class.
            </summary>
            <param name="item">Meaningful data to sender of the event.</param>
            <param name="result">The result of the event.</param>
        </member>
        <member name="P:Aristocrat.EventArgs`2.Result">
            <summary>
            Gets or sets the result information.
            </summary>
        </member>
        <member name="T:Aristocrat.IO.SerializationHelpers">
            <summary>
            Serialization helper methods
            </summary>
        </member>
        <member name="M:Aristocrat.IO.SerializationHelpers.CompressGZip(System.Byte[])">
            <summary>
            Compresses the buffer using GZip compression.
            </summary>
            <param name="buffer">The buffer to compress.</param>
            <returns>The buffer compressed.</returns>
        </member>
        <member name="M:Aristocrat.IO.SerializationHelpers.DecompressGZip(System.Byte[])">
            <summary>
            Decompresses the buffer using GZip compression.
            </summary>
            <param name="buffer">The buffer to decompress.</param>
            <returns>The buffer decompressed.</returns>
        </member>
        <member name="M:Aristocrat.IO.SerializationHelpers.DeserializeXml``1(System.String)">
            <summary>
            Deserializes the XML string to an object.
            </summary>
            <typeparam name="T">>The type of the object to deserialize.</typeparam>
            <param name="value">The <see cref="T:System.String"/> that contains the XML to deserialize.</param>
            <returns>The deserialized object.</returns>
        </member>
        <member name="M:Aristocrat.IO.SerializationHelpers.DeserializeXml(System.String,System.Type)">
            <summary>
            Deserializes the XML string to an object.
            </summary>
            <param name="value">The <see cref="T:System.String"/> that contains the XML to deserialize.</param>
            <param name="type">The <see cref="T:Type"/> of the object to deserialize.</param>
            <returns>The <see cref="T:System.Object"/> being deserialized.</returns>
        </member>
        <member name="M:Aristocrat.IO.SerializationHelpers.SerializeXml``1(``0)">
            <summary>
            Serializes the specified object to XML.
            </summary>
            <typeparam name="T">>The type of the object to serialize.</typeparam>
            <param name="value">The object to serialize.</param>
            <returns></returns>
        </member>
        <member name="M:Aristocrat.IO.SerializationHelpers.SerializeXml(System.Object)">
            <summary>
            Serializes the specified object to XML.
            </summary>
            <param name="value">The object to serialize.</param>
            <returns>The <see cref="T:System.Object"/> being deserialized.</returns>
        </member>
        <member name="M:Aristocrat.IO.SerializationHelpers.SerializeXml(System.Object,System.Type)">
            <summary>
            Serializes the specified object to XML.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="type">The <see cref="T:Type"/> of the object to serialize.</param>
            <returns>The <see cref="T:System.Object"/> being deserialized.</returns>
        </member>
        <member name="T:Aristocrat.IO.DiskStream">
            <summary>
            Exposes a <see cref="T:Stream"/> around a file, supporting synchronous read operations.
            </summary>
            <remarks>This class reads a file from the physical disk drive.</remarks>
        </member>
        <member name="M:Aristocrat.IO.DiskStream.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Aristocrat.IO.DiskStream"/> class with the specified path.
            </summary>
            <param name="path">A relative or absolute path for the file that the current <see cref="T:Aristocrat.IO.DiskStream"/> object 
            will encapsulate.</param>
        </member>
        <member name="M:Aristocrat.IO.DiskStream.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Aristocrat.IO.DiskStream"/> class with the specified path and buffer.
            </summary>
            <param name="path">A relative or absolute path for the file that the current 
            <see cref="T:Aristocrat.IO.DiskStream"/> object will encapsulate.</param>
            <param name="bufferSize">A positive <see cref="T:Int32"/> value greater than 0 indicating the buffer size.</param>
        </member>
        <member name="M:Aristocrat.IO.DiskStream.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
            <exception cref="T:NotSupportedException">The stream does not support writing.</exception>
        </member>
        <member name="M:Aristocrat.IO.DiskStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a block of bytes from the stream and writes the data in a given buffer.
            </summary>
            <param name="buffer">When this method returns, contains the specified byte array with the values between offset 
            and (offset + count - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The byte offset in array at which to begin reading.</param>
            <param name="count">The maximum number of bytes to read.</param>
            <returns>The total number of bytes read into the buffer. This might be less than the number of bytes requested 
            if that number of bytes are not currently available, or zero if the end of the stream is reached.</returns>
            <exception cref="T:System.ArgumentException">offset and count describe an invalid range in array.</exception>
            <exception cref="T:System.ArgumentNullException">buffer is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">offset or count is negative.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
        </member>
        <member name="M:Aristocrat.IO.DiskStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the current position of this stream to the given value.
            </summary>
            <param name="offset">The point relative to origin from which to begin seeking.</param>
            <param name="origin">Specifies the beginning, the end, or the current position as a reference point for origin, 
            using a value of type <see cref="T:SeekOrigin"/>.</param>
            <returns>The new position in the stream.</returns>
            <exception cref="T:NotSupportedException">The stream does not support seeking.</exception>
        </member>
        <member name="M:Aristocrat.IO.DiskStream.SetLength(System.Int64)">
            <summary>
            Sets the length of this stream to the given value.
            </summary>
            <param name="value">The new length of the stream.</param>
            <exception cref="T:NotSupportedException">The stream does not support writing.</exception>
        </member>
        <member name="M:Aristocrat.IO.DiskStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a block of bytes to this stream using data from a buffer.
            </summary>
            <param name="buffer">The buffer containing data to write to the stream.</param>
            <param name="offset">The zero-based byte offset in array at which to begin copying bytes to the current stream.
            </param>
            <param name="count">The maximum number of bytes to be written to the current stream.</param>
            <exception cref="T:NotSupportedException">The stream does not support writing.</exception>
        </member>
        <member name="M:Aristocrat.IO.DiskStream.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:System.IO.FileStream"/> and optionally releases the 
            managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged 
            resources.</param>
        </member>
        <member name="P:Aristocrat.IO.DiskStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading.
            </summary>
            <returns>true if the stream supports reading; false if the stream is closed or was opened with write-only 
            access.</returns>
        </member>
        <member name="P:Aristocrat.IO.DiskStream.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking.
            </summary>
            <returns>true if the stream supports seeking; false if the stream is closed or if the <see cref="T:Stream"/> was 
            constructed from an operating-system handle such as a pipe or output to the console.</returns>
        </member>
        <member name="P:Aristocrat.IO.DiskStream.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing.
            </summary>
            <returns>true if the stream supports writing; false if the stream is closed or was opened with read-only 
            access.</returns>
        </member>
        <member name="P:Aristocrat.IO.DiskStream.Length">
            <summary>
            Gets the length in bytes of the stream.
            </summary>
            <returns>A long value representing the length of the stream in bytes.</returns>
            <exception cref="T:NotSupportedException">The stream does not support seeking.</exception>
        </member>
        <member name="P:Aristocrat.IO.DiskStream.Name">
            <summary>
            Gets the name of the <see cref="T:Aristocrat.IO.DiskStream"/> that was passed to the constructor.
            </summary>
            <returns>A string that is the name of the <see cref="T:Aristocrat.IO.DiskStream"/>.</returns>
        </member>
        <member name="P:Aristocrat.IO.DiskStream.Position">
            <summary>
            Gets or sets the current position of this stream.
            </summary>
            <returns>The current position of this stream.</returns>
            <exception cref="T:NotSupportedException">The stream does not support seeking.</exception>
        </member>
        <member name="T:Aristocrat.IO.IniFile">
            <summary>
            Helper class for reading and writing initialization files.
            </summary>
        </member>
        <member name="M:Aristocrat.IO.IniFile.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Aristocrat.IO.IniFile"/> class with the specified path.
            </summary>
            <param name="path">A relative or absolute path for the file that the current <see cref="T:Aristocrat.IO.IniFile"/> object will 
            encapsulate.</param>
        </member>
        <member name="M:Aristocrat.IO.IniFile.ReadValue(System.String,System.String)">
            <summary>
            Retrieves a value from the specified section in an initialization file.
            </summary>
            <param name="section">The name of the section containing the key name. If this parameter is <b>null</b>, the 
            method copies all section names in the file to the supplied buffer.</param>
            <param name="key">The name of the key whose associated string is to be retrieved. If this parameter is 
            <b>null</b>, all key names in the section specified by the <i>section</i> parameter are copied to the return
            value.</param>
            <returns>The retrieved value if found otherwise an empty string.</returns>
        </member>
        <member name="M:Aristocrat.IO.IniFile.ReadValue(System.String,System.String,System.Boolean)">
            <summary>
            Retrieves a value from the specified section in an initialization file.
            </summary>
            <param name="section">The name of the section containing the key name. If this parameter is <b>null</b>, the 
            method copies all section names in the file to the supplied buffer.</param>
            <param name="key">The name of the key whose associated string is to be retrieved. If this parameter is 
            <b>null</b>, all key names in the section specified by the <i>section</i> parameter are copied to the return
            value.</param>
            <param name="defaultValue">If no value is found, the default value to be returned.</param>
            <returns>The retrieved value.</returns>
        </member>
        <member name="M:Aristocrat.IO.IniFile.ReadValue(System.String,System.String,System.Byte)">
            <summary>
            Retrieves a value from the specified section in an initialization file.
            </summary>
            <param name="section">The name of the section containing the key name. If this parameter is <b>null</b>, the 
            method copies all section names in the file to the supplied buffer.</param>
            <param name="key">The name of the key whose associated string is to be retrieved. If this parameter is 
            <b>null</b>, all key names in the section specified by the <i>section</i> parameter are copied to the return
            value.</param>
            <param name="defaultValue">If no value is found, the default value to be returned.</param>
            <returns>The retrieved value.</returns>
        </member>
        <member name="M:Aristocrat.IO.IniFile.ReadValue(System.String,System.String,System.Char)">
            <summary>
            Retrieves a value from the specified section in an initialization file.
            </summary>
            <param name="section">The name of the section containing the key name. If this parameter is <b>null</b>, the 
            method copies all section names in the file to the supplied buffer.</param>
            <param name="key">The name of the key whose associated string is to be retrieved. If this parameter is 
            <b>null</b>, all key names in the section specified by the <i>section</i> parameter are copied to the return
            value.</param>
            <param name="defaultValue">If no value is found, the default value to be returned.</param>
            <returns>The retrieved value.</returns>
        </member>
        <member name="M:Aristocrat.IO.IniFile.ReadValue(System.String,System.String,System.DateTime)">
            <summary>
            Retrieves a value from the specified section in an initialization file.
            </summary>
            <param name="section">The name of the section containing the key name. If this parameter is <b>null</b>, the 
            method copies all section names in the file to the supplied buffer.</param>
            <param name="key">The name of the key whose associated string is to be retrieved. If this parameter is 
            <b>null</b>, all key names in the section specified by the <i>section</i> parameter are copied to the return
            value.</param>
            <param name="defaultValue">If no value is found, the default value to be returned.</param>
            <returns>The retrieved value.</returns>
        </member>
        <member name="M:Aristocrat.IO.IniFile.ReadValue(System.String,System.String,System.Decimal)">
            <summary>
            Retrieves a value from the specified section in an initialization file.
            </summary>
            <param name="section">The name of the section containing the key name. If this parameter is <b>null</b>, the 
            method copies all section names in the file to the supplied buffer.</param>
            <param name="key">The name of the key whose associated string is to be retrieved. If this parameter is 
            <b>null</b>, all key names in the section specified by the <i>section</i> parameter are copied to the return
            value.</param>
            <param name="defaultValue">If no value is found, the default value to be returned.</param>
            <returns>The retrieved value.</returns>
        </member>
        <member name="M:Aristocrat.IO.IniFile.ReadValue(System.String,System.String,System.Double)">
            <summary>
            Retrieves a value from the specified section in an initialization file.
            </summary>
            <param name="section">The name of the section containing the key name. If this parameter is <b>null</b>, the 
            method copies all section names in the file to the supplied buffer.</param>
            <param name="key">The name of the key whose associated string is to be retrieved. If this parameter is 
            <b>null</b>, all key names in the section specified by the <i>section</i> parameter are copied to the return
            value.</param>
            <param name="defaultValue">If no value is found, the default value to be returned.</param>
            <returns>The retrieved value.</returns>
        </member>
        <member name="M:Aristocrat.IO.IniFile.ReadValue(System.String,System.String,System.Int16)">
            <summary>
            Retrieves a value from the specified section in an initialization file.
            </summary>
            <param name="section">The name of the section containing the key name. If this parameter is <b>null</b>, the 
            method copies all section names in the file to the supplied buffer.</param>
            <param name="key">The name of the key whose associated string is to be retrieved. If this parameter is 
            <b>null</b>, all key names in the section specified by the <i>section</i> parameter are copied to the return
            value.</param>
            <param name="defaultValue">If no value is found, the default value to be returned.</param>
            <returns>The retrieved value.</returns>
        </member>
        <member name="M:Aristocrat.IO.IniFile.ReadValue(System.String,System.String,System.Int32)">
            <summary>
            Retrieves a value from the specified section in an initialization file.
            </summary>
            <param name="section">The name of the section containing the key name. If this parameter is <b>null</b>, the 
            method copies all section names in the file to the supplied buffer.</param>
            <param name="key">The name of the key whose associated string is to be retrieved. If this parameter is 
            <b>null</b>, all key names in the section specified by the <i>section</i> parameter are copied to the return
            value.</param>
            <param name="defaultValue">If no value is found, the default value to be returned.</param>
            <returns>The retrieved value.</returns>
        </member>
        <member name="M:Aristocrat.IO.IniFile.ReadValue(System.String,System.String,System.Int64)">
            <summary>
            Retrieves a value from the specified section in an initialization file.
            </summary>
            <param name="section">The name of the section containing the key name. If this parameter is <b>null</b>, the 
            method copies all section names in the file to the supplied buffer.</param>
            <param name="key">The name of the key whose associated string is to be retrieved. If this parameter is 
            <b>null</b>, all key names in the section specified by the <i>section</i> parameter are copied to the return
            value.</param>
            <param name="defaultValue">If no value is found, the default value to be returned.</param>
            <returns>The retrieved value.</returns>
        </member>
        <member name="M:Aristocrat.IO.IniFile.ReadValue(System.String,System.String,System.Single)">
            <summary>
            Retrieves a value from the specified section in an initialization file.
            </summary>
            <param name="section">The name of the section containing the key name. If this parameter is <b>null</b>, the 
            method copies all section names in the file to the supplied buffer.</param>
            <param name="key">The name of the key whose associated string is to be retrieved. If this parameter is 
            <b>null</b>, all key names in the section specified by the <i>section</i> parameter are copied to the return
            value.</param>
            <param name="defaultValue">If no value is found, the default value to be returned.</param>
            <returns>The retrieved value.</returns>
        </member>
        <member name="M:Aristocrat.IO.IniFile.ReadValue(System.String,System.String,System.String)">
            <summary>
            Retrieves a value from the specified section in an initialization file.
            </summary>
            <param name="section">The name of the section containing the key name. If this parameter is <b>null</b>, the 
            method copies all section names in the file to the supplied buffer.</param>
            <param name="key">The name of the key whose associated string is to be retrieved. If this parameter is 
            <b>null</b>, all key names in the section specified by the <i>section</i> parameter are copied to the return
            value.</param>
            <param name="defaultValue">If no value is found, the default value to be returned.</param>
            <returns>The retrieved value.</returns>
        </member>
        <member name="M:Aristocrat.IO.IniFile.ReadValue(System.String,System.String,System.String,System.String)">
            <summary>
            Retrieves a string from the specified section in an initialization file.
            </summary>
            <param name="section">The name of the section containing the key name. If this parameter is <b>null</b>, the 
            method copies all section names in the file to the supplied buffer.</param>
            <param name="key">The name of the key whose associated string is to be retrieved. If this parameter is 
            <b>null</b>, all key names in the section specified by the <i>section</i> parameter are copied to the return
            value.</param>
            <param name="defaultValue">A default string. If the <i>key</i> cannot be found in the initialization file, 
             the default string is returned. If this parameter is <b>null</b>, the default is an empty string, "".</param>
            <param name="path">The name of the initialization file. If this parameter does not contain a full path to the 
            file, the system searches for the file in the Windows directory.</param>
            <returns>The retrieved string.</returns>
        </member>
        <member name="M:Aristocrat.IO.IniFile.WriteValue(System.String,System.String,System.String)">
            <summary>
            Copies a string into the specified section of an initialization file.
            </summary>
            <param name="section">The name of the section to which the string will be copied. If the section does not exist, 
            it is created. The name of the section is case-independent; the string can be any combination of uppercase and 
            lowercase letters.</param>
            <param name="key">The name of the key to be associated with a string. If the key does not exist in the specified 
            section, it is created. If this parameter is <b>null</b>, the entire section, including all entries within the 
            section, is deleted</param>
            <param name="value">The string to be written to the file. If this parameter is <b>null</b>, the key pointed to 
            by the <i>key</i> parameter is deleted.</param>
            <returns><b>true</b> if successful; otherwise <b>false</b>.</returns>
        </member>
        <member name="M:Aristocrat.IO.IniFile.WriteValue(System.String,System.String,System.String,System.String)">
            <summary>
            Copies a string into the specified section of an initialization file.
            </summary>
            <param name="section">The name of the section to which the string will be copied. If the section does not exist, 
            it is created. The name of the section is case-independent; the string can be any combination of uppercase and 
            lowercase letters.</param>
            <param name="key">The name of the key to be associated with a string. If the key does not exist in the specified 
            section, it is created. If this parameter is <b>null</b>, the entire section, including all entries within the 
            section, is deleted</param>
            <param name="value">The string to be written to the file. If this parameter is <b>null</b>, the key pointed to 
            by the <i>key</i> parameter is deleted.</param>
            <param name="path">The name of the initialization file.</param>
            <returns><b>true</b> if successful; otherwise <b>false</b>.</returns>
        </member>
        <member name="P:Aristocrat.IO.IniFile.Name">
            <summary>
            Gets the name of the file that was passed to the constructor.
            </summary>
        </member>
        <member name="T:Aristocrat.IO.MasterBootRecord">
            <summary>
            Provides access to information on a master boot record.
            </summary>
        </member>
        <member name="M:Aristocrat.IO.MasterBootRecord.Lookup(System.Int32)">
            <summary>
            Gets the <see cref="T:MasterBootRecord"/> for to the specified <paramref name="diskNumber"/>.
            </summary>
            <param name="diskNumber">The disk number of the master boot record you wish to find.</param>
            <returns>The <see cref="T:MasterBootRecord"/> for the <paramref name="diskNumber"/>.</returns>
        </member>
        <member name="M:Aristocrat.IO.MasterBootRecord.Partition(System.Int32)">
            <summary>
            Gets the <see cref="T:PartitionInfo"/> for to the specified <paramref name="serialNumber"/>.
            </summary>
            <param name="serialNumber">The serial number of the partition you wish to find.</param>
            <returns>The <see cref="T:PartitionInfo"/> for the <paramref name="serialNumber"/>.</returns>
            <exception cref="T:System.InvalidOperationException">No partition has satisfies the serialNumber condition.</exception>
        </member>
        <member name="P:Aristocrat.IO.MasterBootRecord.DiskNumber">
            <summary>
            Gets the physical drive number of the <see cref="T:MasterBootRecord"/>.
            </summary>
        </member>
        <member name="T:Aristocrat.IO.PartitionInfo">
            <summary>
            Provides access to information on a partition.
            </summary>
        </member>
        <member name="P:Aristocrat.IO.PartitionInfo.BytesPerCluster">
            <summary>
            Gets the bytes per cluster of a partition.
            </summary>
        </member>
        <member name="P:Aristocrat.IO.PartitionInfo.BytesPerSector">
            <summary>
            Gets the bytes per sector of a partition.
            </summary>
        </member>
        <member name="P:Aristocrat.IO.PartitionInfo.DiskNumber">
            <summary>
            Gets the physical drive number of a partition.
            </summary>
        </member>
        <member name="P:Aristocrat.IO.PartitionInfo.IsBootable">
            <summary>
            Gets a value indicating whether the partition is bootable or not.
            </summary>
        </member>
        <member name="P:Aristocrat.IO.PartitionInfo.LogicalAddress">
            <summary>
            Gets the logical block address of first sector in a partition.
            </summary>
        </member>
        <member name="P:Aristocrat.IO.PartitionInfo.NumberOfTables">
            <summary>
            Gets the number of tables in a partition.
            </summary>
        </member>
        <member name="P:Aristocrat.IO.PartitionInfo.PartitionType">
            <summary>
            Gets partition type that is stored in the master boot record. 
            </summary>
        </member>
        <member name="P:Aristocrat.IO.PartitionInfo.PhysicalDriveNumber">
            <summary>
            Gets the physical drive number.
            </summary>
        </member>
        <member name="P:Aristocrat.IO.PartitionInfo.ReservedSectors">
            <summary>
            Gets the number of sectors that precede the start of the first FAT, including the boot sector.
            </summary>
        </member>
        <member name="P:Aristocrat.IO.PartitionInfo.RootCluster">
            <summary>
            Gets the cluster number of root the directory start.
            </summary>
        </member>
        <member name="P:Aristocrat.IO.PartitionInfo.SectorsPerCluster">
            <summary>
            Gets the sectors per cluster of a partition.
            </summary>
        </member>
        <member name="P:Aristocrat.IO.PartitionInfo.SectorsPerTable">
            <summary>
            Gets the sectors per table of a partition.
            </summary>
        </member>
        <member name="P:Aristocrat.IO.PartitionInfo.TotalClusters">
            <summary>
            Gets the total count of clusters in a partition.
            </summary>
        </member>
        <member name="P:Aristocrat.IO.PartitionInfo.TotalSectors">
            <summary>
            Gets the total count of sectors in a partition.
            </summary>
        </member>
        <member name="P:Aristocrat.IO.PartitionInfo.VolumeLabel">
            <summary>
            Gets the volume label of a partition.
            </summary>
        </member>
        <member name="P:Aristocrat.IO.PartitionInfo.VolumeSerialNumber">
            <summary>
            Gets the serial number of a partition.
            </summary>
        </member>
        <member name="F:Aristocrat.IO.PartitionInfo.Fat16Offsets.BytesPerSector">
            <summary>
            The size of a hardware sector. Valid decimal values for this field are 512, 1024, 2048, and 4096.
            </summary>
            <remarks>Length of 2</remarks>
        </member>
        <member name="F:Aristocrat.IO.PartitionInfo.Fat16Offsets.SectorsPerCluster">
            <summary>
            The number of sectors in a cluster. Because FAT16 can track only a limited number of clusters (up to 
            65,524), FAT16 supports large volumes by increasing the number of sectors per cluster. The default cluster 
            size for a volume depends on the volume size. Valid decimal values for this field are 1, 2, 4, 8, 16, 32, 
            64, and 128.
            </summary>
            <remarks>Length of 1</remarks>
        </member>
        <member name="F:Aristocrat.IO.PartitionInfo.Fat16Offsets.ReservedSectors">
            <summary>
            The number of sectors that precede the start of the first FAT, including the boot sector. The value of this 
            field is typically 1.
            </summary>
            <remarks>Length of 2</remarks>
        </member>
        <member name="F:Aristocrat.IO.PartitionInfo.Fat16Offsets.NumberOfTables">
            <summary>
            The number of copies of the FAT on the volume. The value of this field is typically 2.
            </summary>
            <remarks>Length of 1</remarks>
        </member>
        <member name="F:Aristocrat.IO.PartitionInfo.Fat16Offsets.RootEntries">
            <summary>
            The total number of 32-byte file and folder name entries that can be stored in the root folder of the 
            volume. On a typical hard disk, the value of this field is 512. One entry can be used as a volume label, and 
            files and folders with long names use multiple entries per file. The largest number of file and folder 
            entries is typically 511; however, if long file names are used, entries usually run out before you reach 
            that number.
            </summary>
            <remarks>Length of 2</remarks>
        </member>
        <member name="F:Aristocrat.IO.PartitionInfo.Fat16Offsets.SmallSectors">
            <summary>
            The number of sectors on the volume represented in 16 bits (less than 65,536). For volumes larger than 
            65,536 sectors, this field has a value of zero and the Large Sectors field is used instead.
            </summary>
            <remarks>Length of 2</remarks>
        </member>
        <member name="F:Aristocrat.IO.PartitionInfo.Fat16Offsets.MediaDescriptor">
            <summary>
            Provides information about the media being used. A value of 0xF8 indicates a hard disk and 0xF0 indicates a 
            high-density 3.5-inch floppy disk. Media descriptor entries are a legacy of MS-DOS FAT16 disks and are not 
            used in Windows Server 2003.
            </summary>
            <remarks>Length of 1</remarks>
        </member>
        <member name="F:Aristocrat.IO.PartitionInfo.Fat16Offsets.SectorsPerTable">
            <summary>
            The number of sectors occupied by each FAT on the volume. The computer uses this number and the number of 
            FATs and reserved sectors to determine where the root directory begins. The computer can also determine 
            where the user data area of the volume begins based on the number of entries in the root directory (512).
            </summary>
            <remarks>Length of 2</remarks>
        </member>
        <member name="F:Aristocrat.IO.PartitionInfo.Fat16Offsets.SectorsPerTrack">
            <summary>
            Part of the apparent disk geometry used on a low-level formatted disk.
            </summary>
            <remarks>Length of 2</remarks>
        </member>
        <member name="F:Aristocrat.IO.PartitionInfo.Fat16Offsets.NumberOfHeads">
            <summary>
            Part of the apparent disk geometry used on a low-level formatted disk.
            </summary>
            <remarks>Length of 2</remarks>
        </member>
        <member name="F:Aristocrat.IO.PartitionInfo.Fat16Offsets.HiddenSectors">
            <summary>
            The number of sectors on the volume before the boot sector. This value is used during the boot sequence to 
            calculate the absolute offset to the root directory and data areas.
            </summary>
            <remarks>Length of 4</remarks>
        </member>
        <member name="F:Aristocrat.IO.PartitionInfo.Fat16Offsets.LargeSectors">
            <summary>
            If the value of the Small Sectors field is zero, this field contains the total number of sectors in the 
            FAT16 volume. If the value of the Small Sectors field is not zero, the value of this field is zero.
            </summary>
            <remarks>Length of 4</remarks>
        </member>
        <member name="F:Aristocrat.IO.PartitionInfo.Fat16Offsets.PhysicalDriveNumber">
            <summary>
            Related to the BIOS physical drive number. Floppy drives are identified as 0x00 and physical hard disks are 
            identified as 0x80, regardless of the number of physical disk drives. Typically, this value is set prior to 
            issuing an INT 13h BIOS call to specify the device to access. This value is only relevant if the device is a 
            boot device.
            </summary>
            <remarks>Length of 1</remarks>
        </member>
        <member name="F:Aristocrat.IO.PartitionInfo.Fat16Offsets.ExtendedBootSignature">
            <summary>
            A field that must have the value 0x28 or 0x29 to be recognized by Windows Server 2003.
            </summary>
            <remarks>Length of 1</remarks>
        </member>
        <member name="F:Aristocrat.IO.PartitionInfo.Fat16Offsets.VolumeSerialNumber">
            <summary>
            A random serial number that is created when a volume is formatted and that helps to distinguish between 
            disks.
            </summary>
            <remarks>Length of 4</remarks>
        </member>
        <member name="F:Aristocrat.IO.PartitionInfo.Fat16Offsets.VolumeLabel">
            <summary>
            A field that was once used to store the volume label. The volume label is now stored as a special file in the root directory.
            </summary>
            <remarks>Length of 11</remarks>
        </member>
        <member name="F:Aristocrat.IO.PartitionInfo.Fat32Offsets.BytesPerSector">
            <summary>
            The size of a hardware sector. Valid decimal values for this field are 512, 1024, 2048, and 4096.
            </summary>
            <remarks>Length of 2</remarks>
        </member>
        <member name="F:Aristocrat.IO.PartitionInfo.Fat32Offsets.SectorsPerCluster">
            <summary>
            The number of sectors in a cluster. The default cluster size for a volume depends on the volume size. Valid 
            decimal values for this field are 1, 2, 4, 8, 16, 32, 64, and 128. The Windows Server 2003 implementation of 
            FAT32 allows for creation of volumes up to a maximum of 32 GB. However, larger volumes created by other 
            operating systems (Windows 95 OSR2 and later) are accessible in Windows Server 2003.
            </summary>
            <remarks>Length of 1</remarks>
        </member>
        <member name="F:Aristocrat.IO.PartitionInfo.Fat32Offsets.ReservedSectors">
            <summary>
            The number of sectors that precede the start of the first FAT, including the boot sector.
            </summary>
            <remarks>Length of 2</remarks>
        </member>
        <member name="F:Aristocrat.IO.PartitionInfo.Fat32Offsets.NumberOfTables">
            <summary>
            The number of copies of the FAT on the volume. The value of this field is always 2.
            </summary>
            <remarks>Length of 1</remarks>
        </member>
        <member name="F:Aristocrat.IO.PartitionInfo.Fat32Offsets.RootEntries">
            <summary>
            For FAT32 volumes, this field must be set to zero.
            </summary>
            <remarks>Length of 2</remarks>
        </member>
        <member name="F:Aristocrat.IO.PartitionInfo.Fat32Offsets.SmallSectors">
            <summary>
            For FAT32 volumes, this field must be set to zero.
            </summary>
            <remarks>Length of 2</remarks>
        </member>
        <member name="F:Aristocrat.IO.PartitionInfo.Fat32Offsets.MediaDescriptor">
            <summary>
            Provides information about the media being used. A value of 0xF8 indicates a hard disk and 0xF0 indicates a 
            high-density 3.5-inch floppy disk. Media descriptor entries are a legacy of MS-DOS FAT16 disks and are not 
            used in Windows Server 2003.
            </summary>
            <remarks>Length of 1</remarks>
        </member>
        <member name="F:Aristocrat.IO.PartitionInfo.Fat32Offsets.SectorsPerTrack">
            <summary>
            Contains the "sectors per track" geometry value for disks that use INT 13h. The volume is broken down into 
            tracks by multiple heads and cylinders.
            </summary>
            <remarks>Length of 2</remarks>
        </member>
        <member name="F:Aristocrat.IO.PartitionInfo.Fat32Offsets.NumberOfHeads">
            <summary>
            Contains the "count of heads" geometry value for disks that use INT 13h.
            </summary>
            <remarks>Length of 2</remarks>
        </member>
        <member name="F:Aristocrat.IO.PartitionInfo.Fat32Offsets.HiddenSectors">
            <summary>
            The number of sectors on the volume before the boot sector. This value is used during the boot sequence to 
            calculate the absolute offset to the root directory and data areas. This field is generally only relevant 
            for media that are visible on interrupt 13h. It must always be zero on media that are not partitioned.
            </summary>
            <remarks>Length of 4</remarks>
        </member>
        <member name="F:Aristocrat.IO.PartitionInfo.Fat32Offsets.TotalSectors">
            <summary>
            Contains the total number of sectors in the FAT32 volume.
            </summary>
            <remarks>Length of 4</remarks>
        </member>
        <member name="F:Aristocrat.IO.PartitionInfo.Fat32Offsets.SectorsPerTable">
            <summary>
            The number of sectors occupied by each FAT on the volume. The computer uses this number and the number of 
            FATs and reserved sectors (described in this table) to determine where the root directory begins. The 
            computer can also determine where the user data area of the volume begins based on the number of entries in 
            the root directory.
            </summary>
            <remarks>Length of 4</remarks>
        </member>
        <member name="F:Aristocrat.IO.PartitionInfo.Fat32Offsets.FileSystemVersion">
            <summary>
            The high byte is the major revision number; the low byte is the minor revision number. This field supports 
            the ability to extend the FAT32 media type in the future with concern for old FAT32 drivers mounting the 
            volume. Both bytes are zero in Windows Server 2003, Windows 2000, and Windows Me and earlier.
            </summary>
            <remarks>Length of 2</remarks>
        </member>
        <member name="F:Aristocrat.IO.PartitionInfo.Fat32Offsets.RootClusterNumber">
            <summary>
            The cluster number of the first cluster of the root directory. This value is typically, but not always, 2.
            </summary>
            <remarks>Length of 4</remarks>
        </member>
        <member name="F:Aristocrat.IO.PartitionInfo.Fat32Offsets.FileSystemInformationSectorNumber">
            <summary>
            The sector number of the File System Information (FSINFO) structure in the reserved area of the FAT32 
            volume. The value is typically 1. A copy of the FSINFO structure is kept in the Backup Boot Sector, but it 
            is not kept up-to-date.
            </summary>
            <remarks>Length of 2</remarks>
        </member>
        <member name="F:Aristocrat.IO.PartitionInfo.Fat32Offsets.BackupBootSector">
            <summary>
            A value other than zero specifies the sector number in the reserved area of the volume where a copy of the 
            boot sector is stored. The value of this field is typically 6. No other value is recommended.
            </summary>
            <remarks>Length of 2</remarks>
        </member>
        <member name="F:Aristocrat.IO.PartitionInfo.Fat32Offsets.PhysicalDriveNumber">
            <summary>
            Related to the BIOS physical drive number. Floppy drives are identified as 0x00 and physical hard disks are 
            identified as 0x80, regardless of the number of physical disk drives. Typically, this value is set prior to 
            issuing an INT 13h BIOS call to specify the device to access. This value is only relevant if the device is a 
            boot device.
            </summary>
            <remarks>Length of 1</remarks>
        </member>
        <member name="F:Aristocrat.IO.PartitionInfo.Fat32Offsets.ExtendedBootSignature">
            <summary>
            A field that must have the value 0x28 or 0x29 to be recognized by Windows Server 2003.
            </summary>
            <remarks>Length of 1</remarks>
        </member>
        <member name="F:Aristocrat.IO.PartitionInfo.Fat32Offsets.VolumeSerialNumber">
            <summary>
            A random serial number that is created when a volume is formatted and that helps to distinguish between 
            disks.
            </summary>
            <remarks>Length of 4</remarks>
        </member>
        <member name="F:Aristocrat.IO.PartitionInfo.Fat32Offsets.VolumeLabel">
            <summary>
            A field that was once used to store the volume label. The volume label is now stored as a special file in the root directory.
            </summary>
            <remarks>Length of 11</remarks>
        </member>
        <member name="F:Aristocrat.IO.PartitionInfo.Fat32Offsets.FileSystemType">
            <summary>
            A text field with a value of FAT32.
            </summary>
        </member>
        <member name="T:Aristocrat.IO.PartitionStream">
            <summary>
            Provides a generic view of a sequence of bytes for a partition.
            </summary>
        </member>
        <member name="M:Aristocrat.IO.PartitionStream.#ctor(Aristocrat.IO.PartitionInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:PartitionStream"/> class with the partition.
            </summary>
            <param name="partition">A <see cref="T:PartitionInfo"/> object to encapsulate.</param>
        </member>
        <member name="M:Aristocrat.IO.PartitionStream.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
            <exception cref="T:NotSupportedException">The stream does not support writing.</exception>
        </member>
        <member name="M:Aristocrat.IO.PartitionStream.SeekTo(System.String)">
            <summary>
            When overridden in a derived class, sets the position within the current reader.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Aristocrat.IO.PartitionStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the current position of this stream to the given value.
            </summary>
            <param name="offset">The point relative to origin from which to begin seeking.</param>
            <param name="origin">Specifies the beginning, the end, or the current position as a reference point for origin,
            using a value of type <see cref="T:SeekOrigin"/>.</param>
            <returns>The new position in the stream.</returns>
            <exception cref="T:NotSupportedException">The stream does not support seeking.</exception>
        </member>
        <member name="M:Aristocrat.IO.PartitionStream.SetLength(System.Int64)">
            <summary>
            Sets the length of this stream to the given value.
            </summary>
            <param name="value">The new length of the stream.</param>
            <exception cref="T:NotSupportedException">The stream does not support writing.</exception>
        </member>
        <member name="M:Aristocrat.IO.PartitionStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a block of bytes to this stream using data from a buffer.
            </summary>
            <param name="buffer">The buffer containing data to write to the stream.</param>
            <param name="offset">The zero-based byte offset in array at which to begin copying bytes to the current stream.
            </param>
            <param name="count">The maximum number of bytes to be written to the current stream.</param>
            <exception cref="T:NotSupportedException">The stream does not support writing.</exception>
        </member>
        <member name="P:Aristocrat.IO.PartitionStream.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking.
            </summary>
            <returns>true if the stream supports seeking; false if the stream is closed or if the <see cref="T:Stream"/> was 
            constructed from an operating-system handle such as a pipe or output to the console.</returns>
        </member>
        <member name="P:Aristocrat.IO.PartitionStream.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing.
            </summary>
            <returns>true if the stream supports writing; false if the stream is closed or was opened with read-only 
            access.</returns>
        </member>
        <member name="P:Aristocrat.IO.PartitionStream.Length">
            <summary>
            Gets the length in bytes of the stream.
            </summary>
            <returns>A long value representing the length of the stream in bytes.</returns>
            <exception cref="T:NotSupportedException">The stream does not support seeking.</exception>
        </member>
        <member name="P:Aristocrat.IO.PartitionStream.PartitionInfo">
            <summary>
            Gets the <see cref="T:PartitionInfo"/> that was passed to the constructor.
            </summary>
        </member>
        <member name="P:Aristocrat.IO.PartitionStream.Position">
            <summary>
            Gets or sets the current position of this stream.
            </summary>
            <returns>The current position of this stream.</returns>
            <exception cref="T:NotSupportedException">The stream does not support seeking.</exception>
        </member>
        <member name="T:Aristocrat.IO.VolumeDiskExtent">
            <summary>
            Represents a volume disk extent.
            </summary>
        </member>
        <member name="M:Aristocrat.IO.VolumeDiskExtent.op_Equality(Aristocrat.IO.VolumeDiskExtent,Aristocrat.IO.VolumeDiskExtent)">
            <summary>
            Tests whether two <see cref="T:Aristocrat.IO.VolumeDiskExtent"/>s are equal.
            </summary>
            <param name="left">The object to the left of the equality operator.</param>
            <param name="right">The object to the right of the equality operator.</param>
            <returns><b>true</b> if the objects are equal; otherwise <b>false</b>.</returns>
        </member>
        <member name="M:Aristocrat.IO.VolumeDiskExtent.op_Inequality(Aristocrat.IO.VolumeDiskExtent,Aristocrat.IO.VolumeDiskExtent)">
            <summary>
            Tests whether two <see cref="T:Aristocrat.IO.VolumeDiskExtent"/>s are equal.
            </summary>
            <param name="left">The object to the left of the inequality operator.</param>
            <param name="right">The object to the right of the inequality operator.</param>
            <returns><b>true</b> if the objects are <b>not</b> equal; otherwise <b>false</b>.</returns>
        </member>
        <member name="M:Aristocrat.IO.VolumeDiskExtent.GetHashCode">
            <summary>
            Returns the hash code for this object. For information about the use of hash codes, see 
            <see cref="M:System.Object.GetHashCode"/>.
            </summary>
            <returns>An integer that represents the hash code for this object.</returns>
        </member>
        <member name="M:Aristocrat.IO.VolumeDiskExtent.Equals(System.Object)">
            <summary>
            Tests if <i>obj</i> is equal to the current object.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to test.</param>
            <returns><b>true</b> if the objects are equal; otherwise <b>false</b>.</returns>
        </member>
        <member name="P:Aristocrat.IO.VolumeDiskExtent.DiskNumber">
            <summary>
            Gets the number of the disk that contains this extent.
            </summary>
            <remarks>This is the same number that is used to construct the name of the disk, for example, the X in 
            <i>PhysicalDriveX</i> or <i>HarddiskX</i>.</remarks>
        </member>
        <member name="P:Aristocrat.IO.VolumeDiskExtent.StartingOffset">
            <summary>
            Gets the offset from the beginning of the disk to the extent, in bytes.
            </summary>
        </member>
        <member name="P:Aristocrat.IO.VolumeDiskExtent.ExtentLength">
            <summary>
            Gets the number of bytes in this extent.
            </summary>
        </member>
        <member name="T:Aristocrat.IO.VolumeInfo">
            <summary>
            Provides access to information on a volume.
            </summary>
        </member>
        <member name="M:Aristocrat.IO.VolumeInfo.Lookup(System.String)">
            <summary>
            Gets a <see cref="T:Aristocrat.IO.VolumeInfo"/> that is mapped to the <paramref name="path"/>.
            </summary>
            <param name="path">A valid Win32 path.</param>
            <returns>The <see cref="T:Aristocrat.IO.VolumeInfo"/> that is mapped to the <paramref name="path"/>.</returns>
            <exception cref="T:System.ArgumentNullException">path cannot be null.</exception>
            <exception cref="T:System.ComponentModel.Win32Exception">path is not a valid Win32 path.</exception>
        </member>
        <member name="M:Aristocrat.IO.VolumeInfo.Lookup(System.Int32)">
            <summary>
            Gets a <see cref="T:Aristocrat.IO.VolumeInfo"/> that is mapped to the <paramref name="serialNumber"/>.
            </summary>
            <param name="serialNumber">The serial number of the volume you wish to find.</param>
            <returns>The <see cref="T:Aristocrat.IO.VolumeInfo"/> that is mapped to the <paramref name="serialNumber"/>.</returns>
        </member>
        <member name="P:Aristocrat.IO.VolumeInfo.BytesInUse">
            <summary>
            Gets the total number of bytes in use on the volume.
            </summary>
        </member>
        <member name="P:Aristocrat.IO.VolumeInfo.BytesPerCluster">
            <summary>
            Gets the number of bytes per cluster.
            </summary>
        </member>
        <member name="P:Aristocrat.IO.VolumeInfo.BytesPerFileRecordSegment">
            <summary>
            Gets the number of bytes in a file record segment.
            </summary>
            <remarks>This number will be <i>0</i> unless the file system type is <i>NTFS</i>.</remarks>
        </member>
        <member name="P:Aristocrat.IO.VolumeInfo.BytesPerSector">
            <summary>
            Gets the number of bytes per sector.
            </summary>
        </member>
        <member name="P:Aristocrat.IO.VolumeInfo.ClustersPerFileRecordSegment">
            <summary>
            Gets the number of clusters in a file record segment.
            </summary>
            <remarks>This number will be <i>0</i> unless the file system type is <i>NTFS</i>.</remarks>
        </member>
        <member name="P:Aristocrat.IO.VolumeInfo.ClusterStart">
            <summary>
            Gets the cluster start logical address.
            </summary>
        </member>
        <member name="P:Aristocrat.IO.VolumeInfo.DiskExtents">
            <summary>
            Gets the collection of <see cref="T:Aristocrat.IO.VolumeDiskExtent"/>s that exist on the <see cref="T:Aristocrat.IO.VolumeInfo"/>.
            </summary>
        </member>
        <member name="P:Aristocrat.IO.VolumeInfo.FileSystemType">
            <summary>
            Gets the name of the file system.
            </summary>
            <remarks>For example, the <i>FAT</i> file system or the <i>NTFS</i> file system.</remarks>
        </member>
        <member name="P:Aristocrat.IO.VolumeInfo.FreeBytes">
            <summary>
            Gets the total number of free bytes on the disk.
            </summary>
        </member>
        <member name="P:Aristocrat.IO.VolumeInfo.FreeClusters">
            <summary>
            Gets the total number of free clusters on the disk that are available.
            </summary>
        </member>
        <member name="P:Aristocrat.IO.VolumeInfo.Length">
            <summary>
            Gets the total number of bytes on the disk that are available.
            </summary>
        </member>
        <member name="P:Aristocrat.IO.VolumeInfo.Name">
            <summary>
            Gets the name the volume.
            </summary>
        </member>
        <member name="P:Aristocrat.IO.VolumeInfo.NumberOfSectors">
            <summary>
            Gets the total number of sectors
            </summary>
        </member>
        <member name="P:Aristocrat.IO.VolumeInfo.RootStart">
            <summary>
            Gets the root start logical address.
            </summary>
        </member>
        <member name="P:Aristocrat.IO.VolumeInfo.SectorsPerCluster">
            <summary>
            Gets the number of sectors per cluster.
            </summary>
        </member>
        <member name="P:Aristocrat.IO.VolumeInfo.SerialNumber">
            <summary>
            Gets the volume serial number.
            </summary>
        </member>
        <member name="P:Aristocrat.IO.VolumeInfo.TotalClusters">
            <summary>
            Gets the total number of clusters.
            </summary>
        </member>
        <member name="P:Aristocrat.IO.VolumeInfo.VolumeLabel">
            <summary>
            Gets the volume label.
            </summary>
        </member>
        <member name="T:Aristocrat.IO.VolumeDiskStream">
            <summary>
            Exposes a <see cref="T:Stream"/> around a file, supporting synchronous read operations.
            </summary>
        </member>
        <member name="M:Aristocrat.IO.VolumeDiskStream.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Aristocrat.IO.VolumeDiskStream"/> class with the specified path.
            </summary>
            <param name="volumeName">A valid volume path or volume letter. This can be either uppercase or lowercase, 'a' to 
            'z'. A null value is not valid.</param>
        </member>
        <member name="M:Aristocrat.IO.VolumeDiskStream.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Aristocrat.IO.VolumeDiskStream"/> class with the specified path and 
            buffer.
            </summary>
            <param name="volumeName">A valid volume path or volume letter. This can be either uppercase or lowercase, 'a' to 
            'z'. A null value is not valid.</param>
            <param name="bufferSize">A positive <see cref="T:Int32"/> value greater than 0 indicating the buffer size.</param>
        </member>
        <member name="M:Aristocrat.IO.VolumeDiskStream.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
            <exception cref="T:NotSupportedException">The stream does not support writing.</exception>
        </member>
        <member name="M:Aristocrat.IO.VolumeDiskStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a block of bytes from the stream and writes the data in a given buffer.
            </summary>
            <param name="buffer">When this method returns, contains the specified byte array with the values between offset 
            and (offset + count - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The byte offset in array at which to begin reading.</param>
            <param name="count">The maximum number of bytes to read.</param>
            <returns>The total number of bytes read into the buffer. This might be less than the number of bytes requested 
            if that number of bytes are not currently available, or zero if the end of the stream is reached.</returns>
            <exception cref="T:System.ArgumentException">offset and count describe an invalid range in array.</exception>
            <exception cref="T:System.ArgumentNullException">buffer is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">offset or count is negative.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
            <exception cref="T:NotSupportedException">The stream does not support reading.</exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
        </member>
        <member name="M:Aristocrat.IO.VolumeDiskStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the current position of this stream to the given value.
            </summary>
            <param name="offset">The point relative to origin from which to begin seeking.</param>
            <param name="origin">Specifies the beginning, the end, or the current position as a reference point for origin,
            using a value of type <see cref="T:SeekOrigin"/>.</param>
            <returns>The new position in the stream.</returns>
            <exception cref="T:System.ArgumentException">Attempted seeking before the beginning of the stream.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
            <exception cref="T:NotSupportedException">The stream does not support seeking, such as if the 
            <see cref="T:Aristocrat.IO.VolumeDiskStream"/> is constructed from a pipe or console output.</exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
        </member>
        <member name="M:Aristocrat.IO.VolumeDiskStream.SetLength(System.Int64)">
            <summary>
            Sets the length of this stream to the given value.
            </summary>
            <param name="value">The new length of the stream.</param>
            <exception cref="T:NotSupportedException">The stream does not support writing.</exception>
        </member>
        <member name="M:Aristocrat.IO.VolumeDiskStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a block of bytes to this stream using data from a buffer.
            </summary>
            <param name="buffer">The buffer containing data to write to the stream.</param>
            <param name="offset">The zero-based byte offset in array at which to begin copying bytes to the current stream.
            </param>
            <param name="count">The maximum number of bytes to be written to the current stream.</param>
            <exception cref="T:NotSupportedException">The stream does not support writing.</exception>
        </member>
        <member name="M:Aristocrat.IO.VolumeDiskStream.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:System.IO.FileStream"/> and optionally releases the 
            managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged 
            resources.</param>
        </member>
        <member name="P:Aristocrat.IO.VolumeDiskStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading.
            </summary>
            <returns>true if the stream supports reading; false if the stream is closed or was opened with write-only 
            access.</returns>
        </member>
        <member name="P:Aristocrat.IO.VolumeDiskStream.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking.
            </summary>
            <returns>true if the stream supports seeking; false if the stream is closed or if the 
            <see cref="T:Stream"/> was constructed from an operating-system handle such as a pipe or output to the 
            console.</returns>
        </member>
        <member name="P:Aristocrat.IO.VolumeDiskStream.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing.
            </summary>
            <returns>true if the stream supports writing; false if the stream is closed or was opened with read-only 
            access.</returns>
        </member>
        <member name="P:Aristocrat.IO.VolumeDiskStream.Length">
            <summary>
            Gets the length in bytes of the stream.
            </summary>
            <returns>A long value representing the length of the stream in bytes.</returns>
        </member>
        <member name="P:Aristocrat.IO.VolumeDiskStream.Name">
            <summary>
            Gets the name of the <see cref="T:Aristocrat.IO.VolumeDiskStream"/> that was passed to the constructor.
            </summary>
            <returns>A string that is the name of the <see cref="T:Aristocrat.IO.VolumeDiskStream"/>.</returns>
        </member>
        <member name="P:Aristocrat.IO.VolumeDiskStream.Position">
            <summary>
            Gets or sets the current position of this stream.
            </summary>
            <returns>The current position of this stream.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Attempted to set the position to a negative value.
            </exception>
            <exception cref="T:System.IO.EndOfStreamException">Attempted seeking past the end of a stream that does not 
            support this.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. - or -The position was set to a very large value 
            beyond the end of the stream in Windows 98 or earlier.</exception>
            <exception cref="T:NotSupportedException">The stream does not support seeking.</exception>
        </member>
        <member name="P:Aristocrat.IO.VolumeDiskStream.VolumeInfo">
            <summary>
            Gets the volume information for the stream.
            </summary>
            <returns>The volume information for the stream.</returns>
        </member>
        <member name="T:Aristocrat.IO.VolumeStream">
            <summary>
            Exposes a <see cref="T:Stream"/> around a file, supporting synchronous read operations.
            </summary>
            <remarks>This class reads an entire volume.</remarks>
        </member>
        <member name="M:Aristocrat.IO.VolumeStream.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Aristocrat.IO.VolumeStream"/> class with the specified path.
            </summary>
            <param name="volumeName">A valid volume path or volume letter. This can be either uppercase or lowercase, 'a' to 
            'z'. A null value is not valid.</param>
        </member>
        <member name="M:Aristocrat.IO.VolumeStream.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Aristocrat.IO.VolumeStream"/> class with the specified path and 
            buffer.
            </summary>
            <param name="volumeName">A valid volume path or volume letter. This can be either uppercase or lowercase, 'a' to 
            'z'. A null value is not valid.</param>
            <param name="bufferSize">A positive <see cref="T:Int32"/> value greater than 0 indicating the buffer size.</param>
        </member>
        <member name="M:Aristocrat.IO.VolumeStream.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
            <exception cref="T:NotSupportedException">The stream does not support writing.</exception>
        </member>
        <member name="M:Aristocrat.IO.VolumeStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a block of bytes from the stream and writes the data in a given buffer.
            </summary>
            <param name="buffer">When this method returns, contains the specified byte array with the values between offset 
            and (offset + count - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The byte offset in array at which to begin reading.</param>
            <param name="count">The maximum number of bytes to read.</param>
            <returns>The total number of bytes read into the buffer. This might be less than the number of bytes requested 
            if that number of bytes are not currently available, or zero if the end of the stream is reached.</returns>
            <exception cref="T:System.ArgumentException">offset and count describe an invalid range in array.</exception>
            <exception cref="T:System.ArgumentNullException">buffer is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">offset or count is negative.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
            <exception cref="T:NotSupportedException">The stream does not support reading.</exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
        </member>
        <member name="M:Aristocrat.IO.VolumeStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the current position of this stream to the given value.
            </summary>
            <param name="offset">The point relative to origin from which to begin seeking.</param>
            <param name="origin">Specifies the beginning, the end, or the current position as a reference point for origin, 
            using a value of type <see cref="T:SeekOrigin"/>.</param>
            <returns>The new position in the stream.</returns>
            <exception cref="T:System.ArgumentException">Attempted seeking before the beginning of the stream.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
            <exception cref="T:NotSupportedException">The stream does not support seeking, such as if the 
            <see cref="T:Aristocrat.IO.VolumeStream"/> is constructed from a pipe or console output.</exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
        </member>
        <member name="M:Aristocrat.IO.VolumeStream.SetLength(System.Int64)">
            <summary>
            Sets the length of this stream to the given value.
            </summary>
            <param name="value">The new length of the stream.</param>
            <exception cref="T:NotSupportedException">The stream does not support writing.</exception>
        </member>
        <member name="M:Aristocrat.IO.VolumeStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a block of bytes to this stream using data from a buffer.
            </summary>
            <param name="buffer">The buffer containing data to write to the stream.</param>
            <param name="offset">The zero-based byte offset in array at which to begin copying bytes to the current stream.
            </param>
            <param name="count">The maximum number of bytes to be written to the current stream.</param>
            <exception cref="T:NotSupportedException">The stream does not support writing.</exception>
        </member>
        <member name="M:Aristocrat.IO.VolumeStream.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:Aristocrat.IO.VolumeStream"/> and optionally releases the managed 
            resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged 
            resources.</param>
        </member>
        <member name="P:Aristocrat.IO.VolumeStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading.
            </summary>
            <returns>true if the stream supports reading; false if the stream is closed or was opened with write-only 
            access.</returns>
        </member>
        <member name="P:Aristocrat.IO.VolumeStream.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking.
            </summary>
            <returns>true if the stream supports seeking; false if the stream is closed or if the 
            <see cref="T:Stream"/> was constructed from an operating-system handle such as a pipe or output to the 
            console.</returns>
        </member>
        <member name="P:Aristocrat.IO.VolumeStream.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing.
            </summary>
            <returns>true if the stream supports writing; false if the stream is closed or was opened with read-only 
            access.</returns>
        </member>
        <member name="P:Aristocrat.IO.VolumeStream.Length">
            <summary>
            Gets the length in bytes of the stream.
            </summary>
            <returns>A long value representing the length of the stream in bytes.</returns>
        </member>
        <member name="P:Aristocrat.IO.VolumeStream.Name">
            <summary>
            Gets the name of the <see cref="T:Aristocrat.IO.VolumeStream"/> that was passed to the constructor.
            </summary>
            <returns>A string that is the name of the <see cref="T:Aristocrat.IO.VolumeStream"/>.</returns>
        </member>
        <member name="P:Aristocrat.IO.VolumeStream.Position">
            <summary>
            Gets or sets the current position of this stream.
            </summary>
            <returns>The current position of this stream.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Attempted to set the position to a negative value.
            </exception>
            <exception cref="T:System.IO.EndOfStreamException">Attempted seeking past the end of a stream that does not 
            support this.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. - or -The position was set to a very large value 
            beyond the end of the stream in Windows 98 or earlier.</exception>
            <exception cref="T:NotSupportedException">The stream does not support seeking.</exception>
        </member>
        <member name="P:Aristocrat.IO.VolumeStream.VolumeInfo">
            <summary>
            Gets the volume information for the stream.
            </summary>
            <returns>The volume information for the stream.</returns>
        </member>
        <member name="T:Aristocrat.Linq.CloneableExtension">
            <summary>
            Provides a set of static methods for extending <see cref="T:System.ICloneable"/>.
            </summary>
        </member>
        <member name="M:Aristocrat.Linq.CloneableExtension.Clone``1(``0)">
            <summary>
            Clones the specified source.
            </summary>
            <typeparam name="T">The type of the object to clone</typeparam>
            <param name="source">The source to predicate.</param>
            <returns>A new object that is a clone of <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException">@source</exception>
        </member>
        <member name="T:Aristocrat.Linq.ConfigurationExtension">
            <summary>
            Provides a set of static methods for extending <see cref="T:System.Configuration.Configuration"/>.
            </summary>
        </member>
        <member name="M:Aristocrat.Linq.ConfigurationExtension.ProtectSection(System.Configuration.Configuration,System.String,System.String)">
            <summary>
            Marks a configuration section for protection. 
            </summary>
            <param name="source">The <see cref="T:System.Configuration.Configuration"/> to predicate.</param>
            <param name="sectionName">The path to the section to be protected.</param>
            <param name="protectionProvider">The name of the protection provider to use.</param>
            <returns><b>true</b> if the operation was successful; otherwise <b>false</b>.</returns>
        </member>
        <member name="M:Aristocrat.Linq.ConfigurationExtension.ProtectSection(System.Configuration.Configuration,System.String,System.String,System.Configuration.ConfigurationSaveMode)">
            <summary>
            Marks a configuration section for protection, saves it, and refreshes the section so the next time it is loaded 
            from disk it is read correctly. 
            </summary>
            <param name="source">The <see cref="T:System.Configuration.Configuration"/> to predicate.</param>
            <param name="sectionName">The path to the section to be protected.</param>
            <param name="protectionProvider">The name of the protection provider to use.</param>
            <param name="saveMode">A <see cref="T:System.Configuration.ConfigurationSaveMode"/> value that determines which property values to 
            save.</param>
            <returns><b>true</b> if the operation was successful; otherwise <b>false</b>.</returns>
        </member>
        <member name="M:Aristocrat.Linq.ConfigurationExtension.ProtectSection(System.Configuration.Configuration,System.String,System.String,System.Configuration.ConfigurationSaveMode,System.Boolean)">
            <summary>
            Marks a configuration section for protection, saves it, and refreshes the section so the next time it is loaded 
            from disk it is read correctly. 
            </summary>
            <param name="source">The <see cref="T:System.Configuration.Configuration"/> to predicate.</param>
            <param name="sectionName">The path to the section to be protected.</param>
            <param name="protectionProvider">The name of the protection provider to use.</param>
            <param name="saveMode">A <see cref="T:System.Configuration.ConfigurationSaveMode"/> value that determines which property values to 
            save.</param>
            <param name="forceSaveAll"><b>true</b> to save even if the configuration was not modified; otherwise, 
            <b>false</b>.</param>
            <returns><b>true</b> if the operation was successful; otherwise <b>false</b>.</returns>
        </member>
        <member name="T:Aristocrat.Linq.CryptoTransformExtension">
            <summary>
            Provides a set of static methods for extending <see cref="T:System.Security.Cryptography.ICryptoTransform"/>.
            </summary>
        </member>
        <member name="M:Aristocrat.Linq.CryptoTransformExtension.Transform(System.Security.Cryptography.ICryptoTransform,System.Byte[])">
            <summary>
            An <see cref="T:System.Security.Cryptography.ICryptoTransform"/> extension method that transforms .
            </summary>
            <param name="source">The cryptographic transform to act on.</param>
            <param name="inputBuffer">The input buffer.</param>
            <returns>The computed transform.</returns>
        </member>
        <member name="T:Aristocrat.Linq.DateTimeExtension">
            <summary>
            Provides a set of static methods for extending <see cref="T:System.DateTime"/>.
            </summary>
        </member>
        <member name="M:Aristocrat.Linq.DateTimeExtension.FirstOfMonth(System.DateTime)">
            <summary>
            Gets a <see cref="T:System.DateTime"/> representing the first day in the specified month.
            </summary>
            <param name="source">The <see cref="T:System.DateTime"/> to predicate.</param>
            <returns>The modified <see cref="T:System.DateTime"/>.</returns>
        </member>
        <member name="M:Aristocrat.Linq.DateTimeExtension.FirstOfMonth(System.DateTime,System.DayOfWeek)">
            <summary>
            Gets a <see cref="T:System.DateTime"/> representing the first specified day in the specified month.
            </summary>
            <param name="source">The <see cref="T:System.DateTime"/> to predicate.</param>
            <param name="dayOfWeek">The <see cref="T:System.DayOfWeek"/> for the date to get.</param>
            <returns>The modified <see cref="T:System.DateTime"/>.</returns>
        </member>
        <member name="M:Aristocrat.Linq.DateTimeExtension.FirstOfYear(System.DateTime)">
            <summary>
            Gets a <see cref="T:System.DateTime"/> representing the first day in the specified year.
            </summary>
            <param name="source">The <see cref="T:System.DateTime"/> to predicate.</param>
            <returns>The modified <see cref="T:System.DateTime"/>.</returns>
        </member>
        <member name="M:Aristocrat.Linq.DateTimeExtension.LastOfMonth(System.DateTime)">
            <summary>
            Gets a DateTime representing the last day in the current month
            </summary>
            <param name="source">The <see cref="T:System.DateTime"/> to predicate.</param>
            <returns>The modified <see cref="T:System.DateTime"/>.</returns>
        </member>
        <member name="M:Aristocrat.Linq.DateTimeExtension.LastOfMonth(System.DateTime,System.DayOfWeek)">
            <summary>
            Gets a DateTime representing the last specified day in the current month
            </summary>
            <param name="source">The <see cref="T:System.DateTime"/> to predicate.</param>
            <param name="dayOfWeek">The <see cref="T:System.DayOfWeek"/> for the date to get.</param>
            <returns>The modified <see cref="T:System.DateTime"/>.</returns>
        </member>
        <member name="M:Aristocrat.Linq.DateTimeExtension.Midnight(System.DateTime)">
            <summary>
            Gets a <see cref="T:System.DateTime"/> representing midnight on the source date.
            </summary>
            <param name="source">The <see cref="T:System.DateTime"/> to predicate.</param>
            <returns>The modified <see cref="T:System.DateTime"/>.</returns>
        </member>
        <member name="M:Aristocrat.Linq.DateTimeExtension.NextDay(System.DateTime)">
            <summary>
            Gets a <see cref="T:System.DateTime"/> representing the next day after the specified date.
            </summary>
            <param name="source">The <see cref="T:System.DateTime"/> to predicate.</param>
            <returns>The modified <see cref="T:System.DateTime"/>.</returns>
        </member>
        <member name="M:Aristocrat.Linq.DateTimeExtension.NextDayOfWeek(System.DateTime,System.DayOfWeek)">
            <summary>
            Gets a <see cref="T:System.DateTime"/> representing the first date following the specified date which falls on the 
            given day of the week.
            </summary>
            <param name="source">The <see cref="T:System.DateTime"/> to predicate.</param>
            <param name="dayOfWeek">The <see cref="T:System.DayOfWeek"/> for the next date to get.</param>
            <returns>The modified <see cref="T:System.DateTime"/>.</returns>
        </member>
        <member name="M:Aristocrat.Linq.DateTimeExtension.NextHour(System.DateTime)">
            <summary>
            Gets a <see cref="T:System.DateTime"/> representing the next hour after the specified time.
            </summary>
            <param name="source">The <see cref="T:System.DateTime"/> to predicate.</param>
            <returns>The modified <see cref="T:System.DateTime"/>.</returns>
        </member>
        <member name="M:Aristocrat.Linq.DateTimeExtension.NextMinute(System.DateTime)">
            <summary>
            Gets a <see cref="T:System.DateTime"/> representing the next minute after the specified time.
            </summary>
            <param name="source">The <see cref="T:System.DateTime"/> to predicate.</param>
            <returns>The modified <see cref="T:System.DateTime"/>.</returns>
        </member>
        <member name="M:Aristocrat.Linq.DateTimeExtension.NextMonth(System.DateTime)">
            <summary>
            Gets a <see cref="T:System.DateTime"/> representing the next month after the specified time.
            </summary>
            <param name="source">The <see cref="T:System.DateTime"/> to predicate.</param>
            <returns>The modified <see cref="T:System.DateTime"/>.</returns>
        </member>
        <member name="M:Aristocrat.Linq.DateTimeExtension.NextTime(System.DateTime)">
            <summary>
            Gets a <see cref="T:System.DateTime"/> representing the today's date with the source time.
            </summary>
            <param name="source">The <see cref="T:System.DateTime"/> to predicate.</param>
            <returns>The modified <see cref="T:System.DateTime"/>.</returns>
        </member>
        <member name="M:Aristocrat.Linq.DateTimeExtension.NextWeek(System.DateTime)">
            <summary>
            Gets a <see cref="T:System.DateTime"/> representing the next week after the specified time.
            </summary>
            <param name="source">The <see cref="T:System.DateTime"/> to predicate.</param>
            <returns>The modified <see cref="T:System.DateTime"/>.</returns>
        </member>
        <member name="M:Aristocrat.Linq.DateTimeExtension.NextYear(System.DateTime)">
            <summary>
            Gets a <see cref="T:System.DateTime"/> representing the next year after the specified time.
            </summary>
            <param name="source">The <see cref="T:System.DateTime"/> to predicate.</param>
            <returns>The modified <see cref="T:System.DateTime"/>.</returns>
        </member>
        <member name="M:Aristocrat.Linq.DateTimeExtension.Noon(System.DateTime)">
            <summary>
            Gets a <see cref="T:System.DateTime"/> representing midnight on the source date.
            </summary>
            <param name="source">The <see cref="T:System.DateTime"/> to predicate.</param>
            <returns>The modified <see cref="T:System.DateTime"/>.</returns>
        </member>
        <member name="M:Aristocrat.Linq.DateTimeExtension.SetSystemTime(System.DateTime)">
            <summary>
            Sets the current system time and date.
            </summary>
            <param name="source">The <see cref="T:System.DateTime"/> to predicate.</param>
            <returns><b>true</b> if the operation is successful; otherwise <b>false</b>.</returns>
        </member>
        <member name="M:Aristocrat.Linq.DateTimeExtension.SetTime(System.DateTime,System.Int32,System.Int32)">
            <summary>
            Sets the time of the source date with minute precision
            </summary>
            <param name="source">The <see cref="T:System.DateTime"/> to predicate.</param>
            <param name="hour">The hour</param>
            <param name="minute">The minute</param>
            <returns>The modified <see cref="T:System.DateTime"/>.</returns>
        </member>
        <member name="M:Aristocrat.Linq.DateTimeExtension.SetTime(System.DateTime,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the time of the source date with second precision
            </summary>
            <param name="source">The <see cref="T:System.DateTime"/> to predicate.</param>
            <param name="hour">The hour</param>
            <param name="minute">The minute</param>
            <param name="second">The second</param>
            <returns>The modified <see cref="T:System.DateTime"/>.</returns>
        </member>
        <member name="M:Aristocrat.Linq.DateTimeExtension.SetTime(System.DateTime,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the time of the source date with millisecond precision
            </summary>
            <param name="source">The <see cref="T:System.DateTime"/> to predicate.</param>
            <param name="hour">The hours (0 through 23).</param>
            <param name="minute">The minutes (0 through 59).</param>
            <param name="second">The seconds (0 through 59).</param>
            <param name="millisecond">The milliseconds (0 through 999).</param>
            <returns>The modified <see cref="T:System.DateTime"/>.</returns>
        </member>
        <member name="M:Aristocrat.Linq.DateTimeExtension.SetToday(System.DateTime)">
            <summary>
            Gets a <see cref="T:System.DateTime"/> representing the today's date with the source time.
            </summary>
            <param name="source">The <see cref="T:System.DateTime"/> to predicate.</param>
            <returns>The modified <see cref="T:System.DateTime"/>.</returns>
        </member>
        <member name="T:Aristocrat.Linq.EnumerableExtension">
            <summary>
            Provides a set of static methods for extending <see cref="T:System.Collections.Generic.IEnumerable{TSource}"/>.
            </summary>
        </member>
        <member name="M:Aristocrat.Linq.EnumerableExtension.Convert``2(System.Collections.Generic.IEnumerable{``0},System.Converter{``0,``1})">
            <summary>
            Converts an enumerable of one type to an enumerable of another type.
            </summary>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable{TSource}"/> to predicate.</param>
            <param name="converter">The converter.</param>
            <typeparam name="TSource">The type of the elements of the source enumerable.</typeparam>
            <typeparam name="TOutput">The type of the elements of the output enumerable.</typeparam>
            <returns>An enumerator that allows foreach to be used to process convert all in this collection.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when one or more required arguments are null.</exception>
        </member>
        <member name="M:Aristocrat.Linq.EnumerableExtension.IndexOf``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Determines the index in a sequence of the first instance specified element by using the default equality 
            comparer.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable{TSource}"/> to predicate.</param>
            <param name="value">The value to locate in the sequence.</param>
        </member>
        <member name="M:Aristocrat.Linq.EnumerableExtension.IndexOf``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Determines the index in a sequence of the first instance specified element by using the specified 
            <paramref name="comparer"/>.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable{TSource}"/> to predicate.</param>
            <param name="value">The value to locate in the sequence.</param>
            <param name="comparer">An equality comparer to compare values.</param>
        </member>
        <member name="M:Aristocrat.Linq.EnumerableExtension.ToItemizedString``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns <paramref name="source"/> as an itemized string.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable{TSource}"/> to predicate.</param>
            <returns>source as a string.</returns>
            <exception cref="T:System.ArgumentNullException">source is null. </exception>
        </member>
        <member name="M:Aristocrat.Linq.EnumerableExtension.ToItemizedString``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Returns <paramref name="source"/> as an itemized string.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable{TSource}"/> to predicate.</param>
            <param name="format">A composite format string.</param>
            <returns>source as a string.</returns>
            <exception cref="T:System.ArgumentNullException">source is null. </exception>
        </member>
        <member name="M:Aristocrat.Linq.EnumerableExtension.ToItemizedString``1(System.Collections.Generic.IEnumerable{``0},System.IFormatProvider,System.String)">
            <summary>
            Returns <paramref name="source"/> as an itemized string.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable{TSource}"/> to predicate.</param>
            <param name="provider">An object that supplies culture-specific formatting information.</param>
            <param name="format">A composite format string.</param>
            <returns>source as a string.</returns>
            <exception cref="T:System.ArgumentNullException">source is null. </exception>
        </member>
        <member name="M:Aristocrat.Linq.EnumerableExtension.Trim``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
            <summary>
            Trims an enumerable collection trim in this collection.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable{TSource}"/> to predicate.</param>
            <param name="skip">The number of elements to skip.</param>
            <param name="take">The number of elements to take.</param>
            <returns>An enumerator that allows foreach to be used to process trim in this collection.</returns>
        </member>
        <member name="T:Aristocrat.Linq.EnumExtension">
            <summary>
            Provides a set of static methods for extending <see cref="T:System.Enum"/>.
            </summary>
        </member>
        <member name="M:Aristocrat.Linq.EnumExtension.IsEqual(System.Enum,System.String)">
            <summary>
            Tests whether an <see cref="T:System.Enum"/> has the same value as a <see cref="T:System.String"/>.
            </summary>
            <param name="first">An <see cref="T:System.Enum"/> to compare.</param>
            <param name="second">A <see cref="T:System.String"/> to compare.</param>
            <returns><b>true</b> if the objects are equal; otherwise <b>false</b>.</returns>
        </member>
        <member name="M:Aristocrat.Linq.EnumExtension.IsEqual(System.String,System.Enum)">
            <summary>
            Tests whether a <see cref="T:System.String"/> has the same value as an <see cref="T:System.Enum"/>.
            </summary>
            <param name="first">A <see cref="T:System.String"/> to compare.</param>
            <param name="second">An <see cref="T:System.Enum"/> to compare.</param>
            <returns><b>true</b> if the objects are equal; otherwise <b>false</b>.</returns>
        </member>
        <member name="M:Aristocrat.Linq.EnumExtension.IsEqual(System.Enum,System.Int16)">
            <summary>
            Tests whether an <see cref="T:System.Enum"/> has the same value as a <see cref="T:System.String"/>.
            </summary>
            <param name="first">An <see cref="T:System.Enum"/> to compare.</param>
            <param name="second">A <see cref="T:System.Int16"/> to compare.</param>
            <returns><b>true</b> if the objects are equal; otherwise <b>false</b>.</returns>
        </member>
        <member name="M:Aristocrat.Linq.EnumExtension.IsEqual(System.Int16,System.Enum)">
            <summary>
            Tests whether a <see cref="T:System.String"/> has the same value as an <see cref="T:System.Enum"/>.
            </summary>
            <param name="first">A <see cref="T:System.Int16"/> to compare.</param>
            <param name="second">An <see cref="T:System.Enum"/> to compare.</param>
            <returns><b>true</b> if the objects are equal; otherwise <b>false</b>.</returns>
        </member>
        <member name="M:Aristocrat.Linq.EnumExtension.IsEqual(System.Enum,System.Int32)">
            <summary>
            Tests whether an <see cref="T:System.Enum"/> has the same value as a <see cref="T:System.String"/>.
            </summary>
            <param name="first">An <see cref="T:System.Enum"/> to compare.</param>
            <param name="second">A <see cref="T:System.Int32"/> to compare.</param>
            <returns><b>true</b> if the objects are equal; otherwise <b>false</b>.</returns>
        </member>
        <member name="M:Aristocrat.Linq.EnumExtension.IsEqual(System.Int32,System.Enum)">
            <summary>
            Tests whether a <see cref="T:System.String"/> has the same value as an <see cref="T:System.Enum"/>.
            </summary>
            <param name="first">A <see cref="T:System.Int32"/> to compare.</param>
            <param name="second">An <see cref="T:System.Enum"/> to compare.</param>
            <returns><b>true</b> if the objects are equal; otherwise <b>false</b>.</returns>
        </member>
        <member name="M:Aristocrat.Linq.EnumExtension.IsEqual(System.Enum,System.Int64)">
            <summary>
            Tests whether an <see cref="T:System.Enum"/> has the same value as a <see cref="T:System.String"/>.
            </summary>
            <param name="first">An <see cref="T:System.Enum"/> to compare.</param>
            <param name="second">A <see cref="T:System.Int64"/> to compare.</param>
            <returns><b>true</b> if the objects are equal; otherwise <b>false</b>.</returns>
        </member>
        <member name="M:Aristocrat.Linq.EnumExtension.IsEqual(System.Int64,System.Enum)">
            <summary>
            Tests whether a <see cref="T:System.String"/> has the same value as an <see cref="T:System.Enum"/>.
            </summary>
            <param name="first">A <see cref="T:System.Int64"/> to compare.</param>
            <param name="second">An <see cref="T:System.Enum"/> to compare.</param>
            <returns><b>true</b> if the objects are equal; otherwise <b>false</b>.</returns>
        </member>
        <member name="M:Aristocrat.Linq.EnumExtension.ToEnum``1(System.String)">
            <summary>
            A string extension method that converts a source to an enumumeration.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="source">The source to act on.</param>
            <returns>source as a bool.</returns>
        </member>
        <member name="M:Aristocrat.Linq.EnumExtension.ToEnum``1(System.String,System.Boolean)">
            <summary>
            A string extension method that converts a source to an enumumeration.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="source">The source to act on.</param>
            <param name="ignoreCase">true to ignore case; false to regard case.</param>
            <returns>source as a bool.</returns>
        </member>
        <member name="M:Aristocrat.Linq.EnumExtension.ToName(System.Enum)">
            <summary>
            Convert an <see cref="T:System.Enum"/> tothe name of the constant that has the specified value.
            </summary>
            <param name="source">The source to act on.</param>
            <returns>source as a bool.</returns>
        </member>
        <member name="T:Aristocrat.Linq.ConvertibleDictionaryExtension">
            <summary>
            Provides a set of static methods for extending <see cref="T:System.Collections.Generic.IDictionary{TKey, TValue}"/>.
            </summary>
        </member>
        <member name="M:Aristocrat.Linq.ConvertibleDictionaryExtension.Value``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Boolean)">
            <summary>
            An <see cref="T:System.Collections.Generic.IDictionary{TKey, TValue}"/> extension method that gets a value as a <see cref="T:Boolean"/>.
            </summary>
            <typeparam name="TKey">Type of the key.</typeparam>
            <typeparam name="TValue">Type of the value.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IDictionary{TKey, TValue}"/> to predicate.</param>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value if <paramref name="key"/> is not found.</param>
            <returns>The value associated with the specified <paramref name="key"/>, if found; otherwise, the 
            <paramref name="defaultValue"/>.</returns>
        </member>
        <member name="M:Aristocrat.Linq.ConvertibleDictionaryExtension.Value``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Boolean,System.IFormatProvider)">
            <summary>
            An <see cref="T:System.Collections.Generic.IDictionary{TKey, TValue}"/> extension method that gets a value as a <see cref="T:Boolean"/>.
            </summary>
            <typeparam name="TKey">Type of the key.</typeparam>
            <typeparam name="TValue">Type of the value.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IDictionary{TKey, TValue}"/> to predicate.</param>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value if <paramref name="key"/> is not found.</param>
            <param name="provider">An <see cref="T:IFormatProvider"/> interface implementation that supplies 
            culture-specific formatting information.</param>
            <returns>The value associated with the specified <paramref name="key"/>, if found; otherwise, the 
            <paramref name="defaultValue"/>.</returns>
        </member>
        <member name="M:Aristocrat.Linq.ConvertibleDictionaryExtension.Value``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Byte)">
            <summary>
            An <see cref="T:System.Collections.Generic.IDictionary{TKey, TValue}"/> extension method that gets a value as a 
            <see cref="T:Byte"/>.
            </summary>
            <typeparam name="TKey">Type of the key.</typeparam>
            <typeparam name="TValue">Type of the value.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IDictionary{TKey, TValue}"/> to predicate.</param>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value if <paramref name="key"/> is not found.</param>
            <returns>The value associated with the specified <paramref name="key"/>, if found; otherwise, the 
            <paramref name="defaultValue"/>.</returns>
        </member>
        <member name="M:Aristocrat.Linq.ConvertibleDictionaryExtension.Value``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Byte,System.IFormatProvider)">
            <summary>
            An <see cref="T:System.Collections.Generic.IDictionary{TKey, TValue}"/> extension method that gets a value as a 
            <see cref="T:Byte"/>.
            </summary>
            <typeparam name="TKey">Type of the key.</typeparam>
            <typeparam name="TValue">Type of the value.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IDictionary{TKey, TValue}"/> to predicate.</param>
            <param name="key">The key.</param>
            <param name="provider">An <see cref="T:IFormatProvider"/> interface implementation that supplies 
            culture-specific formatting information.</param>
            <param name="defaultValue">The default value if <paramref name="key"/> is not found.</param>
            <returns>The value associated with the specified <paramref name="key"/>, if found; otherwise, the 
            <paramref name="defaultValue"/>.</returns>
        </member>
        <member name="M:Aristocrat.Linq.ConvertibleDictionaryExtension.Value``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Char)">
            <summary>
            An <see cref="T:System.Collections.Generic.IDictionary{TKey, TValue}"/> extension method that gets a value as a 
            <see cref="T:Char"/>.
            </summary>
            <typeparam name="TKey">Type of the key.</typeparam>
            <typeparam name="TValue">Type of the value.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IDictionary{TKey, TValue}"/> to predicate.</param>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value if <paramref name="key"/> is not found.</param>
            <returns>The value associated with the specified <paramref name="key"/>, if found; otherwise, the 
            <paramref name="defaultValue"/>.</returns>
        </member>
        <member name="M:Aristocrat.Linq.ConvertibleDictionaryExtension.Value``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Char,System.IFormatProvider)">
            <summary>
            An <see cref="T:System.Collections.Generic.IDictionary{TKey, TValue}"/> extension method that gets a value as a 
            <see cref="T:Char"/>.
            </summary>
            <typeparam name="TKey">Type of the key.</typeparam>
            <typeparam name="TValue">Type of the value.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IDictionary{TKey, TValue}"/> to predicate.</param>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value if <paramref name="key"/> is not found.</param>
            <param name="provider">An <see cref="T:IFormatProvider"/> interface implementation that supplies 
            culture-specific formatting information.</param>
            <returns>The value associated with the specified <paramref name="key"/>, if found; otherwise, the 
            <paramref name="defaultValue"/>.</returns>
        </member>
        <member name="M:Aristocrat.Linq.ConvertibleDictionaryExtension.Value``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.SByte)">
            <summary>
            An <see cref="T:System.Collections.Generic.IDictionary{TKey, TValue}"/> extension method that gets a value as an 
            <see cref="T:SByte"/>.
            </summary>
            <typeparam name="TKey">Type of the key.</typeparam>
            <typeparam name="TValue">Type of the value.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IDictionary{TKey, TValue}"/> to predicate.</param>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value if <paramref name="key"/> is not found.</param>
            <returns>The value associated with the specified <paramref name="key"/>, if found; otherwise, the 
            <paramref name="defaultValue"/>.</returns>
        </member>
        <member name="M:Aristocrat.Linq.ConvertibleDictionaryExtension.Value``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.SByte,System.IFormatProvider)">
            <summary>
            An <see cref="T:System.Collections.Generic.IDictionary{TKey, TValue}"/> extension method that gets a value as an 
            <see cref="T:SByte"/>.
            </summary>
            <typeparam name="TKey">Type of the key.</typeparam>
            <typeparam name="TValue">Type of the value.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IDictionary{TKey, TValue}"/> to predicate.</param>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value if <paramref name="key"/> is not found.</param>
            <param name="provider">An <see cref="T:IFormatProvider"/> interface implementation that supplies 
            culture-specific formatting information.</param>
            <returns>The value associated with the specified <paramref name="key"/>, if found; otherwise, the 
            <paramref name="defaultValue"/>.</returns>
        </member>
        <member name="M:Aristocrat.Linq.ConvertibleDictionaryExtension.Value``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.DateTime)">
            <summary>
            An <see cref="T:System.Collections.Generic.IDictionary{TKey, TValue}"/> extension method that gets a value as a 
            <see cref="T:System.DateTime"/>.
            </summary>
            <typeparam name="TKey">Type of the key.</typeparam>
            <typeparam name="TValue">Type of the value.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IDictionary{TKey, TValue}"/> to predicate.</param>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value if <paramref name="key"/> is not found.</param>
            <returns>The value associated with the specified <paramref name="key"/>, if found; otherwise, the 
            <paramref name="defaultValue"/>.</returns>
        </member>
        <member name="M:Aristocrat.Linq.ConvertibleDictionaryExtension.Value``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.DateTime,System.IFormatProvider)">
            <summary>
            An <see cref="T:System.Collections.Generic.IDictionary{TKey, TValue}"/> extension method that gets a value as a 
            <see cref="T:System.DateTime"/>.
            </summary>
            <typeparam name="TKey">Type of the key.</typeparam>
            <typeparam name="TValue">Type of the value.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IDictionary{TKey, TValue}"/> to predicate.</param>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value if <paramref name="key"/> is not found.</param>
            <param name="provider">An <see cref="T:IFormatProvider"/> interface implementation that supplies 
            culture-specific formatting information.</param>
            <returns>The value associated with the specified <paramref name="key"/>, if found; otherwise, the 
            <paramref name="defaultValue"/>.</returns>
        </member>
        <member name="M:Aristocrat.Linq.ConvertibleDictionaryExtension.Value``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Decimal)">
            <summary>
            An <see cref="T:System.Collections.Generic.IDictionary{TKey, TValue}"/> extension method that gets a value as a 
            <see cref="T:Decimal"/>.
            </summary>
            <typeparam name="TKey">Type of the key.</typeparam>
            <typeparam name="TValue">Type of the value.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IDictionary{TKey, TValue}"/> to predicate.</param>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value if <paramref name="key"/> is not found.</param>
            <returns>The value associated with the specified <paramref name="key"/>, if found; otherwise, the 
            <paramref name="defaultValue"/>.</returns>
        </member>
        <member name="M:Aristocrat.Linq.ConvertibleDictionaryExtension.Value``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Decimal,System.IFormatProvider)">
            <summary>
            An <see cref="T:System.Collections.Generic.IDictionary{TKey, TValue}"/> extension method that gets a value as a 
            <see cref="T:Decimal"/>.
            </summary>
            <typeparam name="TKey">Type of the key.</typeparam>
            <typeparam name="TValue">Type of the value.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IDictionary{TKey, TValue}"/> to predicate.</param>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value if <paramref name="key"/> is not found.</param>
            <param name="provider">An <see cref="T:IFormatProvider"/> interface implementation that supplies 
            culture-specific formatting information.</param>
            <returns>The value associated with the specified <paramref name="key"/>, if found; otherwise, the 
            <paramref name="defaultValue"/>.</returns>
        </member>
        <member name="M:Aristocrat.Linq.ConvertibleDictionaryExtension.Value``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Double)">
            <summary>
            An <see cref="T:System.Collections.Generic.IDictionary{TKey, TValue}"/> extension method that gets a value as a 
            <see cref="T:Double"/>.
            </summary>
            <typeparam name="TKey">Type of the key.</typeparam>
            <typeparam name="TValue">Type of the value.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IDictionary{TKey, TValue}"/> to predicate.</param>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value if <paramref name="key"/> is not found.</param>
            <returns>The value associated with the specified <paramref name="key"/>, if found; otherwise, the 
            <paramref name="defaultValue"/>.</returns>
        </member>
        <member name="M:Aristocrat.Linq.ConvertibleDictionaryExtension.Value``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Double,System.IFormatProvider)">
            <summary>
            An <see cref="T:System.Collections.Generic.IDictionary{TKey, TValue}"/> extension method that gets a value as a 
            <see cref="T:Double"/>.
            </summary>
            <typeparam name="TKey">Type of the key.</typeparam>
            <typeparam name="TValue">Type of the value.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IDictionary{TKey, TValue}"/> to predicate.</param>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value if <paramref name="key"/> is not found.</param>
            <param name="provider">An <see cref="T:IFormatProvider"/> interface implementation that supplies 
            culture-specific formatting information.</param>
            <returns>The value associated with the specified <paramref name="key"/>, if found; otherwise, the 
            <paramref name="defaultValue"/>.</returns>
        </member>
        <member name="M:Aristocrat.Linq.ConvertibleDictionaryExtension.Value``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Int16)">
            <summary>
            An <see cref="T:System.Collections.Generic.IDictionary{TKey, TValue}"/> extension method that gets a value as an 
            <see cref="T:Int16"/>.
            </summary>
            <typeparam name="TKey">Type of the key.</typeparam>
            <typeparam name="TValue">Type of the value.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IDictionary{TKey, TValue}"/> to predicate.</param>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value if <paramref name="key"/> is not found.</param>
            <returns>The value associated with the specified <paramref name="key"/>, if found; otherwise, the 
            <paramref name="defaultValue"/>.</returns>
        </member>
        <member name="M:Aristocrat.Linq.ConvertibleDictionaryExtension.Value``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Int16,System.IFormatProvider)">
            <summary>
            An <see cref="T:System.Collections.Generic.IDictionary{TKey, TValue}"/> extension method that gets a value as an 
            <see cref="T:Int16"/>.
            </summary>
            <typeparam name="TKey">Type of the key.</typeparam>
            <typeparam name="TValue">Type of the value.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IDictionary{TKey, TValue}"/> to predicate.</param>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value if <paramref name="key"/> is not found.</param>
            <param name="provider">An <see cref="T:IFormatProvider"/> interface implementation that supplies 
            culture-specific formatting information.</param>
            <returns>The value associated with the specified <paramref name="key"/>, if found; otherwise, the 
            <paramref name="defaultValue"/>.</returns>
        </member>
        <member name="M:Aristocrat.Linq.ConvertibleDictionaryExtension.Value``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.UInt16)">
            <summary>
            An <see cref="T:System.Collections.Generic.IDictionary{TKey, TValue}"/> extension method that gets a value as an 
            <see cref="T:UInt16"/>.
            </summary>
            <typeparam name="TKey">Type of the key.</typeparam>
            <typeparam name="TValue">Type of the value.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IDictionary{TKey, TValue}"/> to predicate.</param>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value if <paramref name="key"/> is not found.</param>
            <returns>The value associated with the specified <paramref name="key"/>, if found; otherwise, the 
            <paramref name="defaultValue"/>.</returns>
        </member>
        <member name="M:Aristocrat.Linq.ConvertibleDictionaryExtension.Value``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.UInt16,System.IFormatProvider)">
            <summary>
            An <see cref="T:System.Collections.Generic.IDictionary{TKey, TValue}"/> extension method that gets a value as an 
            <see cref="T:UInt16"/>.
            </summary>
            <typeparam name="TKey">Type of the key.</typeparam>
            <typeparam name="TValue">Type of the value.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IDictionary{TKey, TValue}"/> to predicate.</param>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value if <paramref name="key"/> is not found.</param>
            <param name="provider">An <see cref="T:IFormatProvider"/> interface implementation that supplies 
            culture-specific formatting information.</param>
            <returns>The value associated with the specified <paramref name="key"/>, if found; otherwise, the 
            <paramref name="defaultValue"/>.</returns>
        </member>
        <member name="M:Aristocrat.Linq.ConvertibleDictionaryExtension.Value``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Int32)">
            <summary>
            An <see cref="T:System.Collections.Generic.IDictionary{TKey, TValue}"/> extension method that gets a value as an 
            <see cref="T:Int32"/>.
            </summary>
            <typeparam name="TKey">Type of the key.</typeparam>
            <typeparam name="TValue">Type of the value.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IDictionary{TKey, TValue}"/> to predicate.</param>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value if <paramref name="key"/> is not found.</param>
            <returns>The value associated with the specified <paramref name="key"/>, if found; otherwise, the 
            <paramref name="defaultValue"/>.</returns>
        </member>
        <member name="M:Aristocrat.Linq.ConvertibleDictionaryExtension.Value``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Int32,System.IFormatProvider)">
            <summary>
            An <see cref="T:System.Collections.Generic.IDictionary{TKey, TValue}"/> extension method that gets a value as an 
            <see cref="T:Int32"/>.
            </summary>
            <typeparam name="TKey">Type of the key.</typeparam>
            <typeparam name="TValue">Type of the value.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IDictionary{TKey, TValue}"/> to predicate.</param>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value if <paramref name="key"/> is not found.</param>
            <param name="provider">An <see cref="T:IFormatProvider"/> interface implementation that supplies 
            culture-specific formatting information.</param>
            <returns>The value associated with the specified <paramref name="key"/>, if found; otherwise, the 
            <paramref name="defaultValue"/>.</returns>
        </member>
        <member name="M:Aristocrat.Linq.ConvertibleDictionaryExtension.Value``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.UInt32)">
            <summary>
            An <see cref="T:System.Collections.Generic.IDictionary{TKey, TValue}"/> extension method that gets a value as an 
            <see cref="T:UInt32"/>.
            </summary>
            <typeparam name="TKey">Type of the key.</typeparam>
            <typeparam name="TValue">Type of the value.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IDictionary{TKey, TValue}"/> to predicate.</param>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value if <paramref name="key"/> is not found.</param>
            <returns>The value associated with the specified <paramref name="key"/>, if found; otherwise, the 
            <paramref name="defaultValue"/>.</returns>
        </member>
        <member name="M:Aristocrat.Linq.ConvertibleDictionaryExtension.Value``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.UInt32,System.IFormatProvider)">
            <summary>
            An <see cref="T:System.Collections.Generic.IDictionary{TKey, TValue}"/> extension method that gets a value as an 
            <see cref="T:UInt32"/>.
            </summary>
            <typeparam name="TKey">Type of the key.</typeparam>
            <typeparam name="TValue">Type of the value.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IDictionary{TKey, TValue}"/> to predicate.</param>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value if <paramref name="key"/> is not found.</param>
            <param name="provider">An <see cref="T:IFormatProvider"/> interface implementation that supplies 
            culture-specific formatting information.</param>
            <returns>The value associated with the specified <paramref name="key"/>, if found; otherwise, the 
            <paramref name="defaultValue"/>.</returns>
        </member>
        <member name="M:Aristocrat.Linq.ConvertibleDictionaryExtension.Value``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Int64)">
            <summary>
            An <see cref="T:System.Collections.Generic.IDictionary{TKey, TValue}"/> extension method that gets a value as an 
            <see cref="T:Int64"/>.
            </summary>
            <typeparam name="TKey">Type of the key.</typeparam>
            <typeparam name="TValue">Type of the value.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IDictionary{TKey, TValue}"/> to predicate.</param>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value if <paramref name="key"/> is not found.</param>
            <returns>The value associated with the specified <paramref name="key"/>, if found; otherwise, the 
            <paramref name="defaultValue"/>.</returns>
        </member>
        <member name="M:Aristocrat.Linq.ConvertibleDictionaryExtension.Value``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Int64,System.IFormatProvider)">
            <summary>
            An <see cref="T:System.Collections.Generic.IDictionary{TKey, TValue}"/> extension method that gets a value as an 
            <see cref="T:Int64"/>.
            </summary>
            <typeparam name="TKey">Type of the key.</typeparam>
            <typeparam name="TValue">Type of the value.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IDictionary{TKey, TValue}"/> to predicate.</param>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value if <paramref name="key"/> is not found.</param>
            <param name="provider">An <see cref="T:IFormatProvider"/> interface implementation that supplies 
            culture-specific formatting information.</param>
            <returns>The value associated with the specified <paramref name="key"/>, if found; otherwise, the 
            <paramref name="defaultValue"/>.</returns>
        </member>
        <member name="M:Aristocrat.Linq.ConvertibleDictionaryExtension.Value``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.UInt64)">
            <summary>
            An <see cref="T:System.Collections.Generic.IDictionary{TKey, TValue}"/> extension method that gets a value as an 
            <see cref="T:UInt64"/>.
            </summary>
            <typeparam name="TKey">Type of the key.</typeparam>
            <typeparam name="TValue">Type of the value.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IDictionary{TKey, TValue}"/> to predicate.</param>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value if <paramref name="key"/> is not found.</param>
            <returns>The value associated with the specified <paramref name="key"/>, if found; otherwise, the 
            <paramref name="defaultValue"/>.</returns>
        </member>
        <member name="M:Aristocrat.Linq.ConvertibleDictionaryExtension.Value``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.UInt64,System.IFormatProvider)">
            <summary>
            An <see cref="T:System.Collections.Generic.IDictionary{TKey, TValue}"/> extension method that gets a value as an 
            <see cref="T:UInt64"/>.
            </summary>
            <typeparam name="TKey">Type of the key.</typeparam>
            <typeparam name="TValue">Type of the value.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IDictionary{TKey, TValue}"/> to predicate.</param>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value if <paramref name="key"/> is not found.</param>
            <param name="provider">An <see cref="T:IFormatProvider"/> interface implementation that supplies 
            culture-specific formatting information.</param>
            <returns>The value associated with the specified <paramref name="key"/>, if found; otherwise, the 
            <paramref name="defaultValue"/>.</returns>
        </member>
        <member name="M:Aristocrat.Linq.ConvertibleDictionaryExtension.Value``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Single)">
            <summary>
            An <see cref="T:System.Collections.Generic.IDictionary{TKey, TValue}"/> extension method that gets a value as a 
            <see cref="T:Single"/>.
            </summary>
            <typeparam name="TKey">Type of the key.</typeparam>
            <typeparam name="TValue">Type of the value.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IDictionary{TKey, TValue}"/> to predicate.</param>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value if <paramref name="key"/> is not found.</param>
            <returns>The value associated with the specified <paramref name="key"/>, if found; otherwise, the 
            <paramref name="defaultValue"/>.</returns>
        </member>
        <member name="M:Aristocrat.Linq.ConvertibleDictionaryExtension.Value``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Single,System.IFormatProvider)">
            <summary>
            An <see cref="T:System.Collections.Generic.IDictionary{TKey, TValue}"/> extension method that gets a value as a 
            <see cref="T:Single"/>.
            </summary>
            <typeparam name="TKey">Type of the key.</typeparam>
            <typeparam name="TValue">Type of the value.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IDictionary{TKey, TValue}"/> to predicate.</param>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value if <paramref name="key"/> is not found.</param>
            <param name="provider">An <see cref="T:IFormatProvider"/> interface implementation that supplies 
            culture-specific formatting information.</param>
            <returns>The value associated with the specified <paramref name="key"/>, if found; otherwise, the 
            <paramref name="defaultValue"/>.</returns>
        </member>
        <member name="M:Aristocrat.Linq.ConvertibleDictionaryExtension.Value``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.String)">
            <summary>
            An <see cref="T:System.Collections.Generic.IDictionary{TKey, TValue}"/> extension method that gets a value as a 
            <see cref="T:System.String"/>.
            </summary>
            <typeparam name="TKey">Type of the key.</typeparam>
            <typeparam name="TValue">Type of the value.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IDictionary{TKey, TValue}"/> to predicate.</param>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value if <paramref name="key"/> is not found.</param>
            <returns>The value associated with the specified <paramref name="key"/>, if found; otherwise, the 
            <paramref name="defaultValue"/>.</returns>
        </member>
        <member name="M:Aristocrat.Linq.ConvertibleDictionaryExtension.Value``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.String,System.IFormatProvider)">
            <summary>
            An <see cref="T:System.Collections.Generic.IDictionary{TKey, TValue}"/> extension method that gets a value as a 
            <see cref="T:System.String"/>.
            </summary>
            <typeparam name="TKey">Type of the key.</typeparam>
            <typeparam name="TValue">Type of the value.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IDictionary{TKey, TValue}"/> to predicate.</param>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value if <paramref name="key"/> is not found.</param>
            <param name="provider">An <see cref="T:IFormatProvider"/> interface implementation that supplies 
            culture-specific formatting information.</param>
            <returns>The value associated with the specified <paramref name="key"/>, if found; otherwise, the 
            <paramref name="defaultValue"/>.</returns>
        </member>
        <member name="M:Aristocrat.Linq.ConvertibleDictionaryExtension.Value``3(System.Collections.Generic.IDictionary{``0,``1},``0,System.Converter{``1,``2},``2)">
            <summary>
            An <see cref="T:System.Collections.Generic.IDictionary{TKey, TValue}"/> extension method that gets a value as a 
            <typeparamref name="TResult"/>.
            </summary>
            <typeparam name="TKey">Type of the key.</typeparam>
            <typeparam name="TValue">Type of the value.</typeparam>
            <typeparam name="TResult">Type of the result</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IDictionary{TKey, TValue}"/> to predicate.</param>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value if <paramref name="key"/> is not found.</param>
            <param name="converter">A <see cref="T:System.Converter`2"/> delegate that converts a value from one type to 
            another type.</param>
            <returns>The value associated with the specified <paramref name="key"/>, if found; otherwise, the 
            <paramref name="defaultValue"/>.</returns>
        </member>
        <member name="T:Aristocrat.Linq.NetworkExtension">
            <summary>
            Provides a set of static methods for extending network helpers.
            </summary>
        </member>
        <member name="M:Aristocrat.Linq.NetworkExtension.IsInMulticastRange(System.Net.IPAddress)">
            <summary>
            An <see cref="T:System.Net.IPAddress"/> extension method that query if is in multicast range.
            </summary>
            <param name="source">The <see cref="T:System.Net.IPAddress"/> to predicate.</param>
            <returns>true if in multicast range, false if not.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>source</i> null.</exception>
        </member>
        <member name="M:Aristocrat.Linq.NetworkExtension.ResolveAddress(System.Uri)">
            <summary>
            An <see cref="T:System.Uri"/> extension method that resolve to an IP address.
            </summary>
            <param name="source">The <see cref="T:System.Uri"/> to predicate.</param>
            <returns>The <see cref="T:System.Net.IPAddress"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>source</i> null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when one or more arguments have unsupported or illegal values.</exception>
        </member>
        <member name="T:Aristocrat.Linq.ObjectExtension">
            <summary>
            Extends the <see cref="T:System.Object"/> object.
            </summary>
        </member>
        <member name="M:Aristocrat.Linq.ObjectExtension.GetField``1(System.Object,System.String)">
            <summary>
            Returns an inaccessable field of an <see cref="T:System.Object"/> through reflection.
            </summary>
            <typeparam name="TReturn">The return type to cast the output to.</typeparam>
            <param name="source">The type of the elements of <i>source</i>.</param>
            <param name="fieldName">The <see cref="T:System.String"/> containing the name of the data field to get.</param>
            <returns>The value of the field.</returns>
        </member>
        <member name="M:Aristocrat.Linq.ObjectExtension.GetField``2(System.Object,System.String)">
            <summary>
            Returns an inaccessable field of an <see cref="T:System.Object"/> through reflection.
            </summary>
            <typeparam name="TReturn">The return type to cast the output to.</typeparam>
            <typeparam name="TObject">The object type that implements the field.</typeparam>
            <param name="source">The type of the elements of <i>source</i>.</param>
            <param name="fieldName">The <see cref="T:System.String"/> containing the name of the data field to get.</param>
            <returns>The value of the field.</returns>
        </member>
        <member name="M:Aristocrat.Linq.ObjectExtension.GetProperty``1(System.Object,System.String)">
            <summary>
            Returns an inaccessable property of an <see cref="T:System.Object"/> through reflection.
            </summary>
            <typeparam name="TReturn">The return type to cast the output to.</typeparam>
            <param name="source">The type of the elements of <i>source</i>.</param>
            <param name="propertyName">The <see cref="T:System.String"/> containing the name of the property to get.</param>
            <returns>The value of the property.</returns>
        </member>
        <member name="M:Aristocrat.Linq.ObjectExtension.GetProperty``2(System.Object,System.String)">
            <summary>
            Returns an inaccessable property of an <see cref="T:System.Object"/> through reflection.
            </summary>
            <typeparam name="TReturn">The return type to cast the output to.</typeparam>
            <typeparam name="TObject">The object type that implements the property.</typeparam>
            <param name="source">The type of the elements of <i>source</i>.</param>
            <param name="propertyName">The <see cref="T:System.String"/> containing the name of the property to get.</param>
            <returns>The value of the property.</returns>
        </member>
        <member name="M:Aristocrat.Linq.ObjectExtension.CallMethod(System.Object,System.String,System.Object[])">
            <summary>
            Call an inaccessable method of an <see cref="T:System.Object"/> through reflection.
            </summary>
            <param name="source">The type of the elements of <i>source</i>.</param>
            <param name="methodName">The <see cref="T:System.String"/> containing the name of the method to get.</param>
            <param name="parameters">An argument list for the invoked method. This is an array of objects with the same 
            number, order, and type as the parameters of the method to be invoked. If there are no parameters, parameters 
            should be null. If the method represented by this instance takes a ref parameter, no special attribute is 
            required for that parameter in order to invoke the method or constructor using this function.</param>
        </member>
        <member name="M:Aristocrat.Linq.ObjectExtension.CallMethod``1(System.Object,System.String,System.Object[])">
            <summary>
            Call an inaccessable method of an <see cref="T:System.Object"/> through reflection.
            </summary>
            <typeparam name="TReturn">The return type to cast the output to.</typeparam>
            <param name="source">The type of the elements of <i>source</i>.</param>
            <param name="methodName">The <see cref="T:System.String"/> containing the name of the method to get.</param>
            <param name="parameters">An argument list for the invoked method. This is an array of objects with the same 
            number, order, and type as the parameters of the method to be invoked. If there are no parameters, parameters 
            should be null. If the method represented by this instance takes a ref parameter, no special attribute is 
            required for that parameter in order to invoke the method or constructor using this function.</param>
            <returns>The method return value.</returns>
        </member>
        <member name="M:Aristocrat.Linq.ObjectExtension.CallMethod``2(System.Object,System.String,System.Object[])">
            <summary>
            Call an inaccessable method of an <see cref="T:System.Object"/> through reflection.
            </summary>
            <typeparam name="TReturn">The return type to cast the output to.</typeparam>
            <typeparam name="TObject">The object type that implements the method.</typeparam>
            <param name="source">The type of the elements of <i>source</i>.</param>
            <param name="methodName">The <see cref="T:System.String"/> containing the name of the method to get.</param>
            <param name="parameters">An argument list for the invoked method. This is an array of objects with the same 
            number, order, and type as the parameters of the method to be invoked. If there are no parameters, parameters 
            should be null. If the method represented by this instance takes a ref parameter, no special attribute is 
            required for that parameter in order to invoke the method or constructor using this function.</param>
            <returns>The method return value.</returns>
        </member>
        <member name="T:Aristocrat.Linq.SchedulerExtension">
            <summary>
            A scheduler extension.
            Provides a set of static methods for extending <see cref="T:IScheduler"/>.
            </summary>
        </member>
        <member name="M:Aristocrat.Linq.SchedulerExtension.CreateTimer(Aristocrat.Threading.IScheduler,System.String,System.Threading.WaitCallback,System.Int32)">
            <summary>
            Create the timer. The caller should call <see cref="M:DestroyTimer"/> as soon as the timer is no longer needed.
            </summary>
            <param name="source">The <see cref="T:IScheduler"/> to predicate.</param>
            <param name="timerId">The timer identifier.</param>
            <param name="callback">A <see cref="T:System.Threading.WaitCallback"/> delegate representing a method to be executed.</param>
            <param name="interval">Specifies the interval between timer notifications, in milliseconds.</param>
            <returns><b>true</b> if successful; otherwise <b>false</b>.</returns>
        </member>
        <member name="M:Aristocrat.Linq.SchedulerExtension.CreateTimer(Aristocrat.Threading.IScheduler,System.String,System.Threading.WaitCallback,System.Int32,System.Boolean)">
            <summary>
            Create the timer. The caller should call <see cref="M:DestroyTimer"/> as soon as the timer is no longer needed.
            </summary>
            <param name="source">The <see cref="T:IScheduler"/> to predicate.</param>
            <param name="timerId">The timer identifier.</param>
            <param name="callback">A <see cref="T:System.Threading.WaitCallback"/> delegate representing a method to be executed.</param>
            <param name="interval">Specifies the interval between timer notifications, in milliseconds.</param>
            <param name="recurring">A flag indicating whether the timer should close after the first time the specified 
            interval elapses or if it is a recurring timer.</param>
            <returns><b>true</b> if successful; otherwise <b>false</b>.</returns>
        </member>
        <member name="M:Aristocrat.Linq.SchedulerExtension.CreateTimer(Aristocrat.Threading.IScheduler,System.String,System.Threading.WaitCallback,System.Int32,System.Boolean,System.Object)">
            <summary>
            Create the timer. The caller should call <see cref="M:DestroyTimer"/> as soon as the timer is no longer needed.
            </summary>
            <param name="source">The <see cref="T:IScheduler"/> to predicate.</param>
            <param name="timerId">The timer identifier.</param>
            <param name="callback">A <see cref="T:System.Threading.WaitCallback"/> delegate representing a method to be executed.</param>
            <param name="interval">Specifies the interval between timer notifications, in milliseconds.</param>
            <param name="recurring">A flag indicating whether the timer should close after the first time the specified 
            interval elapses or if it is a recurring timer.</param>
            <param name="state">An object containing information to be used by the <paramref name="callback"/>, or 
            <see langref="null"/>.</param>
            <returns><b>true</b> if successful; otherwise <b>false</b>.</returns>
        </member>
        <member name="M:Aristocrat.Linq.SchedulerExtension.DestroyTimer(Aristocrat.Threading.IScheduler,System.String)">
            <summary>
            Destroys the specified timer.
            </summary>
            <param name="source">The <see cref="T:IScheduler"/> to predicate.</param>
            <param name="timerId">The timer identifier.</param>
            <returns><b>true</b> if successful; otherwise <b>false</b>.</returns>
        </member>
        <member name="M:Aristocrat.Linq.SchedulerExtension.Cleanup(Aristocrat.Threading.IScheduler)">
            <summary>
            Clean up any timers for the given source.
            </summary>
            <param name="source">The <see cref="T:IScheduler"/> to predicate.</param>
        </member>
        <member name="T:Aristocrat.Linq.SqlTransactionExtension">
            <summary>
            Extends the <see cref="T:System.Data.SqlClient.SqlTransaction"/> object.
            </summary>
        </member>
        <member name="M:Aristocrat.Linq.SqlTransactionExtension.IsCompleted(System.Data.SqlClient.SqlTransaction)">
            <summary>
            Returns whether the transaction has been completed.
            </summary>
            <param name="source">The <see cref="T:System.Data.SqlClient.SqlTransaction"/> to predicate.</param>
            <returns>true if completed, false if not.</returns>
        </member>
        <member name="M:Aristocrat.Linq.SqlTransactionExtension.Rollback(System.Data.SqlClient.SqlTransaction,System.Exception)">
            <summary>
            Rolls back a transaction from a pending state.
            </summary>
            <param name="source">The <see cref="T:System.Data.SqlClient.SqlTransaction"/> to predicate.</param>
            <param name="exception">The <see cref="T:System.Exception"/> that occurred.</param>
        </member>
        <member name="T:Aristocrat.Linq.StringExtension">
            <summary>
            Extends the <see cref="T:System.String"/> object.
            </summary>
        </member>
        <member name="M:Aristocrat.Linq.StringExtension.IsMatch(System.String,System.String)">
            <summary>
            Indicates whether the specified pattern finds a match in the specified input string.
            </summary>
            <param name="source">The <see cref="T:System.String"/> to predicate.</param>
            <param name="pattern">The wildcard expression pattern to match.</param>
            <returns><b>true</b> if the wildcard expression finds a match; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Aristocrat.Linq.StringExtension.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Indicates whether the specified pattern finds a match in the specified input string.
            </summary>
            <param name="source">The <see cref="T:System.String"/> to predicate.</param>
            <param name="pattern">The wildcard expression pattern to match.</param>
            <param name="options">A bitwise combination of the enumeration values that provide options for matching.</param>
            <returns><b>true</b> if the wildcard expression finds a match; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Aristocrat.Linq.StringExtension.Split(System.String,System.String)">
            <summary>
            Searches the specified input string for all occurrences of a specified regular expression, using the specified 
            matching options.
            </summary>
            <param name="source">The <see cref="T:System.String"/> to predicate.</param>
            <param name="pattern">The wildcard expression pattern to match.</param>
            <returns>An array of strings.</returns>
        </member>
        <member name="M:Aristocrat.Linq.StringExtension.Split(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Searches the specified input string for all occurrences of a specified regular expression, using the specified 
            matching options.
            </summary>
            <param name="source">The <see cref="T:System.String"/> to predicate.</param>
            <param name="pattern">The wildcard expression pattern to match.</param>
            <param name="options">A bitwise combination of the enumeration values that provide options for matching.</param>
            <returns>An array of strings.</returns>
        </member>
        <member name="T:Aristocrat.Linq.SynchronizationContextExtension">
            <summary>
            Extends the <see cref="T:SynchronizationContext"/> object.
            </summary>
        </member>
        <member name="M:Aristocrat.Linq.SynchronizationContextExtension.BeginInvoke(System.Threading.SynchronizationContext,System.Action)">
            <summary>
            Executes the specified delegate asynchronously with the specified arguments, on the 
            <see cref="T:SynchronizationContext"/>.
            </summary>
            <param name="source">The <see cref="T:SynchronizationContext"/> to predicate.</param>
            <param name="action">A delegate to an <see cref="T:System.Action"/> method.</param>
            <returns>An <see cref="T:IAsyncResult"/> that represents the result of the <see cref="M:BeginInvoke"/> 
            operation.</returns>
        </member>
        <member name="M:Aristocrat.Linq.SynchronizationContextExtension.BeginInvoke``1(System.Threading.SynchronizationContext,System.Action{``0},``0)">
            <summary>
            Executes the specified delegate asynchronously with the specified arguments, on the 
            <see cref="T:SynchronizationContext"/>.
            </summary>
            <typeparam name="T">The type of the parameter of the method that the delegate encapsulates.</typeparam>
            <param name="source">The <see cref="T:SynchronizationContext"/> to predicate.</param>
            <param name="action">The action delegate to execute.</param>
            <param name="state">An object containing data to be used by the action delegate.</param>
            <returns>An <see cref="T:IAsyncResult"/> that represents the result of the <see cref="M:BeginInvoke"/> 
            operation.</returns>
        </member>
        <member name="M:Aristocrat.Linq.SynchronizationContextExtension.BeginInvoke``1(System.Threading.SynchronizationContext,System.Func{``0})">
            <summary>
            Executes the specified delegate asynchronously with the specified arguments, on the 
            <see cref="T:SynchronizationContext"/>.
            </summary>
            <typeparam name="TResult">The type of the result available.</typeparam>
            <param name="source">The <see cref="T:SynchronizationContext"/> to predicate.</param>
            <param name="function">The function that returns the future result.</param>
            <returns>An <see cref="T:IAsyncResult"/> that represents the result of the <see cref="M:BeginInvoke"/> 
            operation.</returns>
        </member>
        <member name="M:Aristocrat.Linq.SynchronizationContextExtension.BeginInvoke``2(System.Threading.SynchronizationContext,System.Func{``1},``0)">
            <summary>
            Executes the specified delegate asynchronously with the specified arguments, on the 
            <see cref="T:SynchronizationContext"/>.
            </summary>
            <typeparam name="T">The type of the parameter of the method that the delegate encapsulates.</typeparam>
            <typeparam name="TResult">The type of the result available.</typeparam>
            <param name="source">The <see cref="T:SynchronizationContext"/> to predicate.</param>
            <param name="function">The function that returns the future result.</param>
            <param name="state">An object containing data to be used by the action delegate.</param>
            <returns>An <see cref="T:IAsyncResult"/> that represents the result of the <see cref="M:BeginInvoke"/> 
            operation.</returns>
        </member>
        <member name="M:Aristocrat.Linq.SynchronizationContextExtension.BeginInvoke(System.Threading.SynchronizationContext,System.Delegate,System.Object[])">
            <summary>
            Executes the specified delegate asynchronously with the specified arguments, on the 
            <see cref="T:SynchronizationContext"/>.
            </summary>
            <param name="source">The <see cref="T:SynchronizationContext"/> to predicate.</param>
            <param name="method">A delegate to a method that takes parameters of the same number and type that are contained 
            in the <paramref name="args"/> parameter.</param>
            <param name="args">An array of objects to pass as arguments to the given method. This can be null if no 
            arguments are needed.</param>
            <returns>An <see cref="T:IAsyncResult"/> that represents the result of the <see cref="M:BeginInvoke"/> 
            operation.</returns>
        </member>
        <member name="M:Aristocrat.Linq.SynchronizationContextExtension.EndInvoke(System.Threading.SynchronizationContext,System.IAsyncResult)">
            <summary>
            Retrieves the return value of the asynchronous operation represented by the <see cref="T:IAsyncResult"/> passed.
            </summary>
            <param name="source">The <see cref="T:SynchronizationContext"/> to predicate.</param>
            <param name="result">The <see cref="T:IAsyncResult"/> that represents a specific invoke asynchronous 
            operation, returned when calling <see cref="M:BeginInvoke"/>.</param>
            <returns>The <see cref="T:System.Object"/> generated by the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="result"/> parameter value is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="result"/> object was not created by a preceding call 
            of the <see cref="M:BeginInvoke"/> method from the same control.</exception>
        </member>
        <member name="M:Aristocrat.Linq.SynchronizationContextExtension.EndInvoke``1(System.Threading.SynchronizationContext,Aristocrat.Threading.IAsyncResult{``0})">
            <summary>
            Retrieves the return value of the asynchronous operation represented by the <see cref="T:IAsyncResult"/> passed.
            </summary>
            <param name="source">The <see cref="T:SynchronizationContext"/> to predicate.</param>
            <param name="result">The <see cref="T:IAsyncResult"/> that represents a specific invoke asynchronous 
            operation, returned when calling <see cref="M:BeginInvoke"/>.</param>
            <typeparam name="TResult">The type of the result available.</typeparam>
            <returns>The return value of the method that this delegate encapsulates.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="result"/> parameter value is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="result"/> object was not created by a preceding call 
            of the <see cref="M:BeginInvoke"/> method from the same control.</exception>
        </member>
        <member name="M:Aristocrat.Linq.SynchronizationContextExtension.Invoke(System.Threading.SynchronizationContext,System.Action)">
            <summary>
            Executes the specified delegate, on the thread that owns the object, with the specified list of arguments.
            </summary>
            <param name="source">The <see cref="T:SynchronizationContext"/> to predicate.</param>
            <param name="action">A delegate to an <see cref="T:System.Action"/> method.</param>
        </member>
        <member name="M:Aristocrat.Linq.SynchronizationContextExtension.Invoke``1(System.Threading.SynchronizationContext,System.Action{``0},``0)">
            <summary>
            Executes the specified delegate, on the thread that owns the object, with the specified list of arguments.
            </summary>
            <typeparam name="TInput">The input type.</typeparam>
            <param name="source">The <see cref="T:SynchronizationContext"/> to predicate.</param>
            <param name="action">The action delegate to execute.</param>
            <param name="state">An object containing data to be used by the action delegate.</param>
        </member>
        <member name="M:Aristocrat.Linq.SynchronizationContextExtension.Invoke``1(System.Threading.SynchronizationContext,System.Func{``0})">
            <summary>
            Executes the specified delegate, on <see cref="T:SynchronizationContext"/>, with the specified list of 
            arguments.
            </summary>
            <param name="source">The <see cref="T:SynchronizationContext"/> to predicate.</param>
            <typeparam name="TResult">The type of the result available.</typeparam>
            <param name="function">The function that returns the future result.</param>
            <returns>The return value of the method that this delegate encapsulates.</returns>
        </member>
        <member name="M:Aristocrat.Linq.SynchronizationContextExtension.Invoke``2(System.Threading.SynchronizationContext,System.Func{``0,``1},``0)">
            <summary>
            Executes the specified delegate, on <see cref="T:SynchronizationContext"/>, with the specified list of 
            arguments.
            </summary>
            <typeparam name="TInput">The input type.</typeparam>
            <typeparam name="TResult">The type of the result available.</typeparam>
            <param name="source">The <see cref="T:SynchronizationContext"/> to predicate.</param>
            <param name="function">The function that returns the future result.</param>
            <param name="state">An object containing data to be used by the action delegate.</param>
            <returns>The return value of the method that this delegate encapsulates.</returns>
        </member>
        <member name="M:Aristocrat.Linq.SynchronizationContextExtension.Invoke(System.Threading.SynchronizationContext,System.Delegate,System.Object[])">
            <summary>
            Executes the specified delegate, on <see cref="T:SynchronizationContext"/>, with the specified list of 
            arguments.
            </summary>
            <param name="source">The <see cref="T:SynchronizationContext"/> to predicate.</param>
            <param name="method">A delegate to a method that takes parameters of the same number and type that are contained 
            in the <paramref name="args"/> parameter.</param>
            <param name="args">An array of objects to pass as arguments to the given method. This can be null if no 
            arguments are needed.</param>
            <returns>An <see cref="T:System.Object"/> that contains the return value from the delegate being invoked, or null if 
            the delegate has no return value.</returns>
        </member>
        <member name="T:Aristocrat.Linq.TimeZoneInfoExtension">
            <summary>
            Extends the TimeZoneInfo object.
            </summary>
        </member>
        <member name="M:Aristocrat.Linq.TimeZoneInfoExtension.IsDaylightSavingsEnabled(System.TimeZoneInfo)">
            <summary>
            Checks the registry to see if daylight savings has been enabled for current timezone.
            </summary>
            <param name="source">The <see cref="T:System.TimeZoneInfo"/> to predicate.</param>
            <returns><b>true</b> if daylight savings is enabled; otherwise <b>false</b>.</returns>
        </member>
        <member name="M:Aristocrat.Linq.TimeZoneInfoExtension.SetCurrentTimeZone(System.TimeZoneInfo)">
            <summary>
            Sets the current time zone.
            </summary>
            <param name="source">The <see cref="T:System.TimeZoneInfo"/> to predicate.</param>
        </member>
        <member name="M:Aristocrat.Linq.TimeZoneInfoExtension.SetCurrentTimeZone(System.TimeZoneInfo,System.Boolean)">
            <summary>
            Sets the current time zone.
            </summary>
            <param name="source">The <see cref="T:System.TimeZoneInfo"/> to predicate.</param>
            <param name="useDaylightSavings">Flag specifying if daylight savings should be set</param>
        </member>
        <member name="M:Aristocrat.Linq.TimeZoneInfoExtension.SetLocalAsCurrentTimeZone(System.TimeZoneInfo)">
            <summary>
            Gets the current timezone from the registry and then sets it through the OS. This is primarily used for systems 
            that use a registry filter and dont set the local timezone properly on startup.
            </summary>
            <param name="source">The <see cref="T:System.TimeZoneInfo"/> to predicate.</param>
        </member>
        <member name="T:Aristocrat.Linq.XElementExtension">
            <summary>
            Provides a set of static XElement helper methods.
            </summary>
        </member>
        <member name="M:Aristocrat.Linq.XElementExtension.IsName(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Boolean)">
            <summary>
            Returns a flag indication if the <see cref="T:XElement"/> name matches the <paramref name="name"/>. This method
            optionally ignores case.
            </summary>
            <param name="source">An <see cref="T:System.Xml.Linq.XElement"/> to predicate.</param>
            <param name="name">The <see cref="T:XName"/> to match.</param>
            <param name="ignoreCase"><b>true</b> to ignore case during the comparison; otherwise, <b>false</b>.</param>
            <returns><b>true</b> if the matches otherwise <b>false</b>. </returns>
        </member>
        <member name="M:Aristocrat.Linq.XElementExtension.Attribute(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Boolean)">
            <summary>
            Returns the <see cref="T:XAttribute"/> of this <see cref="T:XElement"/> that has the specified 
            <see cref="T:XName"/>.
            </summary>
            <param name="source">An <see cref="T:System.Xml.Linq.XElement"/> to predicate.</param>
            <param name="name">The <see cref="T:XName"/> to match.</param>
            <param name="ignoreCase"><b>true</b> to ignore case during the comparison; otherwise, <b>false</b>.</param>
            <returns>A <see cref="T:XAttribute"/> that matches the specified <see cref="T:XName"/>, or null.</returns>
        </member>
        <member name="M:Aristocrat.Linq.XElementExtension.Attributes(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Boolean)">
            <summary>
            Gets the first (in document order) child element with the specified <see cref="T:XName"/>.
            </summary>
            <param name="source">An <see cref="T:XElement"/> to predicate.</param>
            <param name="name">The <see cref="T:XName"/> to match.</param>
            <param name="ignoreCase"><b>true</b> to ignore case during the comparison; otherwise, <b>false</b>.</param>
            <returns>A collection <see cref="T:XAttribute"/>s that matches the specified <see cref="T:System.Xml.Linq.XName"/>.</returns>
        </member>
        <member name="M:Aristocrat.Linq.XElementExtension.AttributeValue(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Boolean)">
            <summary>
            Returns the <see cref="T:System.Xml.Linq.XAttribute"/> Value of this <see cref="T:System.Xml.Linq.XElement"/> that has the specified 
            <see cref="T:System.Xml.Linq.XName"/>. If no <see cref="T:System.Xml.Linq.XAttribute"/> is found the <paramref name="defaultValue"/> is returned.
            </summary>
            <param name="source">An <see cref="T:System.Xml.Linq.XElement"/> to predicate.</param>
            <param name="name">The <see cref="T:System.Xml.Linq.XName"/> of the <see cref="T:System.Xml.Linq.XAttribute"/> to get.</param>
            <param name="defaultValue">The default value to return if no <see cref="T:System.Xml.Linq.XAttribute"/> is found.</param>
            <returns>The value of the <see cref="T:System.Xml.Linq.XAttribute"/> specified; otherwise <paramref name="defaultValue"/>.
            </returns>
        </member>
        <member name="M:Aristocrat.Linq.XElementExtension.AttributeValue(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Boolean,System.Boolean)">
            <summary>
            Returns the <see cref="T:System.Xml.Linq.XAttribute"/> Value of this <see cref="T:System.Xml.Linq.XElement"/> that has the specified 
            <see cref="T:System.Xml.Linq.XName"/>. If no <see cref="T:System.Xml.Linq.XAttribute"/> is found the <paramref name="defaultValue"/> is returned.
            </summary>
            <param name="source">An <see cref="T:System.Xml.Linq.XElement"/> to predicate.</param>
            <param name="name">The <see cref="T:System.Xml.Linq.XName"/> of the <see cref="T:System.Xml.Linq.XAttribute"/> to get.</param>
            <param name="defaultValue">The default value to return if no <see cref="T:System.Xml.Linq.XAttribute"/> is found.</param>
            <param name="ignoreCase"><b>true</b> to ignore case during the comparison; otherwise, <b>false</b>.</param>
            <returns>The value of the <see cref="T:System.Xml.Linq.XAttribute"/> specified; otherwise <paramref name="defaultValue"/>.
            </returns>
        </member>
        <member name="M:Aristocrat.Linq.XElementExtension.AttributeValue(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Nullable{System.Boolean})">
            <summary>
            Returns the <see cref="T:System.Xml.Linq.XAttribute"/> Value of this <see cref="T:System.Xml.Linq.XElement"/> that has the specified 
            <see cref="T:System.Xml.Linq.XName"/>. If no <see cref="T:System.Xml.Linq.XAttribute"/> is found the <paramref name="defaultValue"/> is returned.
            </summary>
            <param name="source">An <see cref="T:System.Xml.Linq.XElement"/> to predicate.</param>
            <param name="name">The <see cref="T:System.Xml.Linq.XName"/> of the <see cref="T:System.Xml.Linq.XAttribute"/> to get.</param>
            <param name="defaultValue">The default value to return if no <see cref="T:System.Xml.Linq.XAttribute"/> is found.</param>
            <returns>The value of the <see cref="T:System.Xml.Linq.XAttribute"/> specified; otherwise <paramref name="defaultValue"/>.
            </returns>
        </member>
        <member name="M:Aristocrat.Linq.XElementExtension.AttributeValue(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            Returns the <see cref="T:System.Xml.Linq.XAttribute"/> Value of this <see cref="T:System.Xml.Linq.XElement"/> that has the specified 
            <see cref="T:System.Xml.Linq.XName"/>. If no <see cref="T:System.Xml.Linq.XAttribute"/> is found the <paramref name="defaultValue"/> is returned.
            </summary>
            <param name="source">An <see cref="T:System.Xml.Linq.XElement"/> to predicate.</param>
            <param name="name">The <see cref="T:System.Xml.Linq.XName"/> of the <see cref="T:System.Xml.Linq.XAttribute"/> to get.</param>
            <param name="defaultValue">The default value to return if no <see cref="T:System.Xml.Linq.XAttribute"/> is found.</param>
            <param name="ignoreCase"><b>true</b> to ignore case during the comparison; otherwise, <b>false</b>.</param>
            <returns>The value of the <see cref="T:System.Xml.Linq.XAttribute"/> specified; otherwise <paramref name="defaultValue"/>.
            </returns>
        </member>
        <member name="M:Aristocrat.Linq.XElementExtension.AttributeValue(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.DateTime)">
            <summary>
            Returns the <see cref="T:System.Xml.Linq.XAttribute"/> Value of this <see cref="T:System.Xml.Linq.XElement"/> that has the specified 
            <see cref="T:System.Xml.Linq.XName"/>. If no <see cref="T:System.Xml.Linq.XAttribute"/> is found the <paramref name="defaultValue"/> is returned.
            </summary>
            <param name="source">An <see cref="T:System.Xml.Linq.XElement"/> to predicate.</param>
            <param name="name">The <see cref="T:System.Xml.Linq.XName"/> of the <see cref="T:System.Xml.Linq.XAttribute"/> to get.</param>
            <param name="defaultValue">The default value to return if no <see cref="T:System.Xml.Linq.XAttribute"/> is found.</param>
            <returns>The value of the <see cref="T:System.Xml.Linq.XAttribute"/> specified; otherwise <paramref name="defaultValue"/>.
            </returns>
        </member>
        <member name="M:Aristocrat.Linq.XElementExtension.AttributeValue(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.DateTime,System.Boolean)">
            <summary>
            Returns the <see cref="T:System.Xml.Linq.XAttribute"/> Value of this <see cref="T:System.Xml.Linq.XElement"/> that has the specified 
            <see cref="T:System.Xml.Linq.XName"/>. If no <see cref="T:System.Xml.Linq.XAttribute"/> is found the <paramref name="defaultValue"/> is returned.
            </summary>
            <param name="source">An <see cref="T:System.Xml.Linq.XElement"/> to predicate.</param>
            <param name="name">The <see cref="T:System.Xml.Linq.XName"/> of the <see cref="T:System.Xml.Linq.XAttribute"/> to get.</param>
            <param name="defaultValue">The default value to return if no <see cref="T:System.Xml.Linq.XAttribute"/> is found.</param>
            <param name="ignoreCase"><b>true</b> to ignore case during the comparison; otherwise, <b>false</b>.</param>
            <returns>The value of the <see cref="T:System.Xml.Linq.XAttribute"/> specified; otherwise <paramref name="defaultValue"/>.
            </returns>
        </member>
        <member name="M:Aristocrat.Linq.XElementExtension.AttributeValue(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Nullable{System.DateTime})">
            <summary>
            Returns the <see cref="T:System.Xml.Linq.XAttribute"/> Value of this <see cref="T:System.Xml.Linq.XElement"/> that has the specified 
            <see cref="T:System.Xml.Linq.XName"/>. If no <see cref="T:System.Xml.Linq.XAttribute"/> is found the <paramref name="defaultValue"/> is returned.
            </summary>
            <param name="source">An <see cref="T:System.Xml.Linq.XElement"/> to predicate.</param>
            <param name="name">The <see cref="T:System.Xml.Linq.XName"/> of the <see cref="T:System.Xml.Linq.XAttribute"/> to get.</param>
            <param name="defaultValue">The default value to return if no <see cref="T:System.Xml.Linq.XAttribute"/> is found.</param>
            <returns>The value of the <see cref="T:System.Xml.Linq.XAttribute"/> specified; otherwise <paramref name="defaultValue"/>.
            </returns>
        </member>
        <member name="M:Aristocrat.Linq.XElementExtension.AttributeValue(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Nullable{System.DateTime},System.Boolean)">
            <summary>
            Returns the <see cref="T:System.Xml.Linq.XAttribute"/> Value of this <see cref="T:System.Xml.Linq.XElement"/> that has the specified 
            <see cref="T:System.Xml.Linq.XName"/>. If no <see cref="T:System.Xml.Linq.XAttribute"/> is found the <paramref name="defaultValue"/> is returned.
            </summary>
            <param name="source">An <see cref="T:System.Xml.Linq.XElement"/> to predicate.</param>
            <param name="name">The <see cref="T:System.Xml.Linq.XName"/> of the <see cref="T:System.Xml.Linq.XAttribute"/> to get.</param>
            <param name="defaultValue">The default value to return if no <see cref="T:System.Xml.Linq.XAttribute"/> is found.</param>
            <param name="ignoreCase"><b>true</b> to ignore case during the comparison; otherwise, <b>false</b>.</param>
            <returns>The value of the <see cref="T:System.Xml.Linq.XAttribute"/> specified; otherwise <paramref name="defaultValue"/>.
            </returns>
        </member>
        <member name="M:Aristocrat.Linq.XElementExtension.AttributeValue(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.DateTimeOffset)">
            <summary>
            Returns the <see cref="T:System.Xml.Linq.XAttribute"/> Value of this <see cref="T:System.Xml.Linq.XElement"/> that has the specified 
            <see cref="T:System.Xml.Linq.XName"/>. If no <see cref="T:System.Xml.Linq.XAttribute"/> is found the <paramref name="defaultValue"/> is returned.
            </summary>
            <param name="source">An <see cref="T:System.Xml.Linq.XElement"/> to predicate.</param>
            <param name="name">The <see cref="T:System.Xml.Linq.XName"/> of the <see cref="T:System.Xml.Linq.XAttribute"/> to get.</param>
            <param name="defaultValue">The default value to return if no <see cref="T:System.Xml.Linq.XAttribute"/> is found.</param>
            <returns>The value of the <see cref="T:System.Xml.Linq.XAttribute"/> specified; otherwise <paramref name="defaultValue"/>.
            </returns>
        </member>
        <member name="M:Aristocrat.Linq.XElementExtension.AttributeValue(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.DateTimeOffset,System.Boolean)">
            <summary>
            Returns the <see cref="T:System.Xml.Linq.XAttribute"/> Value of this <see cref="T:System.Xml.Linq.XElement"/> that has the specified 
            <see cref="T:System.Xml.Linq.XName"/>. If no <see cref="T:System.Xml.Linq.XAttribute"/> is found the <paramref name="defaultValue"/> is returned.
            </summary>
            <param name="source">An <see cref="T:System.Xml.Linq.XElement"/> to predicate.</param>
            <param name="name">The <see cref="T:System.Xml.Linq.XName"/> of the <see cref="T:System.Xml.Linq.XAttribute"/> to get.</param>
            <param name="defaultValue">The default value to return if no <see cref="T:System.Xml.Linq.XAttribute"/> is found.</param>
            <param name="ignoreCase"><b>true</b> to ignore case during the comparison; otherwise, <b>false</b>.</param>
            <returns>The value of the <see cref="T:System.Xml.Linq.XAttribute"/> specified; otherwise <paramref name="defaultValue"/>.
            </returns>
        </member>
        <member name="M:Aristocrat.Linq.XElementExtension.AttributeValue(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Nullable{System.DateTimeOffset})">
            <summary>
            Returns the <see cref="T:System.Xml.Linq.XAttribute"/> Value of this <see cref="T:System.Xml.Linq.XElement"/> that has the specified 
            <see cref="T:System.Xml.Linq.XName"/>. If no <see cref="T:System.Xml.Linq.XAttribute"/> is found the <paramref name="defaultValue"/> is returned.
            </summary>
            <param name="source">An <see cref="T:System.Xml.Linq.XElement"/> to predicate.</param>
            <param name="name">The <see cref="T:System.Xml.Linq.XName"/> of the <see cref="T:System.Xml.Linq.XAttribute"/> to get.</param>
            <param name="defaultValue">The default value to return if no <see cref="T:System.Xml.Linq.XAttribute"/> is found.</param>
            <returns>The value of the <see cref="T:System.Xml.Linq.XAttribute"/> specified; otherwise <paramref name="defaultValue"/>.
            </returns>
        </member>
        <member name="M:Aristocrat.Linq.XElementExtension.AttributeValue(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Nullable{System.DateTimeOffset},System.Boolean)">
            <summary>
            Returns the <see cref="T:System.Xml.Linq.XAttribute"/> Value of this <see cref="T:System.Xml.Linq.XElement"/> that has the specified 
            <see cref="T:System.Xml.Linq.XName"/>. If no <see cref="T:System.Xml.Linq.XAttribute"/> is found the <paramref name="defaultValue"/> is returned.
            </summary>
            <param name="source">An <see cref="T:System.Xml.Linq.XElement"/> to predicate.</param>
            <param name="name">The <see cref="T:System.Xml.Linq.XName"/> of the <see cref="T:System.Xml.Linq.XAttribute"/> to get.</param>
            <param name="defaultValue">The default value to return if no <see cref="T:System.Xml.Linq.XAttribute"/> is found.</param>
            <param name="ignoreCase"><b>true</b> to ignore case during the comparison; otherwise, <b>false</b>.</param>
            <returns>The value of the <see cref="T:System.Xml.Linq.XAttribute"/> specified; otherwise <paramref name="defaultValue"/>.
            </returns>
        </member>
        <member name="M:Aristocrat.Linq.XElementExtension.AttributeValue(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Double)">
            <summary>
            Returns the <see cref="T:System.Xml.Linq.XAttribute"/> Value of this <see cref="T:System.Xml.Linq.XElement"/> that has the specified 
            <see cref="T:System.Xml.Linq.XName"/>. If no <see cref="T:System.Xml.Linq.XAttribute"/> is found the <paramref name="defaultValue"/> is returned.
            </summary>
            <param name="source">An <see cref="T:System.Xml.Linq.XElement"/> to predicate.</param>
            <param name="name">The <see cref="T:System.Xml.Linq.XName"/> of the <see cref="T:System.Xml.Linq.XAttribute"/> to get.</param>
            <param name="defaultValue">The default value to return if no <see cref="T:System.Xml.Linq.XAttribute"/> is found.</param>
            <returns>The value of the <see cref="T:System.Xml.Linq.XAttribute"/> specified; otherwise <paramref name="defaultValue"/>.
            </returns>
        </member>
        <member name="M:Aristocrat.Linq.XElementExtension.AttributeValue(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Double,System.Boolean)">
            <summary>
            Returns the <see cref="T:System.Xml.Linq.XAttribute"/> Value of this <see cref="T:System.Xml.Linq.XElement"/> that has the specified 
            <see cref="T:System.Xml.Linq.XName"/>. If no <see cref="T:System.Xml.Linq.XAttribute"/> is found the <paramref name="defaultValue"/> is returned.
            </summary>
            <param name="source">An <see cref="T:System.Xml.Linq.XElement"/> to predicate.</param>
            <param name="name">The <see cref="T:System.Xml.Linq.XName"/> of the <see cref="T:System.Xml.Linq.XAttribute"/> to get.</param>
            <param name="defaultValue">The default value to return if no <see cref="T:System.Xml.Linq.XAttribute"/> is found.</param>
            <param name="ignoreCase"><b>true</b> to ignore case during the comparison; otherwise, <b>false</b>.</param>
            <returns>The value of the <see cref="T:System.Xml.Linq.XAttribute"/> specified; otherwise <paramref name="defaultValue"/>.
            </returns>
        </member>
        <member name="M:Aristocrat.Linq.XElementExtension.AttributeValue(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Nullable{System.Double})">
            <summary>
            Returns the <see cref="T:System.Xml.Linq.XAttribute"/> Value of this <see cref="T:System.Xml.Linq.XElement"/> that has the specified 
            <see cref="T:System.Xml.Linq.XName"/>. If no <see cref="T:System.Xml.Linq.XAttribute"/> is found the <paramref name="defaultValue"/> is returned.
            </summary>
            <param name="source">An <see cref="T:System.Xml.Linq.XElement"/> to predicate.</param>
            <param name="name">The <see cref="T:System.Xml.Linq.XName"/> of the <see cref="T:System.Xml.Linq.XAttribute"/> to get.</param>
            <param name="defaultValue">The default value to return if no <see cref="T:System.Xml.Linq.XAttribute"/> is found.</param>
            <returns>The value of the <see cref="T:System.Xml.Linq.XAttribute"/> specified; otherwise <paramref name="defaultValue"/>.
            </returns>
        </member>
        <member name="M:Aristocrat.Linq.XElementExtension.AttributeValue(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Nullable{System.Double},System.Boolean)">
            <summary>
            Returns the <see cref="T:System.Xml.Linq.XAttribute"/> Value of this <see cref="T:System.Xml.Linq.XElement"/> that has the specified 
            <see cref="T:System.Xml.Linq.XName"/>. If no <see cref="T:System.Xml.Linq.XAttribute"/> is found the <paramref name="defaultValue"/> is returned.
            </summary>
            <param name="source">An <see cref="T:System.Xml.Linq.XElement"/> to predicate.</param>
            <param name="name">The <see cref="T:System.Xml.Linq.XName"/> of the <see cref="T:System.Xml.Linq.XAttribute"/> to get.</param>
            <param name="defaultValue">The default value to return if no <see cref="T:System.Xml.Linq.XAttribute"/> is found.</param>
            <param name="ignoreCase"><b>true</b> to ignore case during the comparison; otherwise, <b>false</b>.</param>
            <returns>The value of the <see cref="T:System.Xml.Linq.XAttribute"/> specified; otherwise <paramref name="defaultValue"/>.
            </returns>
        </member>
        <member name="M:Aristocrat.Linq.XElementExtension.AttributeValue(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Decimal)">
            <summary>
            Returns the <see cref="T:System.Xml.Linq.XAttribute"/> Value of this <see cref="T:System.Xml.Linq.XElement"/> that has the specified 
            <see cref="T:System.Xml.Linq.XName"/>. If no <see cref="T:System.Xml.Linq.XAttribute"/> is found the <paramref name="defaultValue"/> is returned.
            </summary>
            <param name="source">An <see cref="T:System.Xml.Linq.XElement"/> to predicate.</param>
            <param name="name">The <see cref="T:System.Xml.Linq.XName"/> of the <see cref="T:System.Xml.Linq.XAttribute"/> to get.</param>
            <param name="defaultValue">The default value to return if no <see cref="T:System.Xml.Linq.XAttribute"/> is found.</param>
            <returns>The value of the <see cref="T:System.Xml.Linq.XAttribute"/> specified; otherwise <paramref name="defaultValue"/>.
            </returns>
        </member>
        <member name="M:Aristocrat.Linq.XElementExtension.AttributeValue(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Decimal,System.Boolean)">
            <summary>
            Returns the <see cref="T:System.Xml.Linq.XAttribute"/> Value of this <see cref="T:System.Xml.Linq.XElement"/> that has the specified 
            <see cref="T:System.Xml.Linq.XName"/>. If no <see cref="T:System.Xml.Linq.XAttribute"/> is found the <paramref name="defaultValue"/> is returned.
            </summary>
            <param name="source">An <see cref="T:System.Xml.Linq.XElement"/> to predicate.</param>
            <param name="name">The <see cref="T:System.Xml.Linq.XName"/> of the <see cref="T:System.Xml.Linq.XAttribute"/> to get.</param>
            <param name="defaultValue">The default value to return if no <see cref="T:System.Xml.Linq.XAttribute"/> is found.</param>
            <param name="ignoreCase"><b>true</b> to ignore case during the comparison; otherwise, <b>false</b>.</param>
            <returns>The value of the <see cref="T:System.Xml.Linq.XAttribute"/> specified; otherwise <paramref name="defaultValue"/>.
            </returns>
        </member>
        <member name="M:Aristocrat.Linq.XElementExtension.AttributeValue(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Nullable{System.Decimal})">
            <summary>
            Returns the <see cref="T:System.Xml.Linq.XAttribute"/> Value of this <see cref="T:System.Xml.Linq.XElement"/> that has the specified 
            <see cref="T:System.Xml.Linq.XName"/>. If no <see cref="T:System.Xml.Linq.XAttribute"/> is found the <paramref name="defaultValue"/> is returned.
            </summary>
            <param name="source">An <see cref="T:System.Xml.Linq.XElement"/> to predicate.</param>
            <param name="name">The <see cref="T:System.Xml.Linq.XName"/> of the <see cref="T:System.Xml.Linq.XAttribute"/> to get.</param>
            <param name="defaultValue">The default value to return if no <see cref="T:System.Xml.Linq.XAttribute"/> is found.</param>
            <returns>The value of the <see cref="T:System.Xml.Linq.XAttribute"/> specified; otherwise <paramref name="defaultValue"/>.
            </returns>
        </member>
        <member name="M:Aristocrat.Linq.XElementExtension.AttributeValue(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Nullable{System.Decimal},System.Boolean)">
            <summary>
            Returns the <see cref="T:System.Xml.Linq.XAttribute"/> Value of this <see cref="T:System.Xml.Linq.XElement"/> that has the specified 
            <see cref="T:System.Xml.Linq.XName"/>. If no <see cref="T:System.Xml.Linq.XAttribute"/> is found the <paramref name="defaultValue"/> is returned.
            </summary>
            <param name="source">An <see cref="T:System.Xml.Linq.XElement"/> to predicate.</param>
            <param name="name">The <see cref="T:System.Xml.Linq.XName"/> of the <see cref="T:System.Xml.Linq.XAttribute"/> to get.</param>
            <param name="defaultValue">The default value to return if no <see cref="T:System.Xml.Linq.XAttribute"/> is found.</param>
            <param name="ignoreCase"><b>true</b> to ignore case during the comparison; otherwise, <b>false</b>.</param>
            <returns>The value of the <see cref="T:System.Xml.Linq.XAttribute"/> specified; otherwise <paramref name="defaultValue"/>.
            </returns>
        </member>
        <member name="M:Aristocrat.Linq.XElementExtension.AttributeValue(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Single)">
            <summary>
            Returns the <see cref="T:System.Xml.Linq.XAttribute"/> Value of this <see cref="T:System.Xml.Linq.XElement"/> that has the specified 
            <see cref="T:System.Xml.Linq.XName"/>. If no <see cref="T:System.Xml.Linq.XAttribute"/> is found the <paramref name="defaultValue"/> is returned.
            </summary>
            <param name="source">An <see cref="T:System.Xml.Linq.XElement"/> to predicate.</param>
            <param name="name">The <see cref="T:System.Xml.Linq.XName"/> of the <see cref="T:System.Xml.Linq.XAttribute"/> to get.</param>
            <param name="defaultValue">The default value to return if no <see cref="T:System.Xml.Linq.XAttribute"/> is found.</param>
            <returns>The value of the <see cref="T:System.Xml.Linq.XAttribute"/> specified; otherwise <paramref name="defaultValue"/>.
            </returns>
        </member>
        <member name="M:Aristocrat.Linq.XElementExtension.AttributeValue(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Single,System.Boolean)">
            <summary>
            Returns the <see cref="T:System.Xml.Linq.XAttribute"/> Value of this <see cref="T:System.Xml.Linq.XElement"/> that has the specified 
            <see cref="T:System.Xml.Linq.XName"/>. If no <see cref="T:System.Xml.Linq.XAttribute"/> is found the <paramref name="defaultValue"/> is returned.
            </summary>
            <param name="source">An <see cref="T:System.Xml.Linq.XElement"/> to predicate.</param>
            <param name="name">The <see cref="T:System.Xml.Linq.XName"/> of the <see cref="T:System.Xml.Linq.XAttribute"/> to get.</param>
            <param name="defaultValue">The default value to return if no <see cref="T:System.Xml.Linq.XAttribute"/> is found.</param>
            <param name="ignoreCase"><b>true</b> to ignore case during the comparison; otherwise, <b>false</b>.</param>
            <returns>The value of the <see cref="T:System.Xml.Linq.XAttribute"/> specified; otherwise <paramref name="defaultValue"/>.
            </returns>
        </member>
        <member name="M:Aristocrat.Linq.XElementExtension.AttributeValue(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Nullable{System.Single})">
            <summary>
            Returns the <see cref="T:System.Xml.Linq.XAttribute"/> Value of this <see cref="T:System.Xml.Linq.XElement"/> that has the specified 
            <see cref="T:System.Xml.Linq.XName"/>. If no <see cref="T:System.Xml.Linq.XAttribute"/> is found the <paramref name="defaultValue"/> is returned.
            </summary>
            <param name="source">An <see cref="T:System.Xml.Linq.XElement"/> to predicate.</param>
            <param name="name">The <see cref="T:System.Xml.Linq.XName"/> of the <see cref="T:System.Xml.Linq.XAttribute"/> to get.</param>
            <param name="defaultValue">The default value to return if no <see cref="T:System.Xml.Linq.XAttribute"/> is found.</param>
            <returns>The value of the <see cref="T:System.Xml.Linq.XAttribute"/> specified; otherwise <paramref name="defaultValue"/>.
            </returns>
        </member>
        <member name="M:Aristocrat.Linq.XElementExtension.AttributeValue(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Nullable{System.Single},System.Boolean)">
            <summary>
            Returns the <see cref="T:System.Xml.Linq.XAttribute"/> Value of this <see cref="T:System.Xml.Linq.XElement"/> that has the specified 
            <see cref="T:System.Xml.Linq.XName"/>. If no <see cref="T:System.Xml.Linq.XAttribute"/> is found the <paramref name="defaultValue"/> is returned.
            </summary>
            <param name="source">An <see cref="T:System.Xml.Linq.XElement"/> to predicate.</param>
            <param name="name">The <see cref="T:System.Xml.Linq.XName"/> of the <see cref="T:System.Xml.Linq.XAttribute"/> to get.</param>
            <param name="defaultValue">The default value to return if no <see cref="T:System.Xml.Linq.XAttribute"/> is found.</param>
            <param name="ignoreCase"><b>true</b> to ignore case during the comparison; otherwise, <b>false</b>.</param>
            <returns>The value of the <see cref="T:System.Xml.Linq.XAttribute"/> specified; otherwise <paramref name="defaultValue"/>.
            </returns>
        </member>
        <member name="M:Aristocrat.Linq.XElementExtension.AttributeValue(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Guid)">
            <summary>
            Returns the <see cref="T:System.Xml.Linq.XAttribute"/> Value of this <see cref="T:System.Xml.Linq.XElement"/> that has the specified 
            <see cref="T:System.Xml.Linq.XName"/>. If no <see cref="T:System.Xml.Linq.XAttribute"/> is found the <paramref name="defaultValue"/> is returned.
            </summary>
            <param name="source">An <see cref="T:System.Xml.Linq.XElement"/> to predicate.</param>
            <param name="name">The <see cref="T:System.Xml.Linq.XName"/> of the <see cref="T:System.Xml.Linq.XAttribute"/> to get.</param>
            <param name="defaultValue">The default value to return if no <see cref="T:System.Xml.Linq.XAttribute"/> is found.</param>
            <returns>The value of the <see cref="T:System.Xml.Linq.XAttribute"/> specified; otherwise <paramref name="defaultValue"/>.
            </returns>
        </member>
        <member name="M:Aristocrat.Linq.XElementExtension.AttributeValue(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Guid,System.Boolean)">
            <summary>
            Returns the <see cref="T:System.Xml.Linq.XAttribute"/> Value of this <see cref="T:System.Xml.Linq.XElement"/> that has the specified 
            <see cref="T:System.Xml.Linq.XName"/>. If no <see cref="T:System.Xml.Linq.XAttribute"/> is found the <paramref name="defaultValue"/> is returned.
            </summary>
            <param name="source">An <see cref="T:System.Xml.Linq.XElement"/> to predicate.</param>
            <param name="name">The <see cref="T:System.Xml.Linq.XName"/> of the <see cref="T:System.Xml.Linq.XAttribute"/> to get.</param>
            <param name="defaultValue">The default value to return if no <see cref="T:System.Xml.Linq.XAttribute"/> is found.</param>
            <param name="ignoreCase"><b>true</b> to ignore case during the comparison; otherwise, <b>false</b>.</param>
            <returns>The value of the <see cref="T:System.Xml.Linq.XAttribute"/> specified; otherwise <paramref name="defaultValue"/>.
            </returns>
        </member>
        <member name="M:Aristocrat.Linq.XElementExtension.AttributeValue(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Nullable{System.Guid})">
            <summary>
            Returns the <see cref="T:System.Xml.Linq.XAttribute"/> Value of this <see cref="T:System.Xml.Linq.XElement"/> that has the specified 
            <see cref="T:System.Xml.Linq.XName"/>. If no <see cref="T:System.Xml.Linq.XAttribute"/> is found the <paramref name="defaultValue"/> is returned.
            </summary>
            <param name="source">An <see cref="T:System.Xml.Linq.XElement"/> to predicate.</param>
            <param name="name">The <see cref="T:System.Xml.Linq.XName"/> of the <see cref="T:System.Xml.Linq.XAttribute"/> to get.</param>
            <param name="defaultValue">The default value to return if no <see cref="T:System.Xml.Linq.XAttribute"/> is found.</param>
            <returns>The value of the <see cref="T:System.Xml.Linq.XAttribute"/> specified; otherwise <paramref name="defaultValue"/>.
            </returns>
        </member>
        <member name="M:Aristocrat.Linq.XElementExtension.AttributeValue(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Nullable{System.Guid},System.Boolean)">
            <summary>
            Returns the <see cref="T:System.Xml.Linq.XAttribute"/> Value of this <see cref="T:System.Xml.Linq.XElement"/> that has the specified 
            <see cref="T:System.Xml.Linq.XName"/>. If no <see cref="T:System.Xml.Linq.XAttribute"/> is found the <paramref name="defaultValue"/> is returned.
            </summary>
            <param name="source">An <see cref="T:System.Xml.Linq.XElement"/> to predicate.</param>
            <param name="name">The <see cref="T:System.Xml.Linq.XName"/> of the <see cref="T:System.Xml.Linq.XAttribute"/> to get.</param>
            <param name="defaultValue">The default value to return if no <see cref="T:System.Xml.Linq.XAttribute"/> is found.</param>
            <param name="ignoreCase"><b>true</b> to ignore case during the comparison; otherwise, <b>false</b>.</param>
            <returns>The value of the <see cref="T:System.Xml.Linq.XAttribute"/> specified; otherwise <paramref name="defaultValue"/>.
            </returns>
        </member>
        <member name="M:Aristocrat.Linq.XElementExtension.AttributeValue(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Int32)">
            <summary>
            Returns the <see cref="T:System.Xml.Linq.XAttribute"/> Value of this <see cref="T:System.Xml.Linq.XElement"/> that has the specified 
            <see cref="T:System.Xml.Linq.XName"/>. If no <see cref="T:System.Xml.Linq.XAttribute"/> is found the <paramref name="defaultValue"/> is returned.
            </summary>
            <param name="source">An <see cref="T:System.Xml.Linq.XElement"/> to predicate.</param>
            <param name="name">The <see cref="T:System.Xml.Linq.XName"/> of the <see cref="T:System.Xml.Linq.XAttribute"/> to get.</param>
            <param name="defaultValue">The default value to return if no <see cref="T:System.Xml.Linq.XAttribute"/> is found.</param>
            <returns>The value of the <see cref="T:System.Xml.Linq.XAttribute"/> specified; otherwise <paramref name="defaultValue"/>.
            </returns>
        </member>
        <member name="M:Aristocrat.Linq.XElementExtension.AttributeValue(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Int32,System.Boolean)">
            <summary>
            Returns the <see cref="T:System.Xml.Linq.XAttribute"/> Value of this <see cref="T:System.Xml.Linq.XElement"/> that has the specified 
            <see cref="T:System.Xml.Linq.XName"/>. If no <see cref="T:System.Xml.Linq.XAttribute"/> is found the <paramref name="defaultValue"/> is returned.
            </summary>
            <param name="source">An <see cref="T:System.Xml.Linq.XElement"/> to predicate.</param>
            <param name="name">The <see cref="T:System.Xml.Linq.XName"/> of the <see cref="T:System.Xml.Linq.XAttribute"/> to get.</param>
            <param name="defaultValue">The default value to return if no <see cref="T:System.Xml.Linq.XAttribute"/> is found.</param>
            <param name="ignoreCase"><b>true</b> to ignore case during the comparison; otherwise, <b>false</b>.</param>
            <returns>The value of the <see cref="T:System.Xml.Linq.XAttribute"/> specified; otherwise <paramref name="defaultValue"/>.
            </returns>
        </member>
        <member name="M:Aristocrat.Linq.XElementExtension.AttributeValue(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Nullable{System.Int32})">
            <summary>
            Returns the <see cref="T:System.Xml.Linq.XAttribute"/> Value of this <see cref="T:System.Xml.Linq.XElement"/> that has the specified 
            <see cref="T:System.Xml.Linq.XName"/>. If no <see cref="T:System.Xml.Linq.XAttribute"/> is found the <paramref name="defaultValue"/> is returned.
            </summary>
            <param name="source">An <see cref="T:System.Xml.Linq.XElement"/> to predicate.</param>
            <param name="name">The <see cref="T:System.Xml.Linq.XName"/> of the <see cref="T:System.Xml.Linq.XAttribute"/> to get.</param>
            <param name="defaultValue">The default value to return if no <see cref="T:System.Xml.Linq.XAttribute"/> is found.</param>
            <returns>The value of the <see cref="T:System.Xml.Linq.XAttribute"/> specified; otherwise <paramref name="defaultValue"/>.
            </returns>
        </member>
        <member name="M:Aristocrat.Linq.XElementExtension.AttributeValue(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Returns the <see cref="T:System.Xml.Linq.XAttribute"/> Value of this <see cref="T:System.Xml.Linq.XElement"/> that has the specified 
            <see cref="T:System.Xml.Linq.XName"/>. If no <see cref="T:System.Xml.Linq.XAttribute"/> is found the <paramref name="defaultValue"/> is returned.
            </summary>
            <param name="source">An <see cref="T:System.Xml.Linq.XElement"/> to predicate.</param>
            <param name="name">The <see cref="T:System.Xml.Linq.XName"/> of the <see cref="T:System.Xml.Linq.XAttribute"/> to get.</param>
            <param name="defaultValue">The default value to return if no <see cref="T:System.Xml.Linq.XAttribute"/> is found.</param>
            <param name="ignoreCase"><b>true</b> to ignore case during the comparison; otherwise, <b>false</b>.</param>
            <returns>The value of the <see cref="T:System.Xml.Linq.XAttribute"/> specified; otherwise <paramref name="defaultValue"/>.
            </returns>
        </member>
        <member name="M:Aristocrat.Linq.XElementExtension.AttributeValue(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Int64)">
            <summary>
            Returns the <see cref="T:System.Xml.Linq.XAttribute"/> Value of this <see cref="T:System.Xml.Linq.XElement"/> that has the specified 
            <see cref="T:System.Xml.Linq.XName"/>. If no <see cref="T:System.Xml.Linq.XAttribute"/> is found the <paramref name="defaultValue"/> is returned.
            </summary>
            <param name="source">An <see cref="T:System.Xml.Linq.XElement"/> to predicate.</param>
            <param name="name">The <see cref="T:System.Xml.Linq.XName"/> of the <see cref="T:System.Xml.Linq.XAttribute"/> to get.</param>
            <param name="defaultValue">The default value to return if no <see cref="T:System.Xml.Linq.XAttribute"/> is found.</param>
            <returns>The value of the <see cref="T:System.Xml.Linq.XAttribute"/> specified; otherwise <paramref name="defaultValue"/>.
            </returns>
        </member>
        <member name="M:Aristocrat.Linq.XElementExtension.AttributeValue(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Int64,System.Boolean)">
            <summary>
            Returns the <see cref="T:System.Xml.Linq.XAttribute"/> Value of this <see cref="T:System.Xml.Linq.XElement"/> that has the specified 
            <see cref="T:System.Xml.Linq.XName"/>. If no <see cref="T:System.Xml.Linq.XAttribute"/> is found the <paramref name="defaultValue"/> is returned.
            </summary>
            <param name="source">An <see cref="T:System.Xml.Linq.XElement"/> to predicate.</param>
            <param name="name">The <see cref="T:System.Xml.Linq.XName"/> of the <see cref="T:System.Xml.Linq.XAttribute"/> to get.</param>
            <param name="defaultValue">The default value to return if no <see cref="T:System.Xml.Linq.XAttribute"/> is found.</param>
            <param name="ignoreCase"><b>true</b> to ignore case during the comparison; otherwise, <b>false</b>.</param>
            <returns>The value of the <see cref="T:System.Xml.Linq.XAttribute"/> specified; otherwise <paramref name="defaultValue"/>.
            </returns>
        </member>
        <member name="M:Aristocrat.Linq.XElementExtension.AttributeValue(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Nullable{System.Int64})">
            <summary>
            Returns the <see cref="T:System.Xml.Linq.XAttribute"/> Value of this <see cref="T:System.Xml.Linq.XElement"/> that has the specified 
            <see cref="T:System.Xml.Linq.XName"/>. If no <see cref="T:System.Xml.Linq.XAttribute"/> is found the <paramref name="defaultValue"/> is returned.
            </summary>
            <param name="source">An <see cref="T:System.Xml.Linq.XElement"/> to predicate.</param>
            <param name="name">The <see cref="T:System.Xml.Linq.XName"/> of the <see cref="T:System.Xml.Linq.XAttribute"/> to get.</param>
            <param name="defaultValue">The default value to return if no <see cref="T:System.Xml.Linq.XAttribute"/> is found.</param>
            <returns>The value of the <see cref="T:System.Xml.Linq.XAttribute"/> specified; otherwise <paramref name="defaultValue"/>.
            </returns>
        </member>
        <member name="M:Aristocrat.Linq.XElementExtension.AttributeValue(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Nullable{System.Int64},System.Boolean)">
            <summary>
            Returns the <see cref="T:System.Xml.Linq.XAttribute"/> Value of this <see cref="T:System.Xml.Linq.XElement"/> that has the specified 
            <see cref="T:System.Xml.Linq.XName"/>. If no <see cref="T:System.Xml.Linq.XAttribute"/> is found the <paramref name="defaultValue"/> is returned.
            </summary>
            <param name="source">An <see cref="T:System.Xml.Linq.XElement"/> to predicate.</param>
            <param name="name">The <see cref="T:System.Xml.Linq.XName"/> of the <see cref="T:System.Xml.Linq.XAttribute"/> to get.</param>
            <param name="defaultValue">The default value to return if no <see cref="T:System.Xml.Linq.XAttribute"/> is found.</param>
            <param name="ignoreCase"><b>true</b> to ignore case during the comparison; otherwise, <b>false</b>.</param>
            <returns>The value of the <see cref="T:System.Xml.Linq.XAttribute"/> specified; otherwise <paramref name="defaultValue"/>.
            </returns>
        </member>
        <member name="M:Aristocrat.Linq.XElementExtension.AttributeValue(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.String)">
            <summary>
            Returns the <see cref="T:System.Xml.Linq.XAttribute"/> Value of this <see cref="T:System.Xml.Linq.XElement"/> that has the specified 
            <see cref="T:System.Xml.Linq.XName"/>. If no <see cref="T:System.Xml.Linq.XAttribute"/> is found the <paramref name="defaultValue"/> is returned.
            </summary>
            <param name="source">An <see cref="T:System.Xml.Linq.XElement"/> to predicate.</param>
            <param name="name">The <see cref="T:System.Xml.Linq.XName"/> of the <see cref="T:System.Xml.Linq.XAttribute"/> to get.</param>
            <param name="defaultValue">The default value to return if no <see cref="T:System.Xml.Linq.XAttribute"/> is found.</param>
            <returns>The value of the <see cref="T:System.Xml.Linq.XAttribute"/> specified; otherwise <paramref name="defaultValue"/>.
            </returns>
        </member>
        <member name="M:Aristocrat.Linq.XElementExtension.AttributeValue(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.String,System.Boolean)">
            <summary>
            Returns the <see cref="T:System.Xml.Linq.XAttribute"/> Value of this <see cref="T:System.Xml.Linq.XElement"/> that has the specified 
            <see cref="T:System.Xml.Linq.XName"/>. If no <see cref="T:System.Xml.Linq.XAttribute"/> is found the <paramref name="defaultValue"/> is returned.
            </summary>
            <param name="source">An <see cref="T:System.Xml.Linq.XElement"/> to predicate.</param>
            <param name="name">The <see cref="T:System.Xml.Linq.XName"/> of the <see cref="T:System.Xml.Linq.XAttribute"/> to get.</param>
            <param name="defaultValue">The default value to return if no <see cref="T:System.Xml.Linq.XAttribute"/> is found.</param>
            <param name="ignoreCase"><b>true</b> to ignore case during the comparison; otherwise, <b>false</b>.</param>
            <returns>The value of the <see cref="T:System.Xml.Linq.XAttribute"/> specified; otherwise <paramref name="defaultValue"/>.
            </returns>
        </member>
        <member name="M:Aristocrat.Linq.XElementExtension.AttributeValue(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.TimeSpan)">
            <summary>
            Returns the <see cref="T:System.Xml.Linq.XAttribute"/> Value of this <see cref="T:System.Xml.Linq.XElement"/> that has the specified 
            <see cref="T:System.Xml.Linq.XName"/>. If no <see cref="T:System.Xml.Linq.XAttribute"/> is found the <paramref name="defaultValue"/> is returned.
            </summary>
            <param name="source">An <see cref="T:System.Xml.Linq.XElement"/> to predicate.</param>
            <param name="name">The <see cref="T:System.Xml.Linq.XName"/> of the <see cref="T:System.Xml.Linq.XAttribute"/> to get.</param>
            <param name="defaultValue">The default value to return if no <see cref="T:System.Xml.Linq.XAttribute"/> is found.</param>
            <returns>The value of the <see cref="T:System.Xml.Linq.XAttribute"/> specified; otherwise <paramref name="defaultValue"/>.
            </returns>
        </member>
        <member name="M:Aristocrat.Linq.XElementExtension.AttributeValue(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.TimeSpan,System.Boolean)">
            <summary>
            Returns the <see cref="T:System.Xml.Linq.XAttribute"/> Value of this <see cref="T:System.Xml.Linq.XElement"/> that has the specified 
            <see cref="T:System.Xml.Linq.XName"/>. If no <see cref="T:System.Xml.Linq.XAttribute"/> is found the <paramref name="defaultValue"/> is returned.
            </summary>
            <param name="source">An <see cref="T:System.Xml.Linq.XElement"/> to predicate.</param>
            <param name="name">The <see cref="T:System.Xml.Linq.XName"/> of the <see cref="T:System.Xml.Linq.XAttribute"/> to get.</param>
            <param name="defaultValue">The default value to return if no <see cref="T:System.Xml.Linq.XAttribute"/> is found.</param>
            <param name="ignoreCase"><b>true</b> to ignore case during the comparison; otherwise, <b>false</b>.</param>
            <returns>The value of the <see cref="T:System.Xml.Linq.XAttribute"/> specified; otherwise <paramref name="defaultValue"/>.
            </returns>
        </member>
        <member name="M:Aristocrat.Linq.XElementExtension.AttributeValue(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Nullable{System.TimeSpan})">
            <summary>
            Returns the <see cref="T:System.Xml.Linq.XAttribute"/> Value of this <see cref="T:System.Xml.Linq.XElement"/> that has the specified 
            <see cref="T:System.Xml.Linq.XName"/>. If no <see cref="T:System.Xml.Linq.XAttribute"/> is found the <paramref name="defaultValue"/> is returned.
            </summary>
            <param name="source">An <see cref="T:System.Xml.Linq.XElement"/> to predicate.</param>
            <param name="name">The <see cref="T:System.Xml.Linq.XName"/> of the <see cref="T:System.Xml.Linq.XAttribute"/> to get.</param>
            <param name="defaultValue">The default value to return if no <see cref="T:System.Xml.Linq.XAttribute"/> is found.</param>
            <returns>The value of the <see cref="T:System.Xml.Linq.XAttribute"/> specified; otherwise <paramref name="defaultValue"/>.
            </returns>
        </member>
        <member name="M:Aristocrat.Linq.XElementExtension.AttributeValue(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Nullable{System.TimeSpan},System.Boolean)">
            <summary>
            Returns the <see cref="T:System.Xml.Linq.XAttribute"/> Value of this <see cref="T:System.Xml.Linq.XElement"/> that has the specified 
            <see cref="T:System.Xml.Linq.XName"/>. If no <see cref="T:System.Xml.Linq.XAttribute"/> is found the <paramref name="defaultValue"/> is returned.
            </summary>
            <param name="source">An <see cref="T:System.Xml.Linq.XElement"/> to predicate.</param>
            <param name="name">The <see cref="T:System.Xml.Linq.XName"/> of the <see cref="T:System.Xml.Linq.XAttribute"/> to get.</param>
            <param name="defaultValue">The default value to return if no <see cref="T:System.Xml.Linq.XAttribute"/> is found.</param>
            <param name="ignoreCase"><b>true</b> to ignore case during the comparison; otherwise, <b>false</b>.</param>
            <returns>The value of the <see cref="T:System.Xml.Linq.XAttribute"/> specified; otherwise <paramref name="defaultValue"/>.
            </returns>
        </member>
        <member name="M:Aristocrat.Linq.XElementExtension.AttributeValue(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.UInt32)">
            <summary>
            Returns the <see cref="T:System.Xml.Linq.XAttribute"/> Value of this <see cref="T:System.Xml.Linq.XElement"/> that has the specified 
            <see cref="T:System.Xml.Linq.XName"/>. If no <see cref="T:System.Xml.Linq.XAttribute"/> is found the <paramref name="defaultValue"/> is returned.
            </summary>
            <param name="source">An <see cref="T:System.Xml.Linq.XElement"/> to predicate.</param>
            <param name="name">The <see cref="T:System.Xml.Linq.XName"/> of the <see cref="T:System.Xml.Linq.XAttribute"/> to get.</param>
            <param name="defaultValue">The default value to return if no <see cref="T:System.Xml.Linq.XAttribute"/> is found.</param>
            <returns>The value of the <see cref="T:System.Xml.Linq.XAttribute"/> specified; otherwise <paramref name="defaultValue"/>.
            </returns>
        </member>
        <member name="M:Aristocrat.Linq.XElementExtension.AttributeValue(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.UInt32,System.Boolean)">
            <summary>
            Returns the <see cref="T:System.Xml.Linq.XAttribute"/> Value of this <see cref="T:System.Xml.Linq.XElement"/> that has the specified 
            <see cref="T:System.Xml.Linq.XName"/>. If no <see cref="T:System.Xml.Linq.XAttribute"/> is found the <paramref name="defaultValue"/> is returned.
            </summary>
            <param name="source">An <see cref="T:System.Xml.Linq.XElement"/> to predicate.</param>
            <param name="name">The <see cref="T:System.Xml.Linq.XName"/> of the <see cref="T:System.Xml.Linq.XAttribute"/> to get.</param>
            <param name="defaultValue">The default value to return if no <see cref="T:System.Xml.Linq.XAttribute"/> is found.</param>
            <param name="ignoreCase"><b>true</b> to ignore case during the comparison; otherwise, <b>false</b>.</param>
            <returns>The value of the <see cref="T:System.Xml.Linq.XAttribute"/> specified; otherwise <paramref name="defaultValue"/>.
            </returns>
        </member>
        <member name="M:Aristocrat.Linq.XElementExtension.AttributeValue(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Nullable{System.UInt32})">
            <summary>
            Returns the <see cref="T:System.Xml.Linq.XAttribute"/> Value of this <see cref="T:System.Xml.Linq.XElement"/> that has the specified 
            <see cref="T:System.Xml.Linq.XName"/>. If no <see cref="T:System.Xml.Linq.XAttribute"/> is found the <paramref name="defaultValue"/> is returned.
            </summary>
            <param name="source">An <see cref="T:System.Xml.Linq.XElement"/> to predicate.</param>
            <param name="name">The <see cref="T:System.Xml.Linq.XName"/> of the <see cref="T:System.Xml.Linq.XAttribute"/> to get.</param>
            <param name="defaultValue">The default value to return if no <see cref="T:System.Xml.Linq.XAttribute"/> is found.</param>
            <returns>The value of the <see cref="T:System.Xml.Linq.XAttribute"/> specified; otherwise <paramref name="defaultValue"/>.
            </returns>
        </member>
        <member name="M:Aristocrat.Linq.XElementExtension.AttributeValue(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Nullable{System.UInt32},System.Boolean)">
            <summary>
            Returns the <see cref="T:System.Xml.Linq.XAttribute"/> Value of this <see cref="T:System.Xml.Linq.XElement"/> that has the specified 
            <see cref="T:System.Xml.Linq.XName"/>. If no <see cref="T:System.Xml.Linq.XAttribute"/> is found the <paramref name="defaultValue"/> is returned.
            </summary>
            <param name="source">An <see cref="T:System.Xml.Linq.XElement"/> to predicate.</param>
            <param name="name">The <see cref="T:System.Xml.Linq.XName"/> of the <see cref="T:System.Xml.Linq.XAttribute"/> to get.</param>
            <param name="defaultValue">The default value to return if no <see cref="T:System.Xml.Linq.XAttribute"/> is found.</param>
            <param name="ignoreCase"><b>true</b> to ignore case during the comparison; otherwise, <b>false</b>.</param>
            <returns>The value of the <see cref="T:System.Xml.Linq.XAttribute"/> specified; otherwise <paramref name="defaultValue"/>.
            </returns>
        </member>
        <member name="M:Aristocrat.Linq.XElementExtension.AttributeValue(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.UInt64)">
            <summary>
            Returns the <see cref="T:System.Xml.Linq.XAttribute"/> Value of this <see cref="T:System.Xml.Linq.XElement"/> that has the specified 
            <see cref="T:System.Xml.Linq.XName"/>. If no <see cref="T:System.Xml.Linq.XAttribute"/> is found the <paramref name="defaultValue"/> is returned.
            </summary>
            <param name="source">An <see cref="T:System.Xml.Linq.XElement"/> to predicate.</param>
            <param name="name">The <see cref="T:System.Xml.Linq.XName"/> of the <see cref="T:System.Xml.Linq.XAttribute"/> to get.</param>
            <param name="defaultValue">The default value to return if no <see cref="T:System.Xml.Linq.XAttribute"/> is found.</param>
            <returns>The value of the <see cref="T:System.Xml.Linq.XAttribute"/> specified; otherwise <paramref name="defaultValue"/>.
            </returns>
        </member>
        <member name="M:Aristocrat.Linq.XElementExtension.AttributeValue(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.UInt64,System.Boolean)">
            <summary>
            Returns the <see cref="T:System.Xml.Linq.XAttribute"/> Value of this <see cref="T:System.Xml.Linq.XElement"/> that has the specified 
            <see cref="T:System.Xml.Linq.XName"/>. If no <see cref="T:System.Xml.Linq.XAttribute"/> is found the <paramref name="defaultValue"/> is returned.
            </summary>
            <param name="source">An <see cref="T:System.Xml.Linq.XElement"/> to predicate.</param>
            <param name="name">The <see cref="T:System.Xml.Linq.XName"/> of the <see cref="T:System.Xml.Linq.XAttribute"/> to get.</param>
            <param name="defaultValue">The default value to return if no <see cref="T:System.Xml.Linq.XAttribute"/> is found.</param>
            <param name="ignoreCase"><b>true</b> to ignore case during the comparison; otherwise, <b>false</b>.</param>
            <returns>The value of the <see cref="T:System.Xml.Linq.XAttribute"/> specified; otherwise <paramref name="defaultValue"/>.
            </returns>
        </member>
        <member name="M:Aristocrat.Linq.XElementExtension.AttributeValue(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Nullable{System.UInt64})">
            <summary>
            Returns the <see cref="T:System.Xml.Linq.XAttribute"/> Value of this <see cref="T:System.Xml.Linq.XElement"/> that has the specified 
            <see cref="T:System.Xml.Linq.XName"/>. If no <see cref="T:System.Xml.Linq.XAttribute"/> is found the <paramref name="defaultValue"/> is returned.
            </summary>
            <param name="source">An <see cref="T:System.Xml.Linq.XElement"/> to predicate.</param>
            <param name="name">The <see cref="T:System.Xml.Linq.XName"/> of the <see cref="T:System.Xml.Linq.XAttribute"/> to get.</param>
            <param name="defaultValue">The default value to return if no <see cref="T:System.Xml.Linq.XAttribute"/> is found.</param>
            <returns>The value of the <see cref="T:System.Xml.Linq.XAttribute"/> specified; otherwise <paramref name="defaultValue"/>.
            </returns>
        </member>
        <member name="M:Aristocrat.Linq.XElementExtension.AttributeValue(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Nullable{System.UInt64},System.Boolean)">
            <summary>
            Returns the <see cref="T:System.Xml.Linq.XAttribute"/> Value of this <see cref="T:System.Xml.Linq.XElement"/> that has the specified 
            <see cref="T:System.Xml.Linq.XName"/>. If no <see cref="T:System.Xml.Linq.XAttribute"/> is found the <paramref name="defaultValue"/> is returned.
            </summary>
            <param name="source">An <see cref="T:System.Xml.Linq.XElement"/> to predicate.</param>
            <param name="name">The <see cref="T:System.Xml.Linq.XName"/> of the <see cref="T:System.Xml.Linq.XAttribute"/> to get.</param>
            <param name="defaultValue">The default value to return if no <see cref="T:System.Xml.Linq.XAttribute"/> is found.</param>
            <param name="ignoreCase"><b>true</b> to ignore case during the comparison; otherwise, <b>false</b>.</param>
            <returns>The value of the <see cref="T:System.Xml.Linq.XAttribute"/> specified; otherwise <paramref name="defaultValue"/>.
            </returns>
        </member>
        <member name="M:Aristocrat.Linq.XElementExtension.AttributeValue``1(System.Xml.Linq.XElement,System.Xml.Linq.XName,``0)">
            <summary>
            Returns the <see cref="T:System.Xml.Linq.XAttribute"/> Value of this <see cref="T:System.Xml.Linq.XElement"/> that has the specified 
            <see cref="T:System.Xml.Linq.XName"/>. If no <see cref="T:System.Xml.Linq.XAttribute"/> is found the <paramref name="defaultValue"/> is returned.
            </summary>
            <param name="source">An <see cref="T:System.Xml.Linq.XElement"/> to predicate.</param>
            <param name="name">The <see cref="T:System.Xml.Linq.XName"/> of the <see cref="T:System.Xml.Linq.XAttribute"/> to get.</param>
            <param name="defaultValue">The default value to return if no <see cref="T:System.Xml.Linq.XAttribute"/> is found.</param>
            <returns>The value of the <see cref="T:System.Xml.Linq.XAttribute"/> specified; otherwise <paramref name="defaultValue"/>.
            </returns>
        </member>
        <member name="M:Aristocrat.Linq.XElementExtension.AttributeValue``1(System.Xml.Linq.XElement,System.Xml.Linq.XName,``0,System.Boolean)">
            <summary>
            Returns the <see cref="T:System.Xml.Linq.XAttribute"/> Value of this <see cref="T:System.Xml.Linq.XElement"/> that has the specified 
            <see cref="T:System.Xml.Linq.XName"/>. If no <see cref="T:System.Xml.Linq.XAttribute"/> is found the <paramref name="defaultValue"/> is returned.
            </summary>
            <param name="source">An <see cref="T:System.Xml.Linq.XElement"/> to predicate.</param>
            <param name="name">The <see cref="T:System.Xml.Linq.XName"/> of the <see cref="T:System.Xml.Linq.XAttribute"/> to get.</param>
            <param name="defaultValue">The default value to return if no <see cref="T:System.Xml.Linq.XAttribute"/> is found.</param>
            <param name="ignoreCase"><b>true</b> to ignore case during the comparison; otherwise, <b>false</b>.</param>
            <returns>The value of the <see cref="T:System.Xml.Linq.XAttribute"/> specified; otherwise <paramref name="defaultValue"/>.
            </returns>
        </member>
        <member name="M:Aristocrat.Linq.XElementExtension.RemoveAttribute(System.Xml.Linq.XElement,System.Xml.Linq.XName)">
            <summary>
            Removes the <see cref="T:XAttribute"/> of this <see cref="T:XElement"/> that has the specified 
            <see cref="T:XName"/>.
            </summary>
            <param name="source">An <see cref="T:System.Xml.Linq.XElement"/> to predicate.</param>
            <param name="name">The <see cref="T:XName"/> to match.</param>
        </member>
        <member name="M:Aristocrat.Linq.XElementExtension.RemoveAttribute(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Boolean)">
            <summary>
            Removes the <see cref="T:XAttribute"/> of this <see cref="T:XElement"/> that has the specified 
            <see cref="T:XName"/>.
            </summary>
            <param name="source">An <see cref="T:System.Xml.Linq.XElement"/> to predicate.</param>
            <param name="name">The <see cref="T:XName"/> to match.</param>
            <param name="ignoreCase"><b>true</b> to ignore case during the comparison; otherwise, <b>false</b>.</param>
            <returns><b>true</b> if successful; otherwise <b>false</b>.</returns>
        </member>
        <member name="M:Aristocrat.Linq.XElementExtension.Element(System.Xml.Linq.XContainer,System.Xml.Linq.XName,System.Boolean)">
            <summary>
            Gets the first (in document order) child element with the specified <see cref="T:XName"/>.
            </summary>
            <param name="source">An <see cref="T:XElement"/> to predicate.</param>
            <param name="name">The <see cref="T:XName"/> to match.</param>
            <param name="ignoreCase"><b>true</b> to ignore case during the comparison; otherwise, <b>false</b>.</param>
            <returns>A <see cref="T:XElement"/> that matches the specified <see cref="T:XName"/>, or null. </returns>
        </member>
        <member name="M:Aristocrat.Linq.XElementExtension.Elements(System.Xml.Linq.XContainer,System.Xml.Linq.XName,System.Boolean)">
            <summary>
            Gets the first (in document order) child element with the specified <see cref="T:XName"/>.
            </summary>
            <param name="source">An <see cref="T:XElement"/> to predicate.</param>
            <param name="name">The <see cref="T:XName"/> to match.</param>
            <param name="ignoreCase"><b>true</b> to ignore case during the comparison; otherwise, <b>false</b>.</param>
            <returns>A collection <see cref="T:XElement"/>s that matches the specified <see cref="T:System.Xml.Linq.XName"/>.</returns>
        </member>
        <member name="T:Aristocrat.Linq.EncodingExtension">
            <summary>
            Exposes static instances of  character encoding.
            </summary>
        </member>
        <member name="P:Aristocrat.Linq.EncodingExtension.Base64">
            <summary>
            Gets an encoding for the base 64 character set.
            </summary>
        </member>
        <member name="P:Aristocrat.Linq.EncodingExtension.BinHex">
            <summary>
            Gets an encoding for the binary hexadecimal character set.
            </summary>
        </member>
        <member name="T:Aristocrat.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Aristocrat.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Aristocrat.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Aristocrat.Properties.Resources.Arg_DevicesNotSupported">
            <summary>
              Looks up a localized string similar to Cannot open Win32 devices such as disk partitions and tape drives. Avoid use of &quot;\\.\&quot; in the path..
            </summary>
        </member>
        <member name="P:Aristocrat.Properties.Resources.Arg_DirectoryDoesntExist">
            <summary>
              Looks up a localized string similar to Cannot open a directory that doesn&apos;t exist..
            </summary>
        </member>
        <member name="P:Aristocrat.Properties.Resources.Arg_FileDoesntExist">
            <summary>
              Looks up a localized string similar to Cannot open a file that doesn&apos;t exist..
            </summary>
        </member>
        <member name="P:Aristocrat.Properties.Resources.Arg_HandleNotAsync">
            <summary>
              Looks up a localized string similar to Handle does not support asynchronous operations..
            </summary>
        </member>
        <member name="P:Aristocrat.Properties.Resources.Arg_HandleNotSync">
            <summary>
              Looks up a localized string similar to Handle does not support synchronous operations..
            </summary>
        </member>
        <member name="P:Aristocrat.Properties.Resources.Arg_MultipleDisks">
            <summary>
              Looks up a localized string similar to The volume spans multiple disks so it cannot be read using the specified stream..
            </summary>
        </member>
        <member name="P:Aristocrat.Properties.Resources.Arg_PathDoesntExist">
            <summary>
              Looks up a localized string similar to Cannot open a path that doesn&apos;t exist..
            </summary>
        </member>
        <member name="P:Aristocrat.Properties.Resources.Argument_InvalidOffLen">
            <summary>
              Looks up a localized string similar to Offset and length were out of bounds for the array or count is greater than the number of elements from index to the end of the source collection..
            </summary>
        </member>
        <member name="P:Aristocrat.Properties.Resources.Argument_InvalidValue">
            <summary>
              Looks up a localized string similar to Value was invalid..
            </summary>
        </member>
        <member name="P:Aristocrat.Properties.Resources.ArgumentOutOfRange_CannotSeekPastBeginningOfFile">
            <summary>
              Looks up a localized string similar to The seek operation cannot seek past the beginning of a file..
            </summary>
        </member>
        <member name="P:Aristocrat.Properties.Resources.ArgumentOutOfRange_CannotSeekPastEndOfFile">
            <summary>
              Looks up a localized string similar to The seek operation cannot seek past the end of a file..
            </summary>
        </member>
        <member name="P:Aristocrat.Properties.Resources.ArgumentOutOfRange_NeedNonNegNum">
            <summary>
              Looks up a localized string similar to Non-negative number required..
            </summary>
        </member>
        <member name="P:Aristocrat.Properties.Resources.ArgumentOutOfRange_NeedPosNum">
            <summary>
              Looks up a localized string similar to Positive number required..
            </summary>
        </member>
        <member name="P:Aristocrat.Properties.Resources.CannotDetermineHostAddress">
            <summary>
              Looks up a localized string similar to Cannot determine the remote host address from {0}..
            </summary>
        </member>
        <member name="P:Aristocrat.Properties.Resources.ConfigKeyNotFound">
            <summary>
              Looks up a localized string similar to No elements matching the specified key where found..
            </summary>
        </member>
        <member name="P:Aristocrat.Properties.Resources.ConfigKeysDoNotMatch">
            <summary>
              Looks up a localized string similar to The key does not match the indexer key..
            </summary>
        </member>
        <member name="P:Aristocrat.Properties.Resources.Cryptography_HashKeySet">
            <summary>
              Looks up a localized string similar to Hash key cannot be changed after the first write to the stream..
            </summary>
        </member>
        <member name="P:Aristocrat.Properties.Resources.Cryptography_HashNotYetFinalized">
            <summary>
              Looks up a localized string similar to Hash must be finalized before the hash value is retrieved..
            </summary>
        </member>
        <member name="P:Aristocrat.Properties.Resources.Cryptography_InvalidIVSize">
            <summary>
              Looks up a localized string similar to Specified initialization vector (IV) does not match the block size for this algorithm..
            </summary>
        </member>
        <member name="P:Aristocrat.Properties.Resources.DnsResolveFailed">
            <summary>
              Looks up a localized string similar to No DNS entries exist for host {0}.
            </summary>
        </member>
        <member name="P:Aristocrat.Properties.Resources.ErrorModifyingReadOnlyData">
            <summary>
              Looks up a localized string similar to Error occurred trying to modify read only data..
            </summary>
        </member>
        <member name="P:Aristocrat.Properties.Resources.FailedResolveHost">
            <summary>
              Looks up a localized string similar to Failed to resolve remote host: {0}..
            </summary>
        </member>
        <member name="P:Aristocrat.Properties.Resources.GetComputerNameReturnedInvalidLength">
            <summary>
              Looks up a localized string similar to GetComputerName returned an invalid length: {0}.
            </summary>
        </member>
        <member name="P:Aristocrat.Properties.Resources.InternalError">
            <summary>
              Looks up a localized string similar to An unexpected error has occurred..
            </summary>
        </member>
        <member name="P:Aristocrat.Properties.Resources.InvalidOperation_CannotRead">
            <summary>
              Looks up a localized string similar to Cannot read the data requested..
            </summary>
        </member>
        <member name="P:Aristocrat.Properties.Resources.NotSupported_EncryptedCompressed">
            <summary>
              Looks up a localized string similar to Cannot open compressed or encrypted files..
            </summary>
        </member>
        <member name="P:Aristocrat.Properties.Resources.NotSupported_FileSystemType">
            <summary>
              Looks up a localized string similar to The file system type is not currently supported by the stream..
            </summary>
        </member>
        <member name="P:Aristocrat.Properties.Resources.NotSupported_NonFiles">
            <summary>
              Looks up a localized string similar to Cannot open a device that was not a file..
            </summary>
        </member>
        <member name="P:Aristocrat.Properties.Resources.NotSupported_UnreadableStream">
            <summary>
              Looks up a localized string similar to Stream does not support reading..
            </summary>
        </member>
        <member name="P:Aristocrat.Properties.Resources.NotSupported_UnseekableStream">
            <summary>
              Looks up a localized string similar to Stream does not support seeking..
            </summary>
        </member>
        <member name="P:Aristocrat.Properties.Resources.NotSupported_UnwritableStream">
            <summary>
              Looks up a localized string similar to Stream does not support writing..
            </summary>
        </member>
        <member name="P:Aristocrat.Properties.Resources.ObjectDisposed_FileClosed">
            <summary>
              Looks up a localized string similar to Cannot access a closed file..
            </summary>
        </member>
        <member name="P:Aristocrat.Properties.Resources.OffsetExceedsBufferSize">
            <summary>
              Looks up a localized string similar to The specified offset exceeds the buffer size..
            </summary>
        </member>
        <member name="P:Aristocrat.Properties.Resources.PathNotFound_Path">
            <summary>
              Looks up a localized string similar to Could not find a part of the path &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Aristocrat.Properties.Resources.PermissionDenied">
            <summary>
              Looks up a localized string similar to Permission Denied.
            </summary>
        </member>
        <member name="P:Aristocrat.Properties.Resources.SizeExceedsRemainingBufferSpace">
            <summary>
              Looks up a localized string similar to The specified size exceeds the remaining buffer space..
            </summary>
        </member>
        <member name="P:Aristocrat.Properties.Resources.UnknownException">
            <summary>
              Looks up a localized string similar to Unknown Exception.
            </summary>
        </member>
        <member name="P:Aristocrat.Properties.Resources.ValueMustBeInRange">
            <summary>
              Looks up a localized string similar to The value of this argument must fall within the range {0} to {1}..
            </summary>
        </member>
        <member name="P:Aristocrat.Properties.Resources.ValueMustBeNonNegative">
            <summary>
              Looks up a localized string similar to The value of this argument must be non-negative..
            </summary>
        </member>
        <member name="P:Aristocrat.Properties.Resources.XmlArrayTooSmall">
            <summary>
              Looks up a localized string similar to Array too small..
            </summary>
        </member>
        <member name="P:Aristocrat.Properties.Resources.XmlInvalidBase64Length">
            <summary>
              Looks up a localized string similar to Base64 sequence length not valid. Must be a multiple of 4..
            </summary>
        </member>
        <member name="P:Aristocrat.Properties.Resources.XmlInvalidBase64Sequence">
            <summary>
              Looks up a localized string similar to The characters specified are not a valid Base64 sequence..
            </summary>
        </member>
        <member name="P:Aristocrat.Properties.Resources.XmlInvalidBinHexLength">
            <summary>
              Looks up a localized string similar to BinHex sequence length not valid. Must be a multiple of 2..
            </summary>
        </member>
        <member name="P:Aristocrat.Properties.Resources.XmlInvalidBinHexSequence">
            <summary>
              Looks up a localized string similar to The characters specified  are not a valid BinHex sequence..
            </summary>
        </member>
        <member name="T:Aristocrat.Security.AtiHash">
            <summary>
            Class with static Hash Methods
            </summary>
        </member>
        <member name="M:Aristocrat.Security.AtiHash.ComputeHash(System.String,System.String,System.Byte[])">
            <summary>
            Generates a hash for the given plain text data and returns a base64-encoded result. Before the hash is computed, 
            a random salt is generated and appended to the plain text. This salt is stored at the end of the hash data, so 
            it can be used later for hash verification.
            </summary>
            <param name="text">Plaintext data to be hashed.</param>
            <param name="hashAlgorithm">Name of the hash algorithm. Allowed values are: "MD5", "SHA1", "SHA256", "SHA384", 
            and "SHA512" (if any other data is specified MD5 hashing algorithm will be used). This data is case-insensitive.
            </param>
            <param name="salt">Salt data. This parameter can be null, in which case a random salt data will be generated.
            </param>
            <returns>Hash data formatted as a base64-encoded string.</returns>
        </member>
        <member name="M:Aristocrat.Security.AtiHash.VerifyHash(System.String,System.String,System.String)">
            <summary>
            Compares a hash of the specified plain text data to a given hash data. Plain text is hashed with the same salt 
            data as the original hash.
            </summary>
            <param name="text">Plain text to be verified against the specified hash. The function does not check whether 
            this parameter is null.</param>
            <param name="hashAlgorithm">Name of the hash algorithm. Allowed values are: "MD5", "SHA1", "SHA256", "SHA384", 
            and "SHA512" (if any other data is specified, MD5 hashing algorithm will be used). This data is case-insensitive.
            </param>
            <param name="hashValue">Base64-encoded hash data produced by ComputeHash function. This data includes the 
            original salt appended to it.</param>
            <returns>If computed hash mathes the specified hash the function the return data is true; otherwise, the 
            function returns false.</returns>
        </member>
        <member name="M:Aristocrat.Security.AtiHash.GetFileHash(System.IO.Stream)">
            <summary>
            Static method to calcuate hash of file
            </summary>
            <param name="fileStream">File Stream</param>
            <returns>Hash Code</returns>
        </member>
        <member name="M:Aristocrat.Security.AtiHash.CreateSalt">
            <summary>
            Static method to calculate a 'salt' for the password hash
            </summary>
            <returns>byte array</returns>
        </member>
        <member name="T:Aristocrat.Security.Cryptography.EncryptionHelper">
            <summary>
            Encryption Manager encrypts and decrypts base on type of encryption needed.
            </summary>
        </member>
        <member name="M:Aristocrat.Security.Cryptography.EncryptionHelper.DecryptInt64(System.Byte[])">
            <summary>
            Decrypt data to an <see cref="T:System.Int64"/>.
            </summary>
            <param name="encryptedData">The encrypted data to decrypt.</param>
            <returns>An <see cref="T:System.Int64"/> from the <paramref name="encryptedData"/>.</returns>
        </member>
        <member name="M:Aristocrat.Security.Cryptography.EncryptionHelper.DecryptData(System.Byte[])">
            <summary>
            Decrypt data.
            </summary>
            <param name="encryptedData">The encrypted data to decrypt.</param>
            <returns>An <see cref="T:System.Int64"/> from the <paramref name="encryptedData"/>.</returns>
        </member>
        <member name="M:Aristocrat.Security.Cryptography.EncryptionHelper.EncryptData(System.Int64)">
            <summary>
            Encrypt the decrypted data.
            </summary>
            <param name="decryptedData">The decrypted data to encrypt.</param>
            <returns>The encrypted data.</returns>
        </member>
        <member name="M:Aristocrat.Security.Cryptography.EncryptionHelper.EncryptData(System.Object[])">
            <summary>
            Encrypt the decrypted data.
            </summary>
            <param name="items">The items to encrypt.</param>
            <returns>The encrypted data.</returns>
        </member>
        <member name="M:Aristocrat.Security.Cryptography.EncryptionHelper.EncryptData(System.Byte[])">
            <summary>
            Encrypt the decrypted data.
            </summary>
            <param name="decryptedData">The decrypted data to encrypt.</param>
            <returns>The encrypted data.</returns>
        </member>
        <member name="P:Aristocrat.Security.Cryptography.EncryptionHelper.Key">
            <summary>
            Gets or sets the secret key.
            </summary>
        </member>
        <member name="P:Aristocrat.Security.Cryptography.EncryptionHelper.IV">
            <summary>
            Gets or sets the initialization vector.
            </summary>
        </member>
        <member name="T:Aristocrat.Security.Cryptography.ICryptoHashTransform">
            <summary>
            Defines the basic operations of cryptographic transformations coupled with a hash algorithm.
            </summary>
        </member>
        <member name="P:Aristocrat.Security.Cryptography.ICryptoHashTransform.Hash">
            <summary>
            Gets the value of the computed hash code.
            </summary>
            <returns>The current value of the computed hash code.</returns>
        </member>
        <member name="P:Aristocrat.Security.Cryptography.ICryptoHashTransform.HashSize">
            <summary>
            Gets the size, in bits, of the computed hash code.
            </summary>
            <returns>The size, in bits, of the computed hash code.</returns>
        </member>
        <member name="T:Aristocrat.Security.Cryptography.Umac">
            <summary>
            Represents the base class from which all implementations of the Umac encryption algorithm must inherit.
            </summary>
            <remarks>Implemented per UMAC spec (https://tools.ietf.org/html/rfc4418).</remarks>
        </member>
        <member name="M:Aristocrat.Security.Cryptography.Umac.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Aristocrat.Security.Cryptography.Umac"/> class.
            </summary>
        </member>
        <member name="M:Aristocrat.Security.Cryptography.Umac.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Aristocrat.Security.Cryptography.Umac"/> class.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:Aristocrat.Security.Cryptography.Umac.#ctor(System.String,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Aristocrat.Security.Cryptography.Umac"/> class.
            </summary>
            <param name="aesAlgorithmName">The name of the specific implementation of AES to use.</param>
            <param name="key">The key.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when one or more required arguments are null.</exception>
        </member>
        <member name="M:Aristocrat.Security.Cryptography.Umac.Create">
            <summary>
            Creates an instance of the default implementation of a Universal hashing Message Authentication Code(UMAC).
            </summary>
            <returns>A new UMAC32 instance.</returns>
        </member>
        <member name="M:Aristocrat.Security.Cryptography.Umac.Create(System.String)">
            <summary>
            Creates an instance of the specified implementation of a Universal hashing Message Authentication Code(UMAC).
            </summary>
            <param name="algorithmName">The UMAC implementation to use. The following table shows the valid values for the 
            <paramref name="algorithmName"/> parameter and the algorithms they map to.
            <list type="table">
              <listHeader>
                <term>Parameter value</term>
                <term>Implements</term>
              </listHeader>
              <item>
                <description>Umac32Managed</description>
                <description><see cref="T:Aristorcrat.Security.Cryptography.Umac32Managed"/></description>
              </item>
              <item>
                <description>Aristorcrat.Security.Cryptography.Umac32Managed</description>
                <description><see cref="T:Aristorcrat.Security.Cryptography.Umac32Managed"/></description>
              </item>
              <item>
                <description>Umac64Managed</description>
                <description><see cref="T:Aristorcrat.Security.Cryptography.Umac64Managed"/></description>
              </item>
              <item>
                <description>Aristorcrat.Security.Cryptography.Umac64Managed</description>
                <description><see cref="T:Aristorcrat.Security.Cryptography.Umac64Managed"/></description>
              </item>
              <item>
                <description>Umac96Managed</description>
                <description><see cref="T:Aristorcrat.Security.Cryptography.Umac96Managed"/></description>
              </item>
              <item>
                <description>Aristorcrat.Security.Cryptography.Umac96Managed</description>
                <description><see cref="T:Aristorcrat.Security.Cryptography.Umac96Managed"/></description>
              </item>
              <item>
                <description>Umac128Managed</description>
                <description><see cref="T:Aristorcrat.Security.Cryptography.Umac128Managed"/></description>
              </item>
              <item>
                <description>Aristorcrat.Security.Cryptography.Umac128Managed</description>
                <description><see cref="T:Aristorcrat.Security.Cryptography.Umac128Managed"/></description>
              </item>
            </list></param>
            <returns>A new instance of the specified UMAC implementation.</returns>
        </member>
        <member name="M:Aristocrat.Security.Cryptography.Umac.GenerateIV">
            <summary>
            Generates a random initialization vector (IV) to be used for the algorithm.
            .</summary>
        </member>
        <member name="M:Aristocrat.Security.Cryptography.Umac.Initialize">
            <summary>
            Initializes an instance of the default implementation of <see cref="T:Aristorcrat.Security.Cryptography.Umac"/>.
            </summary>
        </member>
        <member name="M:Aristocrat.Security.Cryptography.Umac.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:Aristorcrat.Security.Cryptography.Umac"/> class when a 
            key change is legitimate and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged 
            resources.</param>
        </member>
        <member name="M:Aristocrat.Security.Cryptography.Umac.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Routes data written to the object into the univeral hash algorithm for computing the hash value.
            </summary>
            <param name="array">The buffer to compute the hash code for.</param>
            <param name="ibStart">The offset into the byte array from which to begin using data.</param>
            <param name="cbSize">The number of bytes in the byte array to use as data.</param>
        </member>
        <member name="M:Aristocrat.Security.Cryptography.Umac.HashFinal">
            <summary>
            Finalizes the hash computation after the last data is processed by the cryptographic stream object.
            </summary>
            <returns>The computed hash code in a byte array.</returns>
        </member>
        <member name="P:Aristocrat.Security.Cryptography.Umac.HashSize">
            <summary>
            Gets the size, in bits, of the computed hash code.
            </summary>
            <returns>The size, in bits, of the computed hash code.</returns>
        </member>
        <member name="P:Aristocrat.Security.Cryptography.Umac.IV">
            <summary>
            Gets or sets the initialization vector (IV) for the hash algorithm.
            </summary>
            <value>The initialization vector.</value>
            <exception cref="T:System.ArgumentNullException">An attempt was made to set the initialization vector to null.
            </exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">An attempt was made to set the 
            initialization vector to an invalid size.</exception>
        </member>
        <member name="P:Aristocrat.Security.Cryptography.Umac.Key">
            <summary>
            Gets or sets the key to use in the hash algorithm.
            </summary>
            <returns>The key to use in the hash algorithm.</returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">An attempt was made to change the 
            <see cref="P:System.Security.Cryptography.KeyedHashAlgorithm.Key"/> property after hashing has begun. </exception>
        </member>
        <member name="P:Aristocrat.Security.Cryptography.Umac.IsHashing">
            <summary>
            Gets a value indicating whether this algorithm is currently hashing.
            </summary>
            <value>true if this object is hashing, false if not.</value>
        </member>
        <member name="T:Aristocrat.Security.Cryptography.Umac128Managed">
            <summary>
            Computes the UMAC hash for the input data using the managed library.
            </summary>
        </member>
        <member name="M:Aristocrat.Security.Cryptography.Umac128Managed.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Aristocrat.Security.Cryptography.Umac128Managed"/> class.
            </summary>
        </member>
        <member name="M:Aristocrat.Security.Cryptography.Umac128Managed.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Aristocrat.Security.Cryptography.Umac128Managed"/> class.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:Aristocrat.Security.Cryptography.Umac128Managed.#ctor(System.String,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Aristocrat.Security.Cryptography.Umac128Managed"/> class.
            </summary>
            <param name="aesAlgorithmName">The name of the specific implementation of AES to use.</param>
            <param name="key">The key.</param>
        </member>
        <member name="P:Aristocrat.Security.Cryptography.Umac128Managed.HashSize">
            <summary>
            Gets the size, in bits, of the computed hash code.
            </summary>
            <returns>The size, in bits, of the computed hash code.</returns>
        </member>
        <member name="T:Aristocrat.Security.Cryptography.Umac32Managed">
            <summary>
            Computes a Hash-based Message Authentication Code (HMAC) using the SHA512 hash function.
            </summary>
        </member>
        <member name="M:Aristocrat.Security.Cryptography.Umac32Managed.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Aristocrat.Security.Cryptography.Umac32Managed"/> class.
            </summary>
        </member>
        <member name="M:Aristocrat.Security.Cryptography.Umac32Managed.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Aristocrat.Security.Cryptography.Umac32Managed"/> class.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:Aristocrat.Security.Cryptography.Umac32Managed.#ctor(System.String,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Aristocrat.Security.Cryptography.Umac32Managed"/> class.
            </summary>
            <param name="aesAlgorithmName">The name of the specific implementation of AES to use.</param>
            <param name="key">The key.</param>
        </member>
        <member name="P:Aristocrat.Security.Cryptography.Umac32Managed.HashSize">
            <summary>
            Gets the size, in bits, of the computed hash code.
            </summary>
            <returns>The size, in bits, of the computed hash code.</returns>
        </member>
        <member name="T:Aristocrat.Security.Cryptography.Umac64Managed">
            <summary>
            Computes the UMAC hash for the input data using the managed library.
            </summary>
        </member>
        <member name="M:Aristocrat.Security.Cryptography.Umac64Managed.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Aristocrat.Security.Cryptography.Umac64Managed"/> class.
            </summary>
        </member>
        <member name="M:Aristocrat.Security.Cryptography.Umac64Managed.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Aristocrat.Security.Cryptography.Umac64Managed"/> class.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:Aristocrat.Security.Cryptography.Umac64Managed.#ctor(System.String,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Aristocrat.Security.Cryptography.Umac64Managed"/> class.
            </summary>
            <param name="aesAlgorithmName">The name of the specific implementation of AES to use.</param>
            <param name="key">The key.</param>
        </member>
        <member name="P:Aristocrat.Security.Cryptography.Umac64Managed.HashSize">
            <summary>
            Gets the size, in bits, of the computed hash code.
            </summary>
            <returns>The size, in bits, of the computed hash code.</returns>
        </member>
        <member name="T:Aristocrat.Security.Cryptography.Umac96Managed">
            <summary>
            Computes the UMAC hash for the input data using the managed library.
            </summary>
        </member>
        <member name="M:Aristocrat.Security.Cryptography.Umac96Managed.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Aristocrat.Security.Cryptography.Umac96Managed"/> class.
            </summary>
        </member>
        <member name="M:Aristocrat.Security.Cryptography.Umac96Managed.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Aristocrat.Security.Cryptography.Umac96Managed"/> class.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:Aristocrat.Security.Cryptography.Umac96Managed.#ctor(System.String,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Aristocrat.Security.Cryptography.Umac96Managed"/> class.
            </summary>
            <param name="aesAlgorithmName">The name of the specific implementation of AES to use.</param>
            <param name="key">The key.</param>
        </member>
        <member name="P:Aristocrat.Security.Cryptography.Umac96Managed.HashSize">
            <summary>
            Gets the size, in bits, of the computed hash code.
            </summary>
            <returns>The size, in bits, of the computed hash code.</returns>
        </member>
        <member name="T:Aristocrat.Security.Cryptography.UmacAe">
            <summary>
            Provides the base implemeation of UMAC-AE encryption algorithm.
            </summary>
            <remarks>Implemented per UMAC-AE spec (https://tools.ietf.org/html/draft-krovetz-umac-ae-00).</remarks>
        </member>
        <member name="M:Aristocrat.Security.Cryptography.UmacAe.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Aristocrat.Security.Cryptography.UmacAe"/> class.
            </summary>
        </member>
        <member name="M:Aristocrat.Security.Cryptography.UmacAe.Create">
            <summary>
            Creates an instance of the default implementation of a Universal hashing Message Authentication Code 
            Authenticated-Encryption(UMAC-AE).
            </summary>
            <returns>A new UMAC-AE32 instance.</returns>
        </member>
        <member name="M:Aristocrat.Security.Cryptography.UmacAe.Create(System.String)">
            <summary>
            Creates an instance of the specified implementation of a Universal hashing Message Authentication Code 
            Authenticated-Encryption(UMAC-AE).
            </summary>
            <param name="algorithmName">The UMAC-AE implementation to use. The following table shows the valid values for 
            the <paramref name="algorithmName"/> parameter and the algorithms they map to.
            <list type="table">
              <listHeader>
                <term>Parameter value</term>
                <term>Implements</term>
              </listHeader>
              <item>
                <description>UmacAe32Managed</description>
                <description><see cref="T:Aristorcrat.Security.Cryptography.UmacAe32Managed"/></description>
              </item>
              <item>
                <description>Aristorcrat.Security.Cryptography.UmacAe32Managed</description>
                <description><see cref="T:Aristorcrat.Security.Cryptography.UmacAe32Managed"/></description>
              </item>
              <item>
                <description>UmacAe64Managed</description>
                <description><see cref="T:Aristorcrat.Security.Cryptography.UmacAe64Managed"/></description>
              </item>
              <item>
                <description>Aristorcrat.Security.Cryptography.UmacAe64Managed</description>
                <description><see cref="T:Aristorcrat.Security.Cryptography.UmacAe64Managed"/></description>
              </item>
              <item>
                <description>UmacAe96Managed</description>
                <description><see cref="T:Aristorcrat.Security.Cryptography.UmacAe96Managed"/></description>
              </item>
              <item>
                <description>Aristorcrat.Security.Cryptography.UmacAe96Managed</description>
                <description><see cref="T:Aristorcrat.Security.Cryptography.UmacAe96Managed"/></description>
              </item>
              <item>
                <description>UmacAe128Managed</description>
                <description><see cref="T:Aristorcrat.Security.Cryptography.UmacAe128Managed"/></description>
              </item>
              <item>
                <description>Aristorcrat.Security.Cryptography.UmacAe128Managed</description>
                <description><see cref="T:Aristorcrat.Security.Cryptography.UmacAe128Managed"/></description>
              </item>
            </list></param>
            <returns>A new instance of the specified UMAC-AE implementation.</returns>
        </member>
        <member name="M:Aristocrat.Security.Cryptography.UmacAe.CreateDecryptor(System.Byte[],System.Byte[])">
            <summary>
            Creates a symmetric <see cref="T:Aristocrat.Security.Cryptography.UmacAe" /> decryptor object with the specified 
            <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Key" /> and initialization vector 
            (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV"/>).
            </summary>
            <param name="rgbKey">The secret key to be used for the symmetric algorithm. The key size must be 8 bytes.</param>
            <param name="rgbIV">The IV to be used for the symmetric algorithm.</param>
            <returns>A symmetric <see cref="T:Aristocrat.Security.Cryptography.UmacAe"/> decryptor object.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="rgbKey"/> parameter is null.-or-The 
            <paramref name="rgbIV"/> parameter is null.</exception>
        </member>
        <member name="M:Aristocrat.Security.Cryptography.UmacAe.CreateEncryptor(System.Byte[],System.Byte[])">
            <summary>
            Creates a symmetric <see cref="T:Aristocrat.Security.Cryptography.UmacAe"/> encryptor object with the specified 
            <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Key"/> and initialization vector 
            (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV"/>).
            </summary>
            <param name="rgbKey">The secret key to be used for the symmetric algorithm. The key size must be 8 bytes.</param>
            <param name="rgbIV">The IV to be used for the symmetric algorithm. </param>
            <returns>A symmetric <see cref="T:Aristocrat.Security.Cryptography.UmacAe"/> encryptor object.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="rgbKey"/> parameter is null.-or-The 
            <paramref name="rgbIV"/> parameter is null.</exception>
        </member>
        <member name="M:Aristocrat.Security.Cryptography.UmacAe.GenerateIV">
            <summary>
            Generates a random initialization vector (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV"/>) to
             be used for the algorithm.
            </summary>
        </member>
        <member name="M:Aristocrat.Security.Cryptography.UmacAe.GenerateKey">
            <summary>
            Generates a random <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Key"/> to be used for the algorithm.
            </summary>
        </member>
        <member name="M:Aristocrat.Security.Cryptography.UmacAe.GenerateHashAlgorithm">
            <summary>
            Generates a <see cref="T:Aristocrat.Security.Cryptography.Umac"/> hash algorithm to be used for the algorithm.
            </summary>
            <returns>The hash algorithm.</returns>
        </member>
        <member name="P:Aristocrat.Security.Cryptography.UmacAe.IV">
            <summary>
            Gets or sets the initialization vector (IV) for the symmetric algorithm.
            </summary>
            <value>The initialization vector.</value>
            <remarks>For UMAC-AE, the initialization vector (IV) is not a block, but rather a hash seed so only an IV of 
            length 8 bytes will be accepted.</remarks>
            <exception cref="T:System.ArgumentNullException">An attempt was made to set the initialization vector to null.
            </exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">An attempt was made to set the 
            initialization vector to an invalid size.</exception>
        </member>
        <member name="P:Aristocrat.Security.Cryptography.UmacAe.LegalKeySizes">
            <summary>
            Gets the key sizes, in bits, that are supported by the symmetric algorithm.
            </summary>
            <returns>An array that contains the key sizes supported by the algorithm.</returns>
        </member>
        <member name="P:Aristocrat.Security.Cryptography.UmacAe.LegalBlockSizes">
            <summary>
            Gets the block sizes, in bits, that are supported by the symmetric algorithm.
            </summary>
            <returns>An array that contains the block sizes supported by the algorithm.</returns>
        </member>
        <member name="T:Aristocrat.Security.Cryptography.UmacAe128Managed">
            <summary>
            Provides the base implemeation of UMAC-AE encryption algorithm.
            </summary>
            <remarks>Implemented per UMAC-AE spec (https://tools.ietf.org/html/draft-krovetz-umac-ae-00).</remarks>
        </member>
        <member name="M:Aristocrat.Security.Cryptography.UmacAe128Managed.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Aristocrat.Security.Cryptography.UmacAe128Managed"/> class.
            </summary>
        </member>
        <member name="M:Aristocrat.Security.Cryptography.UmacAe128Managed.GenerateHashAlgorithm">
            <summary>
            Generates a <see cref="T:Aristocrat.Security.Cryptography.Umac"/> hash algorithm to be used for the algorithm.
            </summary>
            <returns>The hash algorithm.</returns>
        </member>
        <member name="T:Aristocrat.Security.Cryptography.UmacAe32Managed">
            <summary>
            Provides the base implemeation of UMAC-AE encryption algorithm.
            </summary>
            <remarks>Implemented per UMAC-AE spec (https://tools.ietf.org/html/draft-krovetz-umac-ae-00).</remarks>
        </member>
        <member name="M:Aristocrat.Security.Cryptography.UmacAe32Managed.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Aristocrat.Security.Cryptography.UmacAe32Managed"/> class.
            </summary>
        </member>
        <member name="M:Aristocrat.Security.Cryptography.UmacAe32Managed.GenerateHashAlgorithm">
            <summary>
            Generates a <see cref="T:Aristocrat.Security.Cryptography.Umac"/> hash algorithm to be used for the algorithm.
            </summary>
            <returns>The hash algorithm.</returns>
        </member>
        <member name="T:Aristocrat.Security.Cryptography.UmacAe64Managed">
            <summary>
            Provides the base implemeation of UMAC-AE encryption algorithm.
            </summary>
            <remarks>Implemented per UMAC-AE spec (https://tools.ietf.org/html/draft-krovetz-umac-ae-00).</remarks>
        </member>
        <member name="M:Aristocrat.Security.Cryptography.UmacAe64Managed.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Aristocrat.Security.Cryptography.UmacAe64Managed"/> class.
            </summary>
        </member>
        <member name="M:Aristocrat.Security.Cryptography.UmacAe64Managed.GenerateHashAlgorithm">
            <summary>
            Generates a <see cref="T:Aristocrat.Security.Cryptography.Umac"/> hash algorithm to be used for the algorithm.
            </summary>
            <returns>The hash algorithm.</returns>
        </member>
        <member name="T:Aristocrat.Security.Cryptography.UmacAe96Managed">
            <summary>
            Provides the base implemeation of UMAC-AE encryption algorithm.
            </summary>
            <remarks>Implemented per UMAC-AE spec (https://tools.ietf.org/html/draft-krovetz-umac-ae-00).</remarks>
        </member>
        <member name="M:Aristocrat.Security.Cryptography.UmacAe96Managed.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Aristocrat.Security.Cryptography.UmacAe96Managed"/> class.
            </summary>
        </member>
        <member name="M:Aristocrat.Security.Cryptography.UmacAe96Managed.GenerateHashAlgorithm">
            <summary>
            Generates a <see cref="T:Aristocrat.Security.Cryptography.Umac"/> hash algorithm to be used for the algorithm.
            </summary>
            <returns>The hash algorithm.</returns>
        </member>
        <member name="M:Aristocrat.Security.Cryptography.UmacAeTransform.Dispose">
            <summary>
            Release allocated resources.
            </summary>
        </member>
        <member name="M:Aristocrat.Security.Cryptography.UmacAeTransform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Transforms the specified region of the input byte array and copies the resulting transform to the specified region of the output byte array.
            </summary>
            <returns>The number of bytes written.</returns>
            <param name="inputBuffer">The input for which to compute the transform.</param>
            <param name="inputOffset">The offset into the input byte array from which to begin using data.</param>
            <param name="inputCount">The number of bytes in the input byte array to use as data.</param>
            <param name="outputBuffer">The output to which to write the transform.</param>
            <param name="outputOffset">The offset into the output byte array from which to begin writing data. </param>
        </member>
        <member name="M:Aristocrat.Security.Cryptography.UmacAeTransform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Transforms the specified region of the specified byte array.
            </summary>
            <returns>The computed transform.</returns>
            <param name="inputBuffer">The input for which to compute the transform.</param>
            <param name="inputOffset">The offset into the byte array from which to begin using data.</param>
            <param name="inputCount">The number of bytes in the byte array to use as data.</param>
        </member>
        <member name="M:Aristocrat.Security.Cryptography.UmacAeTransform.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used and optionally releases the managed resources.
            </summary>
            <param name="disposing"><b>true</b> to release both managed and unmanaged resources; <b>false</b> to release 
            only unmanaged resources.</param>
        </member>
        <member name="T:Aristocrat.Security.Signature">
            <summary>
                Digital signature utility.
            </summary>
        </member>
        <member name="M:Aristocrat.Security.Signature.Verify(System.String,System.String,System.Int32,System.String)">
            <summary>
                Verifies a given string against the signed data.
            </summary>
            <param name="buffer">The data that was signed.</param>
            <param name="signature">The signature data to be verified.</param>
            <param name="keySize">The size of the key to use in bits.</param>
            <param name="key">The XML string containing System.Security.Cryptography.RSA key information.</param>
            <returns>
                true if it succeeds, false if it fails.
            </returns>
        </member>
        <member name="M:Aristocrat.Security.Signature.Verify(System.Byte[],System.Byte[],System.Int32,System.String)">
            <summary>
                Verifies a given string against the signed data.
            </summary>
            <param name="buffer">The data that was signed.</param>
            <param name="signature">The signature data to be verified.</param>
            <param name="keySize">The size of the key to use in bits.</param>
            <param name="key">The XML string containing System.Security.Cryptography.RSA key information.</param>
            <returns>
                true if it succeeds, false if it fails.
            </returns>
        </member>
        <member name="M:Aristocrat.Security.Signature.Verify(System.Byte[],System.Byte[],System.Int32,System.String,System.Object)">
            <summary>
                Verifies a given string against the signed data.
            </summary>
            <param name="buffer">The data that was signed.</param>
            <param name="signature">The signature data to be verified.</param>
            <param name="keySize">The size of the key to use in bits.</param>
            <param name="key">The XML string containing System.Security.Cryptography.RSA key information.</param>
            <param name="hashAlgorithm">The name of the hash algorithm used to create the hash value of the data.</param>
            <returns>
                true if it succeeds, false if it fails.
            </returns>
        </member>
        <member name="M:Aristocrat.Security.Signature.Sign(System.String)">
            <summary>
                Gets the signature of the provided buffer.
            </summary>
            <param name="buffer">The data to sign.</param>
            <returns>
                The signature, key size, and public key.
            </returns>
        </member>
        <member name="M:Aristocrat.Security.Signature.Sign(System.String,System.Int32)">
            <summary>
                Gets the signature of the provided buffer.
            </summary>
            <param name="buffer">	The data to sign.</param>
            <param name="keySize">  The key size.</param>
            <returns>
                The signature, key size, and public key.
            </returns>
        </member>
        <member name="M:Aristocrat.Security.Signature.Sign(System.Byte[])">
            <summary>
                Gets the signature of the provided buffer.
            </summary>
            <param name="buffer">The data to sign.</param>
            <returns>
                The signature, key size, and public key.
            </returns>
        </member>
        <member name="M:Aristocrat.Security.Signature.Sign(System.Byte[],System.Int32)">
            <summary>
                Gets the signature of the provided buffer.
            </summary>
            <param name="buffer">	The data to sign.</param>
            <param name="keySize">  The key size.</param>
            <returns>
                The signature, key size, and public key.
            </returns>
        </member>
        <member name="M:Aristocrat.Security.Signature.Sign(System.Byte[],System.Int32,System.Object)">
            <summary>
                Gets the signature of the provided buffer.
            </summary>
            <param name="buffer"> The data to sign.</param>
            <param name="keySize">The key size.</param>
            <param name="hashAlgorithm">   The name of the hash algorithm used to create the hash value of the data.</param>
            <returns>
                The signature, key size, and public key.
            </returns>
        </member>
        <member name="T:Aristocrat.Text.Base64Encoding">
            <summary>
            Represents a base 64 character encoding of Unicode characters.
            </summary>
        </member>
        <member name="M:Aristocrat.Text.Base64Encoding.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Aristocrat.Text.Base64Encoding"/> class.
            </summary>
        </member>
        <member name="M:Aristocrat.Text.Base64Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
            <summary>
            Calculates the number of bytes produced by encoding a set of characters from the specified character array.
            </summary>
            <param name="chars">The character array containing the set of characters to encode.</param>
            <param name="index">The index of the first character to encode.</param>
            <param name="count">The number of characters to encode.</param>
            <returns>The number of bytes produced by encoding the specified characters.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">index or count is less than zero.-or- index and count do 
            not denote a valid range in chars.</exception>
            <exception cref="T:System.ArgumentNullException">chars is null.</exception>
        </member>
        <member name="M:Aristocrat.Text.Base64Encoding.GetBytes(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Encodes a set of characters from the specified character array into the specified byte array.
            </summary>
            <param name="chars">The byte array containing the set of characters to encode.</param>
            <param name="charIndex">The index of the first character to encode.</param>
            <param name="charCount">The number of characters to encode.</param>
            <param name="bytes">The byte array to contain the resulting sequence of bytes.</param>
            <param name="byteIndex">The index at which to start writing the resulting sequence of bytes.</param>
            <returns>The actual number of bytes written into bytes.</returns>
            <exception cref="T:System.ArgumentNullException">chars is null.-or- bytes is null.</exception>
            <exception cref="T:System.ArgumentException">bytes does not have enough capacity from byteIndex to the end of the array 
            to accommodate the resulting bytes.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">charIndex or charCount or byteIndex is less than zero.-or- 
            charIndex and charCount do not denote a valid range in chars.-or- byteIndex is not a valid index in bytes.
            </exception>
        </member>
        <member name="M:Aristocrat.Text.Base64Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Encodes a set of characters from the specified character array into the specified byte array.
            </summary>
            <param name="chars">The character array containing the set of characters to encode.</param>
            <param name="charIndex">The index of the first character to encode.</param>
            <param name="charCount">The number of characters to encode.</param>
            <param name="bytes">The byte array to contain the resulting sequence of bytes.</param>
            <param name="byteIndex">The index at which to start writing the resulting sequence of bytes.</param>
            <returns>The actual number of bytes written into bytes.</returns>
            <exception cref="T:System.ArgumentNullException">chars is null.-or- bytes is null.</exception>
            <exception cref="T:System.ArgumentException">bytes does not have enough capacity from byteIndex to the end of the array 
            to accommodate the resulting bytes.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">charIndex or charCount or byteIndex is less than zero.-or- 
            charIndex and charCount do not denote a valid range in chars.-or- byteIndex is not a valid index in bytes.
            </exception>
        </member>
        <member name="M:Aristocrat.Text.Base64Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Calculates the number of characters produced by decoding a sequence of bytes from the specified byte array.
            </summary>
            <param name="bytes">The byte array containing the sequence of bytes to decode.</param>
            <param name="index">The index of the first byte to decode.</param>
            <param name="count">The number of bytes to decode.</param>
            <returns>The number of characters produced by decoding the specified sequence of bytes.</returns>
            <exception cref="T:System.ArgumentNullException">bytes is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index or count is less than zero.-or- index and count do not 
            denote a valid range in bytes.</exception>
        </member>
        <member name="M:Aristocrat.Text.Base64Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Decodes a sequence of bytes from the specified byte array into the specified character array.
            </summary>
            <param name="bytes">The byte array containing the sequence of bytes to decode.</param>
            <param name="byteIndex">The index of the first byte to decode.</param>
            <param name="byteCount">The number of bytes to decode.</param>
            <param name="chars">The byte array to contain the resulting set of characters.</param>
            <param name="charIndex">The index at which to start writing the resulting set of characters.</param>
            <returns>The actual number of characters written into chars.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">byteIndex or byteCount or charIndex is less than zero.-or- 
            byteIndex and byteCount do not denote a valid range in bytes.-or- charIndex is not a valid index in chars.
            </exception>
            <exception cref="T:System.ArgumentNullException">bytes is null.-or- chars is null.</exception>
            <exception cref="T:System.ArgumentException">chars does not have enough capacity from charIndex to the end of the 
            array to accommodate the resulting characters.</exception>
        </member>
        <member name="M:Aristocrat.Text.Base64Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
            <summary>
            Decodes a sequence of bytes from the specified byte array into the specified character array.
            </summary>
            <param name="bytes">The byte array containing the sequence of bytes to decode.</param>
            <param name="byteIndex">The index of the first byte to decode.</param>
            <param name="byteCount">The number of bytes to decode.</param>
            <param name="chars">The character array to contain the resulting set of characters.</param>
            <param name="charIndex">The index at which to start writing the resulting set of characters.</param>
            <returns>The actual number of characters written into chars.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">byteIndex or byteCount or charIndex is less than zero.-or- 
            byteIndex and byteCount do not denote a valid range in bytes.-or- charIndex is not a valid index in chars.
            </exception>
            <exception cref="T:System.ArgumentNullException">bytes is null.-or- chars is null.</exception>
            <exception cref="T:System.ArgumentException">chars does not have enough capacity from charIndex to the end of the array 
            to accommodate the resulting characters.</exception>
        </member>
        <member name="M:Aristocrat.Text.Base64Encoding.GetMaxByteCount(System.Int32)">
            <summary>
            Calculates the maximum number of bytes produced by encoding the specified number of characters.
            </summary>
            <param name="charCount">The number of characters to encode.</param>
            <returns>The maximum number of bytes produced by encoding the specified number of characters.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">charCount is less than zero.</exception>
        </member>
        <member name="M:Aristocrat.Text.Base64Encoding.GetMaxCharCount(System.Int32)">
            <summary>
            Calculates the maximum number of characters produced by decoding the specified number of bytes.
            </summary>
            <param name="byteCount">The number of bytes to decode.</param>
            <returns>The maximum number of characters produced by decoding the specified number of bytes.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">byteCount is less than zero.</exception>
        </member>
        <member name="T:Aristocrat.Text.BinHexEncoding">
            <summary>
            Represents a binary hexadecimal character encoding of Unicode characters.
            </summary>
        </member>
        <member name="M:Aristocrat.Text.BinHexEncoding.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Aristocrat.Text.BinHexEncoding"/> class.
            </summary>
        </member>
        <member name="M:Aristocrat.Text.BinHexEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
            <summary>
            Calculates the number of bytes produced by encoding a set of characters from the specified character array.
            </summary>
            <param name="chars">The character array containing the set of characters to encode.</param>
            <param name="index">The index of the first character to encode.</param>
            <param name="count">The number of characters to encode.</param>
            <returns>The number of bytes produced by encoding the specified characters.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">index or count is less than zero.-or- index and count do not 
            denote a valid range in chars.</exception>
            <exception cref="T:System.ArgumentNullException">chars is null.</exception>
        </member>
        <member name="M:Aristocrat.Text.BinHexEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Encodes a set of characters from the specified character array into the specified byte array.
            </summary>
            <param name="chars">The character array containing the set of characters to encode.</param>
            <param name="charIndex">The index of the first character to encode.</param>
            <param name="charCount">The number of characters to encode.</param>
            <param name="bytes">The byte array to contain the resulting sequence of bytes.</param>
            <param name="byteIndex">The index at which to start writing the resulting sequence of bytes.</param>
            <returns>The actual number of bytes written into bytes.</returns>
            <exception cref="T:System.ArgumentNullException">chars is null.-or- bytes is null.</exception>
            <exception cref="T:System.ArgumentException">bytes does not have enough capacity from byteIndex to the end of the array 
            to accommodate the resulting bytes.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">charIndex or charCount or byteIndex is less than zero.-or- 
            charIndex and charCount do not denote a valid range in chars.-or- byteIndex is not a valid index in bytes.
            </exception>
        </member>
        <member name="M:Aristocrat.Text.BinHexEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Calculates the number of characters produced by decoding a sequence of bytes from the specified byte array.
            </summary>
            <param name="bytes">The byte array containing the sequence of bytes to decode.</param>
            <param name="index">The index of the first byte to decode.</param>
            <param name="count">The number of bytes to decode.</param>
            <returns>The number of characters produced by decoding the specified sequence of bytes.</returns>
            <exception cref="T:System.ArgumentNullException">bytes is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index or count is less than zero.-or- index and count do not 
            denote a valid range in bytes.</exception>
        </member>
        <member name="M:Aristocrat.Text.BinHexEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
            <summary>
            Decodes a sequence of bytes from the specified byte array into the specified character array.
            </summary>
            <param name="bytes">The byte array containing the sequence of bytes to decode.</param>
            <param name="byteIndex">The index of the first byte to decode.</param>
            <param name="byteCount">The number of bytes to decode.</param>
            <param name="chars">The character array to contain the resulting set of characters.</param>
            <param name="charIndex">The index at which to start writing the resulting set of characters.</param>
            <returns>The actual number of characters written into chars.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">byteIndex or byteCount or charIndex is less than zero.-or- 
            byteIndex and byteCount do not denote a valid range in bytes.-or- charIndex is not a valid index in chars.
            </exception>
            <exception cref="T:System.ArgumentNullException">bytes is null.-or- chars is null.</exception>
            <exception cref="T:System.ArgumentException">chars does not have enough capacity from charIndex to the end of the array 
            to accommodate the resulting characters.</exception>
        </member>
        <member name="M:Aristocrat.Text.BinHexEncoding.GetMaxByteCount(System.Int32)">
            <summary>
            Calculates the maximum number of bytes produced by encoding the specified number of characters.
            </summary>
            <param name="charCount">The number of characters to encode.</param>
            <returns>The maximum number of bytes produced by encoding the specified number of characters.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">charCount is less than zero.</exception>
        </member>
        <member name="M:Aristocrat.Text.BinHexEncoding.GetMaxCharCount(System.Int32)">
            <summary>
            Calculates the maximum number of characters produced by decoding the specified number of bytes.
            </summary>
            <param name="byteCount">The number of bytes to decode.</param>
            <returns>The maximum number of characters produced by decoding the specified number of bytes.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">byteCount is less than zero.</exception>
        </member>
        <member name="T:Aristocrat.NativeMethods.REG_TIME_ZONE_INFORMATION">
            <summary>
            Helper struct for use with the Win32 API calls.
            This represents the TZI binary field in the registry entry :
            hklm\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Time Zones\\*\\TZI
            </summary>
        </member>
        <member name="T:Aristocrat.NativeMethods.TIME_ZONE_INFORMATION">
            <summary>
            Helper struct for use with the Win32 Timzone API calls
            This represents how the current timezone is stored in the registry :
            HLM\\SYSTEM\\CurrentControlSet\\Control\\TimeZoneInformation\\
            </summary>
        </member>
        <member name="T:Aristocrat.Threading.IAsyncResult`1">
            <summary>
            Represents the status of an asynchronous operation.
            </summary>
            <typeparam name="TResult">The result type of an asynchronous operation.</typeparam>
        </member>
        <member name="P:Aristocrat.Threading.IAsyncResult`1.Result">
            <summary>
            Gets the result of an asynchronous operation.
            </summary>
        </member>
        <member name="T:Aristocrat.Threading.AsyncResult">
            <summary>
            A generic base class for <see cref="T:System.IAsyncResult"/> implementations that wraps a 
            <see cref="T:System..Threading.ManualResetEventSlim"/>.
            </summary>
        </member>
        <member name="M:Aristocrat.Threading.AsyncResult.#ctor(System.AsyncCallback,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Aristocrat.Threading.AsyncResult"/> class.
            </summary>
            <param name="callback">The callback method to call when the operation has completed.</param>
            <param name="state">A user-defined object that qualifies or contains information about an asynchronous 
            operation.</param>
        </member>
        <member name="M:Aristocrat.Threading.AsyncResult.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:AsyncResult"/> class.
            </summary>
        </member>
        <member name="M:Aristocrat.Threading.AsyncResult.Dispose">
            <summary>
            Release allocated resources.
            </summary>
        </member>
        <member name="M:Aristocrat.Threading.AsyncResult.Complete(System.Boolean)">
            <summary>
            Call this version of complete when your asynchronous operation is complete.  This will update the state of the 
            operation and notify the callback.
            </summary>
            <param name="completedSynchronously">A flag indicating if operation was completed synchronously.</param>
        </member>
        <member name="M:Aristocrat.Threading.AsyncResult.Complete(System.Boolean,System.Exception)">
            <summary>
            Call this version of complete if you raise an exception during processing.  In addition to notifying the 
            callback, it will capture the exception and store it to be thrown during <see cref="M:End"/>.
            </summary>
            <param name="completedSynchronously">A flag indicating if operation was completed synchronously.</param>
            <param name="exception">The exception to be thrown when the operation is ended.</param>
        </member>
        <member name="M:Aristocrat.Threading.AsyncResult.End``1(System.IAsyncResult)">
            <summary>
            End should be called when the End function for the asynchronous operation is complete.  It ensures the 
            asynchronous operation is complete, and does some common validation.
            </summary>
            <typeparam name="T">The type of <see cref="T:AsyncResult"/> to end.</typeparam>
            <param name="result">The <see cref="T:AsyncResult"/> to end.</param>
            <returns>The ended <see cref="T:AsyncResult"/>.</returns>
        </member>
        <member name="M:Aristocrat.Threading.AsyncResult.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:Aristocrat.Threading.AsyncResult"/> and optionally releases the managed 
            resources.
            </summary>
            <param name="disposing"><b>true</b> to release both managed and unmanaged resources; <b>false</b> to release 
            only unmanaged resources.</param>
        </member>
        <member name="P:Aristocrat.Threading.AsyncResult.AsyncState">
            <summary>
            Gets a user-defined object that qualifies or contains information about an asynchronous operation.
            </summary>
        </member>
        <member name="P:Aristocrat.Threading.AsyncResult.AsyncWaitHandle">
            <summary>
            Gets a <see cref="T:WaitHandle"/> that is used to wait for an asynchronous operation to complete.
            </summary>
        </member>
        <member name="P:Aristocrat.Threading.AsyncResult.CompletedSynchronously">
            <summary>
            Gets a value that indicates whether the asynchronous operation completed synchronously.
            </summary>
        </member>
        <member name="P:Aristocrat.Threading.AsyncResult.IsCompleted">
            <summary>
            Gets a value that indicates whether the asynchronous operation has completed.
            </summary>
        </member>
        <member name="T:Aristocrat.Threading.AsyncResult`1">
            <summary>
            A strongly typed AsyncResult
            </summary>
            <typeparam name="T">Specifies the return type of asynchronous operation.</typeparam>
        </member>
        <member name="M:Aristocrat.Threading.AsyncResult`1.#ctor(System.AsyncCallback,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Aristocrat.Threading.AsyncResult{T}"/> class.
            </summary>
            <param name="callback">The callback method to call when the operation has completed.</param>
            <param name="state">State data to make accessible on callbacks.</param>
        </member>
        <member name="M:Aristocrat.Threading.AsyncResult`1.End(System.IAsyncResult)">
            <summary>
            End should be called when the End function for the asynchronous operation is complete.  It ensures the 
            asynchronous operation is complete, and does some common validation.
            </summary>
            <param name="result">The <see cref="T:AsyncResult"/> to end.</param>
            <returns>The ended <see cref="T:AsyncResult"/>.</returns>
        </member>
        <member name="M:Aristocrat.Threading.AsyncResult`1.Complete(`0,System.Boolean)">
            <summary>
            Call this version of complete when your asynchronous operation is complete.  This will update the state of the 
            operation and notify the callback.
            </summary>
            <param name="result">The result of the asynchronous operation.</param>
            <param name="completedSynchronously">A flag indicating if operation was completed synchronously.</param>
        </member>
        <member name="P:Aristocrat.Threading.AsyncResult`1.Result">
            <summary>
            Gets the result value of this <see cref="T:Aristocrat.Threading.AsyncResult{T}"/>.
            </summary>
        </member>
        <member name="T:Aristocrat.Threading.IScheduler">
            <summary>
            Interface for scheduler.
            </summary>
        </member>
        <member name="T:Aristocrat.Threading.ManualResetEvent`1">
            <summary>
            Notifies one or more waiting threads that an event has occurred.
            </summary>
        </member>
        <member name="M:Aristocrat.Threading.ManualResetEvent`1.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Aristocrat.Threading.ManualResetEvent`1" /> class.
            </summary>
            <param name="initialState"><b>true</b> to set the initial state to signaled; <b>false</b> to set it to 
            nonsignaled.</param>
        </member>
        <member name="M:Aristocrat.Threading.ManualResetEvent`1.#ctor(System.Boolean,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Aristocrat.Threading.ManualResetEvent`1" /> class.
            </summary>
            <param name="initialState"><b>true</b> to set the initial state to signaled; <b>false</b> to set it to 
            nonsignaled.</param>
            <param name="result">The result object.</param>
        </member>
        <member name="M:Aristocrat.Threading.ManualResetEvent`1.Set(`0)">
            <summary>
            Sets the state of the event to signaled, allowing one or more waiting threads to proceed.
            </summary>
            <param name="result">The result object.</param>
            <returns><b>true</b> if the operation succeeds; otherwise, <b>false</b>.</returns>
        </member>
        <member name="P:Aristocrat.Threading.ManualResetEvent`1.Result">
            <summary>
            Gets or sets the result object.
            </summary>
        </member>
        <member name="T:Aristocrat.Threading.PriorityQueue`1">
            <summary>
            A priority queue object is a synchronization object whose state is set to signaled when an item is enqueued.
            </summary>
        </member>
        <member name="M:Aristocrat.Threading.PriorityQueue`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PriorityQueue{T}"/> class that is empty and has the default 
            initial capacity.
            </summary>
        </member>
        <member name="M:Aristocrat.Threading.PriorityQueue`1.Dequeue">
            <summary>
            Gets the top item from the queue
            </summary>
            <returns>The object that is removed from the beginning of the <see cref="T:PriorityQueue{T}"/>.</returns>
        </member>
        <member name="M:Aristocrat.Threading.PriorityQueue`1.Dispose">
            <summary>
            Release allocated resources.
            </summary>
        </member>
        <member name="M:Aristocrat.Threading.PriorityQueue`1.Enqueue(`0)">
            <summary>
            Added an item to the bottom of the queue
            </summary>
            <param name="item">The object to add to the <see cref="T:PriorityQueue{T}"/>. The value can be null for 
            reference types.</param>
        </member>
        <member name="M:Aristocrat.Threading.PriorityQueue`1.Enqueue(`0,Aristocrat.Threading.QueuePriority)">
            <summary>
            Added an item to the bottom of the queue
            </summary>
            <param name="item">The object to add to the <see cref="T:PriorityQueue{T}"/>. The value can be null for 
            reference types.</param>
            <param name="priority">The queue priority for the item.</param>
        </member>
        <member name="M:Aristocrat.Threading.PriorityQueue`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:PriorityQueue{T}"/>.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator{T}"/> for the <see cref="T:PriorityQueue{T}"/>.</returns>
        </member>
        <member name="M:Aristocrat.Threading.PriorityQueue`1.Peek">
            <summary>
            Returns the object at the beginning of the queue without removing it.
            </summary>
            <returns>The object at the beginning of the queue.</returns>
        </member>
        <member name="M:Aristocrat.Threading.PriorityQueue`1.TrimExcess">
            <summary>
            Sets the capacity to the actual number of elements in the queue, if that number is less than 90 percent of 
            current capacity.
            </summary>
        </member>
        <member name="M:Aristocrat.Threading.PriorityQueue`1.WaitOne">
            <summary>
            Blocks the current thread until an item is enqueued.
            </summary>
            <returns><b>true</b> if the current instance receives a signal; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Aristocrat.Threading.PriorityQueue`1.WaitOne(System.Int32)">
            <summary>
            Blocks the current thread until an item is enqueued.
            </summary>
            <param name="millisecondsTimeout"> The number of milliseconds to wait, or <see cref="F:Timeout.Infinite"/> (-1) 
            to wait indefinitely.</param>
            <returns><b>true</b> if the current instance receives a signal; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Aristocrat.Threading.PriorityQueue`1.WaitOne(System.TimeSpan)">
            <summary>
            Blocks the current thread until an item is enqueued.
            </summary>
            <param name="timeout">A <see cref="T:System.TimeSpan"/> that represents the number of milliseconds to wait, or a 
            <see cref="T:System.TimeSpan"/> that represents -1 milliseconds to wait indefinitely.</param>
            <returns><b>true</b> if the current instance receives a signal; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Aristocrat.Threading.PriorityQueue`1.WaitOne(System.Int32,System.Boolean)">
            <summary>
            Blocks the current thread until an item is enqueued.
            </summary>
            <param name="millisecondsTimeout"> The number of milliseconds to wait, or <see cref="F:Timeout.Infinite"/> (-1) 
            to wait indefinitely.</param>
            <param name="exitContext"><b>true</b> to exit the synchronization domain for the context before the wait (if in a 
            synchronized context), and reacquire it afterward; otherwise, <b>false</b>.</param>
            <returns><b>true</b> if the current instance receives a signal; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Aristocrat.Threading.PriorityQueue`1.WaitOne(System.TimeSpan,System.Boolean)">
            <summary>
            Blocks the current thread until an item is enqueued.
            </summary>
            <param name="timeout">A <see cref="T:System.TimeSpan"/> that represents the number of milliseconds to wait, or a 
            <see cref="T:System.TimeSpan"/> that represents -1 milliseconds to wait indefinitely.</param>
            <param name="exitContext"><b>true</b> to exit the synchronization domain for the context before the wait (if in 
            a synchronized context), and reacquire it afterward; otherwise, <b>false</b>.</param>
            <returns><b>true</b> if the current instance receives a signal; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Aristocrat.Threading.PriorityQueue`1.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources and optionally releases the managed resources.
            </summary>
            <param name="disposing"><b>true</b> to release both managed and unmanaged resources; <b>false</b> to release 
            only unmanaged resources.</param>
        </member>
        <member name="P:Aristocrat.Threading.PriorityQueue`1.Count">
            <summary>
            Gets the number of items in the queue.
            </summary>
        </member>
        <member name="T:Aristocrat.Threading.PrioritySynchronization">
            <summary>
            Provides a way to synchronously or asynchronously execute a delegate with default implementation with a priority 
            queue.
            </summary>
        </member>
        <member name="E:Aristocrat.Threading.PrioritySynchronization.NotificationThresholdReached">
            <summary>
            Occurs whenever the <see cref="P:NotificationThreshold"/> is reached or exceeded.
            </summary>
        </member>
        <member name="M:Aristocrat.Threading.PrioritySynchronization.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PrioritySynchronization"/> class.
            </summary>
        </member>
        <member name="M:Aristocrat.Threading.PrioritySynchronization.#ctor(System.Threading.ThreadPriority)">
            <summary>
            Initializes a new instance of the <see cref="T:PrioritySynchronization"/> class.
            </summary>
            <param name="priority">The scheduling priority of a thread.</param>
        </member>
        <member name="M:Aristocrat.Threading.PrioritySynchronization.#ctor(System.Threading.ThreadPriority,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PrioritySynchronization"/> class.
            </summary>
            <param name="priority">The scheduling priority of a thread.</param>
            <param name="threadName">The name of the thread.</param>
        </member>
        <member name="M:Aristocrat.Threading.PrioritySynchronization.Dispose">
            <summary>
            Release allocated resources.
            </summary>
        </member>
        <member name="M:Aristocrat.Threading.PrioritySynchronization.BeginInvoke(System.Action)">
            <summary>
            Executes the specified delegate asynchronously with the specified arguments, on the thread that the object's 
            underlying handle was created on.
            </summary>
            <param name="action">A delegate to an <see cref="T:System.Action"/> method.</param>
            <returns>An <see cref="T:IAsyncResult"/> that represents the result of the <see cref="M:BeginInvoke"/> 
            operation.</returns>
        </member>
        <member name="M:Aristocrat.Threading.PrioritySynchronization.BeginInvoke(Aristocrat.Threading.QueuePriority,System.Action)">
            <summary>
            Executes the specified delegate asynchronously with the specified arguments, on the thread that the object's 
            underlying handle was created on.
            </summary>
            <param name="priority">The scheduling priority of the delegate.</param>
            <param name="action">A delegate to an <see cref="T:System.Action"/> method.</param>
            <returns>An <see cref="T:IAsyncResult"/> that represents the result of the <see cref="M:BeginInvoke"/> 
            operation.</returns>
        </member>
        <member name="M:Aristocrat.Threading.PrioritySynchronization.BeginInvoke``1(System.Action{``0},``0)">
            <summary>
            Executes the specified delegate asynchronously with the specified arguments, on the thread that the object's 
            underlying handle was created on.
            </summary>
            <typeparam name="T">The type of the parameter of the method that the delegate encapsulates.</typeparam>
            <param name="action">The action delegate to execute.</param>
            <param name="state">An object containing data to be used by the action delegate.</param>
            <returns>An <see cref="T:IAsyncResult"/> that represents the result of the <see cref="M:BeginInvoke"/> 
            operation.</returns>
        </member>
        <member name="M:Aristocrat.Threading.PrioritySynchronization.BeginInvoke``1(Aristocrat.Threading.QueuePriority,System.Action{``0},``0)">
            <summary>
            Executes the specified delegate asynchronously with the specified arguments, on the thread that the object's 
            underlying handle was created on.
            </summary>
            <typeparam name="T">The type of the parameter of the method that the delegate encapsulates.</typeparam>
            <param name="priority">The scheduling priority of the delegate.</param>
            <param name="action">The action delegate to execute.</param>
            <param name="state">An object containing data to be used by the action delegate.</param>
            <returns>An <see cref="T:IAsyncResult"/> that represents the result of the <see cref="M:BeginInvoke"/> 
            operation.</returns>
        </member>
        <member name="M:Aristocrat.Threading.PrioritySynchronization.BeginInvoke``1(System.Func{``0})">
            <summary>
            Executes the specified delegate asynchronously with the specified arguments, on the thread that the object's 
            underlying handle was created on.
            </summary>
            <typeparam name="TResult">The type of the result available.</typeparam>
            <param name="function">The function that returns the future result.</param>
            <returns>An <see cref="T:IAsyncResult"/> that represents the result of the <see cref="M:BeginInvoke"/> 
            operation.</returns>
        </member>
        <member name="M:Aristocrat.Threading.PrioritySynchronization.BeginInvoke``1(Aristocrat.Threading.QueuePriority,System.Func{``0})">
            <summary>
            Executes the specified delegate asynchronously with the specified arguments, on the thread that the object's 
            underlying handle was created on.
            </summary>
            <typeparam name="TResult">The type of the result available.</typeparam>
            <param name="priority">The scheduling priority of the delegate.</param>
            <param name="function">The function that returns the future result.</param>
            <returns>An <see cref="T:IAsyncResult"/> that represents the result of the <see cref="M:BeginInvoke"/> 
            operation.</returns>
        </member>
        <member name="M:Aristocrat.Threading.PrioritySynchronization.BeginInvoke``2(System.Func{``0,``1},``0)">
            <summary>
            Executes the specified delegate asynchronously with the specified arguments, on the thread that the object's 
            underlying handle was created on.
            </summary>
            <typeparam name="T">The type of the parameter of the method that the delegate encapsulates.</typeparam>
            <typeparam name="TResult">The type of the result available.</typeparam>
            <param name="function">The function that returns the future result.</param>
            <param name="state">An object containing data to be used by the action delegate.</param>
            <returns>An <see cref="T:IAsyncResult"/> that represents the result of the <see cref="M:BeginInvoke"/> 
            operation.</returns>
        </member>
        <member name="M:Aristocrat.Threading.PrioritySynchronization.BeginInvoke``2(Aristocrat.Threading.QueuePriority,System.Func{``0,``1},``0)">
            <summary>
            Executes the specified delegate asynchronously with the specified arguments, on the thread that the object's 
            underlying handle was created on.
            </summary>
            <typeparam name="T">The type of the parameter of the method that the delegate encapsulates.</typeparam>
            <typeparam name="TResult">The type of the result available.</typeparam>
            <param name="priority">The scheduling priority of the delegate.</param>
            <param name="function">The function that returns the future result.</param>
            <param name="state">An object containing data to be used by the action delegate.</param>
            <returns>An <see cref="T:IAsyncResult"/> that represents the result of the <see cref="M:BeginInvoke"/> 
            operation.</returns>
        </member>
        <member name="M:Aristocrat.Threading.PrioritySynchronization.BeginInvoke(System.Delegate,System.Object[])">
            <summary>
            Executes the specified delegate asynchronously with the specified arguments, on the thread that the object's 
            underlying handle was created on.
            </summary>
            <param name="method">A delegate to a method that takes parameters of the same number and type that are contained 
            in the <paramref name="args"/> parameter.</param>
            <param name="args">An array of objects to pass as arguments to the given method. This can be null if no 
            arguments are needed.</param>
            <returns>An <see cref="T:IAsyncResult"/> that represents the result of the <see cref="M:BeginInvoke"/> 
            operation.</returns>
        </member>
        <member name="M:Aristocrat.Threading.PrioritySynchronization.BeginInvoke(Aristocrat.Threading.QueuePriority,System.Delegate,System.Object[])">
            <summary>
            Executes the specified delegate asynchronously with the specified arguments, on the thread that the object's 
            underlying handle was created on.
            </summary>
            <param name="priority">The scheduling priority of the delegate.</param>
            <param name="method">A delegate to a method that takes parameters of the same number and type that are contained 
            in the <paramref name="args"/> parameter.</param>
            <param name="args">An array of objects to pass as arguments to the given method. This can be null if no 
            arguments are needed.</param>
            <returns>An <see cref="T:IAsyncResult"/> that represents the result of the <see cref="M:BeginInvoke"/> 
            operation.</returns>
        </member>
        <member name="M:Aristocrat.Threading.PrioritySynchronization.EndInvoke(System.IAsyncResult)">
            <summary>
            Retrieves the return value of the asynchronous operation represented by the <see cref="T:IAsyncResult"/> passed.
            </summary>
            <param name="result">The <see cref="T:IAsyncResult"/> that represents a specific invoke asynchronous 
            operation, returned when calling <see cref="M:BeginInvoke"/>.</param>
            <returns>The <see cref="T:System.Object"/> generated by the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="result"/> parameter value is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="result"/> object was not created by a preceding call 
            of the <see cref="M:BeginInvoke"/> method from the same control.</exception>
        </member>
        <member name="M:Aristocrat.Threading.PrioritySynchronization.EndInvoke``1(Aristocrat.Threading.IAsyncResult{``0})">
            <summary>
            Retrieves the return value of the asynchronous operation represented by the <see cref="T:IAsyncResult"/> passed.
            </summary>
            <param name="result">The <see cref="T:IAsyncResult"/> that represents a specific invoke asynchronous 
            operation, returned when calling <see cref="M:BeginInvoke"/>.</param>
            <typeparam name="TResult">The type of the result available.</typeparam>
            <returns>The return value of the method that this delegate encapsulates.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="result"/> parameter value is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="result"/> object was not created by a preceding call 
            of the <see cref="M:BeginInvoke"/> method from the same control.</exception>
        </member>
        <member name="M:Aristocrat.Threading.PrioritySynchronization.Invoke(System.Action)">
            <summary>
            Executes the specified delegate, on the thread that owns the object, with the specified list of arguments.
            </summary>
            <param name="action">A delegate to an <see cref="T:System.Action"/> method.</param>
        </member>
        <member name="M:Aristocrat.Threading.PrioritySynchronization.Invoke(Aristocrat.Threading.QueuePriority,System.Action)">
            <summary>
            Executes the specified delegate, on the thread that owns the object, with the specified list of arguments.
            </summary>
            <param name="priority">The scheduling priority of the delegate.</param>
            <param name="action">A delegate to an <see cref="T:System.Action"/> method.</param>
        </member>
        <member name="M:Aristocrat.Threading.PrioritySynchronization.Invoke``1(System.Action{``0},``0)">
            <summary>
            Executes the specified delegate, on the thread that owns the object, with the specified list of arguments.
            </summary>
            <typeparam name="T">The input type.</typeparam>
            <param name="action">The action delegate to execute.</param>
            <param name="state">An object containing data to be used by the action delegate.</param>
        </member>
        <member name="M:Aristocrat.Threading.PrioritySynchronization.Invoke``1(Aristocrat.Threading.QueuePriority,System.Action{``0},``0)">
            <summary>
            Executes the specified delegate, on the thread that owns the object, with the specified list of arguments.
            </summary>
            <typeparam name="T">The input type.</typeparam>
            <param name="priority">The scheduling priority of the delegate.</param>
            <param name="action">The action delegate to execute.</param>
            <param name="state">An object containing data to be used by the action delegate.</param>
        </member>
        <member name="M:Aristocrat.Threading.PrioritySynchronization.Invoke``1(System.Func{``0})">
            <summary>
            Executes the specified delegate, on the thread that owns the object, with the specified list of arguments.
            </summary>
            <typeparam name="TResult">The type of the result available.</typeparam>
            <param name="function">The function that returns the future result.</param>
            <returns>The return value of the method that this delegate encapsulates.</returns>
        </member>
        <member name="M:Aristocrat.Threading.PrioritySynchronization.Invoke``1(Aristocrat.Threading.QueuePriority,System.Func{``0})">
            <summary>
            Executes the specified delegate, on the thread that owns the object, with the specified list of arguments.
            </summary>
            <typeparam name="TResult">The type of the result available.</typeparam>
            <param name="priority">The scheduling priority of the delegate.</param>
            <param name="function">The function that returns the future result.</param>
            <returns>The return value of the method that this delegate encapsulates.</returns>
        </member>
        <member name="M:Aristocrat.Threading.PrioritySynchronization.Invoke``2(System.Func{``0,``1},``0)">
            <summary>
            Executes the specified delegate, on the thread that owns the object, with the specified list of arguments.
            </summary>
            <typeparam name="T">The input type.</typeparam>
            <typeparam name="TResult">The type of the result available.</typeparam>
            <param name="function">The function that returns the future result.</param>
            <param name="state">An object containing data to be used by the action delegate.</param>
            <returns>The return value of the method that this delegate encapsulates.</returns>
        </member>
        <member name="M:Aristocrat.Threading.PrioritySynchronization.Invoke``2(Aristocrat.Threading.QueuePriority,System.Func{``0,``1},``0)">
            <summary>
            Executes the specified delegate, on the thread that owns the object, with the specified list of arguments.
            </summary>
            <typeparam name="T">The input type.</typeparam>
            <typeparam name="TResult">The type of the result available.</typeparam>
            <param name="priority">The scheduling priority of the delegate.</param>
            <param name="function">The function that returns the future result.</param>
            <param name="state">An object containing data to be used by the action delegate.</param>
            <returns>The return value of the method that this delegate encapsulates.</returns>
        </member>
        <member name="M:Aristocrat.Threading.PrioritySynchronization.Invoke(System.Delegate,System.Object[])">
            <summary>
            Executes the specified delegate, on the thread that owns the object, with the specified list of arguments.
            </summary>
            <param name="method">A delegate to a method that takes parameters of the same number and type that are contained 
            in the <paramref name="args"/> parameter.</param>
            <param name="args">An array of objects to pass as arguments to the given method. This can be null if no 
            arguments are needed.</param>
            <returns>An <see cref="T:System.Object"/> that contains the return value from the delegate being invoked, or null if 
            the delegate has no return value.</returns>
        </member>
        <member name="M:Aristocrat.Threading.PrioritySynchronization.Invoke(Aristocrat.Threading.QueuePriority,System.Delegate,System.Object[])">
            <summary>
            Executes the specified delegate, on the thread that owns the object, with the specified list of arguments.
            </summary>
            <param name="priority">The scheduling priority of the delegate.</param>
            <param name="method">A delegate to a method that takes parameters of the same number and type that are contained 
            in the <paramref name="args"/> parameter.</param>
            <param name="args">An array of objects to pass as arguments to the given method. This can be null if no 
            arguments are needed.</param>
            <returns>An <see cref="T:System.Object"/> that contains the return value from the delegate being invoked, or null if 
            the delegate has no return value.</returns>
        </member>
        <member name="M:Aristocrat.Threading.PrioritySynchronization.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources and optionally releases the managed resources.
            </summary>
            <param name="disposing"><b>true</b> to release both managed and unmanaged resources; <b>false</b> to release 
            only unmanaged resources.</param>
        </member>
        <member name="M:Aristocrat.Threading.PrioritySynchronization.OnItemDequeued">
            <summary>
            Overridable method for when an item is dequeued.
            </summary>
        </member>
        <member name="M:Aristocrat.Threading.PrioritySynchronization.OnItemQueued">
            <summary>
            Overridable method for when an item is queued.
            </summary>
        </member>
        <member name="M:Aristocrat.Threading.PrioritySynchronization.OnNotificationThresholdReached(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NotificationThresholdReached"/> event.
            </summary>
            <param name="e">A <see cref="T:EventArgs"/> that contains the event data.</param>
        </member>
        <member name="P:Aristocrat.Threading.PrioritySynchronization.InvokeRequired">
            <summary>
            Gets a value indicating whether the caller must call <see cref="M:Invoke"/>.
            </summary>
        </member>
        <member name="P:Aristocrat.Threading.PrioritySynchronization.NotificationThreshold">
            <summary>
            Gets or sets the threshold of the queue size that should trigger the 
            <see cref="E:NotificationThresholdReached"/>.
            </summary>
        </member>
        <member name="P:Aristocrat.Threading.PrioritySynchronization.Priority">
            <summary>
            Gets or sets a value indicating the scheduling priority.
            </summary>
        </member>
        <member name="P:Aristocrat.Threading.PrioritySynchronization.ThreadExitTimeout">
            <summary>
            Gets or sets the thread exit timeout.
            </summary>
            <value>The thread exit timeout.</value>
        </member>
        <member name="P:Aristocrat.Threading.PrioritySynchronization.ThreadName">
            <summary>
            Gets the name of the thread.
            </summary>
            <value>The name of the thread.</value>
        </member>
        <member name="P:Aristocrat.Threading.PrioritySynchronization.QueueSize">
            <summary>
            Gets the queue size of items in the invoke queue.
            </summary>
        </member>
        <member name="T:Aristocrat.Threading.QueuePriority">
            <summary>
            Specifies the scheduling priority of a queued item.
            </summary>
        </member>
        <member name="F:Aristocrat.Threading.QueuePriority.Lowest">
            <summary>
            The queued item can be scheduled after items with any other priority.
            </summary>
        </member>
        <member name="F:Aristocrat.Threading.QueuePriority.BelowNormal">
            <summary>
            The queued item can be scheduled after items with Normal priority and before those with Lowest priority.
            </summary>
        </member>
        <member name="F:Aristocrat.Threading.QueuePriority.Normal">
            <summary>
            The queued item can be scheduled after items with AboveNormal priority and before those with BelowNormal 
            priority. Queued items have Normal priority by default.
            </summary>
        </member>
        <member name="F:Aristocrat.Threading.QueuePriority.AboveNormal">
            <summary>
            The queued item can be scheduled after items with with Highest priority and before those with Normal priority.
            </summary>
        </member>
        <member name="F:Aristocrat.Threading.QueuePriority.Highest">
            <summary>
            The queued item can be scheduled before items with any owith any other priority.
            </summary>
        </member>
        <member name="T:Aristocrat.Threading.SynchronizedInvoker">
            <summary>
            A synchronized invoker.
            </summary>
        </member>
        <member name="E:Aristocrat.Threading.SynchronizedInvoker.QueueCleared">
            <summary>
            Occurs when the queue is cleared.
            </summary>
        </member>
        <member name="M:Aristocrat.Threading.SynchronizedInvoker.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SynchronizedInvoker"/> class.
            </summary>
        </member>
        <member name="M:Aristocrat.Threading.SynchronizedInvoker.#ctor(System.Threading.ThreadPriority)">
            <summary>
            Initializes a new instance of the <see cref="T:SynchronizedInvoker"/> class.
            </summary>
            <param name="priority">The priority.</param>
        </member>
        <member name="M:Aristocrat.Threading.SynchronizedInvoker.#ctor(System.Threading.ThreadPriority,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SynchronizedInvoker"/> class.
            </summary>
            <param name="priority">The scheduling priority of a thread.</param>
            <param name="threadName">The name of the thread.</param>
        </member>
        <member name="M:Aristocrat.Threading.SynchronizedInvoker.ClearQueue">
            <inheritdoc/>
        </member>
        <member name="M:Aristocrat.Threading.SynchronizedInvoker.OnQueueCleared(System.EventArgs)">
            <summary>
            Raises the <see cref="E:QueueCleared"/> event.
            </summary>
            <param name="e">A <see cref="T:EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Aristocrat.Threading.SynchronizedInvoker.OnItemDequeued">
            <summary>
            Executes the item dequeued action.
            </summary>
        </member>
        <member name="P:Aristocrat.Threading.SynchronizedInvoker.Count">
            <summary>
            Gets the number of items in the queue.
            </summary>
            <value>The count.</value>
        </member>
        <member name="T:Aristocrat.Threading.TimeScheduler">
            <summary>
            This class manages timers.
            </summary>
        </member>
        <member name="M:Aristocrat.Threading.TimeScheduler.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TimeScheduler"/> class.
            </summary>
        </member>
        <member name="M:Aristocrat.Threading.TimeScheduler.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:TimeScheduler"/> class.
            </summary>
            <param name="granularity">A interval specifying how small a timer can be.</param>
        </member>
        <member name="M:Aristocrat.Threading.TimeScheduler.CreateTimer(System.String,System.Threading.WaitCallback,System.Int32)">
            <summary>
            Create the timer. The caller should call <see cref="M:DestroyTimer"/> as soon as the timer is no longer needed.
            </summary>
            <param name="timerId">The timer identifier.</param>
            <param name="callback">A <see cref="T:System.Threading.WaitCallback"/> delegate representing a method to be executed.</param>
            <param name="interval">Specifies the interval between timer notifications, in milliseconds.</param>
            <returns><b>true</b> if successful; otherwise <b>false</b>.</returns>
        </member>
        <member name="M:Aristocrat.Threading.TimeScheduler.CreateTimer(System.String,System.Threading.WaitCallback,System.Int32,System.Boolean)">
            <summary>
            Create the timer. The caller should call <see cref="M:DestroyTimer"/> as soon as the timer is no longer needed.
            </summary>
            <param name="timerId">The timer identifier.</param>
            <param name="callback">A <see cref="T:System.Threading.WaitCallback"/> delegate representing a method to be executed.</param>
            <param name="interval">Specifies the interval between timer notifications, in milliseconds.</param>
            <param name="recurring">A flag indicating whether the timer should close after the first time the specified 
            interval elapses or if it is a recurring timer.</param>
            <returns><b>true</b> if successful; otherwise <b>false</b>.</returns>
        </member>
        <member name="M:Aristocrat.Threading.TimeScheduler.CreateTimer(System.String,System.Threading.WaitCallback,System.Int32,System.Boolean,System.Object)">
            <summary>
            Create the timer. The caller should call <see cref="M:DestroyTimer"/> as soon as the timer is no longer needed.
            </summary>
            <param name="timerId">The timer identifier.</param>
            <param name="callback">A <see cref="T:System.Threading.WaitCallback"/> delegate representing a method to be executed.</param>
            <param name="interval">Specifies the interval between timer notifications, in milliseconds.</param>
            <param name="recurring">A flag indicating whether the timer should close after the first time the specified 
            interval elapses or if it is a recurring timer.</param>
            <param name="state">An object containing information to be used by the <paramref name="callback"/>, or 
            <see langref="null"/>.</param>
            <returns><b>true</b> if successful; otherwise <b>false</b>.</returns>
        </member>
        <member name="M:Aristocrat.Threading.TimeScheduler.DestroyTimer(System.String)">
            <summary>
            Destroys the specified timer.
            </summary>
            <param name="timerId">The timer identifier.</param>
            <returns><b>true</b> if successful; otherwise <b>false</b>.</returns>
        </member>
        <member name="M:Aristocrat.Threading.TimeScheduler.Dispose">
            <summary>
            Release allocated resources.
            </summary>
        </member>
        <member name="M:Aristocrat.Threading.TimeScheduler.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used and optionally releases the managed resources.
            </summary>
            <param name="disposing"><b>true</b> to release both managed and unmanaged resources; <b>false</b> to release 
            only unmanaged resources.</param>
        </member>
        <member name="T:Aristocrat.Threading.SynchronizationObject">
            <summary>
            Provides a way to synchronously or asynchronously execute a delegate with default implementation.
            </summary>
        </member>
        <member name="E:Aristocrat.Threading.SynchronizationObject.NotificationThresholdReached">
            <summary>
            Occurs whenever the <see cref="P:NotificationThreshold"/> is reached or exceeded.
            </summary>
        </member>
        <member name="M:Aristocrat.Threading.SynchronizationObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SynchronizationObject"/> class.
            </summary>
        </member>
        <member name="M:Aristocrat.Threading.SynchronizationObject.#ctor(System.Threading.ThreadPriority)">
            <summary>
            Initializes a new instance of the <see cref="T:SynchronizationObject"/> class.
            </summary>
            <param name="priority">The scheduling priority of a thread.</param>
        </member>
        <member name="M:Aristocrat.Threading.SynchronizationObject.#ctor(System.Threading.ThreadPriority,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SynchronizationObject"/> class.
            </summary>
            <param name="priority">The scheduling priority of a thread.</param>
            <param name="threadName">The name of the thread.</param>
        </member>
        <member name="M:Aristocrat.Threading.SynchronizationObject.ClearQueue">
            <summary>
            Clears the queue.
            </summary>
        </member>
        <member name="M:Aristocrat.Threading.SynchronizationObject.Dispose">
            <summary>
            Release allocated resources.
            </summary>
        </member>
        <member name="M:Aristocrat.Threading.SynchronizationObject.BeginInvoke(System.Action)">
            <summary>
            Executes the specified delegate asynchronously with the specified arguments, on the thread that the object's 
            underlying handle was created on.
            </summary>
            <param name="action">A delegate to an <see cref="T:System.Action"/> method.</param>
            <returns>An <see cref="T:IAsyncResult"/> that represents the result of the <see cref="M:BeginInvoke"/> 
            operation.</returns>
        </member>
        <member name="M:Aristocrat.Threading.SynchronizationObject.BeginInvoke``1(System.Action{``0},``0)">
            <summary>
            Executes the specified delegate asynchronously with the specified arguments, on the thread that the object's 
            underlying handle was created on.
            </summary>
            <typeparam name="T">The type of the parameter of the method that the delegate encapsulates.</typeparam>
            <param name="action">The action delegate to execute.</param>
            <param name="state">An object containing data to be used by the action delegate.</param>
            <returns>An <see cref="T:IAsyncResult"/> that represents the result of the <see cref="M:BeginInvoke"/> 
            operation.</returns>
        </member>
        <member name="M:Aristocrat.Threading.SynchronizationObject.BeginInvoke``1(System.Func{``0})">
            <summary>
            Executes the specified delegate asynchronously with the specified arguments, on the thread that the object's 
            underlying handle was created on.
            </summary>
            <typeparam name="TResult">The type of the result available.</typeparam>
            <param name="function">The function that returns the future result.</param>
            <returns>An <see cref="T:IAsyncResult"/> that represents the result of the <see cref="M:BeginInvoke"/> 
            operation.</returns>
        </member>
        <member name="M:Aristocrat.Threading.SynchronizationObject.BeginInvoke``2(System.Func{``0,``1},``0)">
            <summary>
            Executes the specified delegate asynchronously with the specified arguments, on the thread that the object's 
            underlying handle was created on.
            </summary>
            <typeparam name="T">The type of the parameter of the method that the delegate encapsulates.</typeparam>
            <typeparam name="TResult">The type of the result available.</typeparam>
            <param name="function">The function that returns the future result.</param>
            <param name="state">An object containing data to be used by the action delegate.</param>
            <returns>An <see cref="T:IAsyncResult"/> that represents the result of the <see cref="M:BeginInvoke"/> 
            operation.</returns>
        </member>
        <member name="M:Aristocrat.Threading.SynchronizationObject.BeginInvoke(System.Delegate,System.Object[])">
            <summary>
            Executes the specified delegate asynchronously with the specified arguments, on the thread that the object's 
            underlying handle was created on.
            </summary>
            <param name="method">A delegate to a method that takes parameters of the same number and type that are contained 
            in the <paramref name="args"/> parameter.</param>
            <param name="args">An array of objects to pass as arguments to the given method. This can be null if no 
            arguments are needed.</param>
            <returns>An <see cref="T:IAsyncResult"/> that represents the result of the <see cref="M:BeginInvoke"/> 
            operation.</returns>
        </member>
        <member name="M:Aristocrat.Threading.SynchronizationObject.EndInvoke(System.IAsyncResult)">
            <summary>
            Retrieves the return value of the asynchronous operation represented by the <see cref="T:IAsyncResult"/> passed.
            </summary>
            <param name="result">The <see cref="T:IAsyncResult"/> that represents a specific invoke asynchronous 
            operation, returned when calling <see cref="M:BeginInvoke"/>.</param>
            <returns>The <see cref="T:System.Object"/> generated by the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="result"/> parameter value is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="result"/> object was not created by a preceding call 
            of the <see cref="M:BeginInvoke"/> method from the same control.</exception>
        </member>
        <member name="M:Aristocrat.Threading.SynchronizationObject.EndInvoke``1(Aristocrat.Threading.IAsyncResult{``0})">
            <summary>
            Retrieves the return value of the asynchronous operation represented by the <see cref="T:IAsyncResult"/> passed.
            </summary>
            <param name="result">The <see cref="T:IAsyncResult"/> that represents a specific invoke asynchronous 
            operation, returned when calling <see cref="M:BeginInvoke"/>.</param>
            <typeparam name="TResult">The type of the result available.</typeparam>
            <returns>The return value of the method that this delegate encapsulates.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="result"/> parameter value is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="result"/> object was not created by a preceding call 
            of the <see cref="M:BeginInvoke"/> method from the same control.</exception>
        </member>
        <member name="M:Aristocrat.Threading.SynchronizationObject.Invoke(System.Action)">
            <summary>
            Executes the specified delegate, on the thread that owns the object, with the specified list of arguments.
            </summary>
            <param name="action">A delegate to an <see cref="T:System.Action"/> method.</param>
        </member>
        <member name="M:Aristocrat.Threading.SynchronizationObject.Invoke``1(System.Action{``0},``0)">
            <summary>
            Executes the specified delegate, on the thread that owns the object, with the specified list of arguments.
            </summary>
            <typeparam name="T">The input type.</typeparam>
            <param name="action">The action delegate to execute.</param>
            <param name="state">An object containing data to be used by the action delegate.</param>
        </member>
        <member name="M:Aristocrat.Threading.SynchronizationObject.Invoke``1(System.Func{``0})">
            <summary>
            Executes the specified delegate, on the thread that owns the object, with the specified list of arguments.
            </summary>
            <typeparam name="TResult">The type of the result available.</typeparam>
            <param name="function">The function that returns the future result.</param>
            <returns>The return value of the method that this delegate encapsulates.</returns>
        </member>
        <member name="M:Aristocrat.Threading.SynchronizationObject.Invoke``2(System.Func{``0,``1},``0)">
            <summary>
            Executes the specified delegate, on the thread that owns the object, with the specified list of arguments.
            </summary>
            <typeparam name="T">The input type.</typeparam>
            <typeparam name="TResult">The type of the result available.</typeparam>
            <param name="function">The function that returns the future result.</param>
            <param name="state">An object containing data to be used by the action delegate.</param>
            <returns>The return value of the method that this delegate encapsulates.</returns>
        </member>
        <member name="M:Aristocrat.Threading.SynchronizationObject.Invoke(System.Delegate,System.Object[])">
            <summary>
            Executes the specified delegate, on the thread that owns the object, with the specified list of arguments.
            </summary>
            <param name="method">A delegate to a method that takes parameters of the same number and type that are contained 
            in the <paramref name="args"/> parameter.</param>
            <param name="args">An array of objects to pass as arguments to the given method. This can be null if no 
            arguments are needed.</param>
            <returns>An <see cref="T:System.Object"/> that contains the return value from the delegate being invoked, or null if 
            the delegate has no return value.</returns>
        </member>
        <member name="M:Aristocrat.Threading.SynchronizationObject.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources and optionally releases the managed resources.
            </summary>
            <param name="disposing"><b>true</b> to release both managed and unmanaged resources; <b>false</b> to release 
            only unmanaged resources.</param>
        </member>
        <member name="M:Aristocrat.Threading.SynchronizationObject.OnItemDequeued">
            <summary>
            Overridable method for when an item is dequeued.
            </summary>
        </member>
        <member name="M:Aristocrat.Threading.SynchronizationObject.OnItemQueued">
            <summary>
            Overridable method for when an item is queued.
            </summary>
        </member>
        <member name="M:Aristocrat.Threading.SynchronizationObject.OnNotificationThresholdReached(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NotificationThresholdReached"/> event.
            </summary>
            <param name="e">A <see cref="T:EventArgs"/> that contains the event data.</param>
        </member>
        <member name="P:Aristocrat.Threading.SynchronizationObject.InvokeRequired">
            <summary>
            Gets a value indicating whether the caller must call <see cref="M:Invoke"/>.
            </summary>
        </member>
        <member name="P:Aristocrat.Threading.SynchronizationObject.NotificationThreshold">
            <summary>
            Gets or sets the threshold of the queue size that should trigger the 
            <see cref="E:NotificationThresholdReached"/>.
            </summary>
        </member>
        <member name="P:Aristocrat.Threading.SynchronizationObject.Priority">
            <summary>
            Gets or sets a value indicating the scheduling priority.
            </summary>
        </member>
        <member name="P:Aristocrat.Threading.SynchronizationObject.ThreadExitTimeout">
            <summary>
            Gets or sets the thread exit timeout.
            </summary>
            <value>The thread exit timeout.</value>
        </member>
        <member name="P:Aristocrat.Threading.SynchronizationObject.ThreadName">
            <summary>
            Gets the name of the thread.
            </summary>
            <value>The name of the thread.</value>
        </member>
        <member name="P:Aristocrat.Threading.SynchronizationObject.QueueSize">
            <summary>
            Gets the queue size of items in the invoke queue.
            </summary>
        </member>
        <member name="T:Aristocrat.Threading.WaitableCollection`2">
            <summary>
            Collection of waitables.
            </summary>
            <typeparam name="TKey">Type of the key.</typeparam>
            <typeparam name="TResult">Type of the result.</typeparam>
        </member>
        <member name="M:Aristocrat.Threading.WaitableCollection`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaitableCollection"/> class.
            </summary>
        </member>
        <member name="M:Aristocrat.Threading.WaitableCollection`2.CloseEvent(`0)">
            <summary>
            Closes the event with the specified key and removes it from the collection.
            </summary>
            <param name="key">The key of the event to close.</param>
            <returns><b>true</b> if successful; otherwise <b>false</b>.</returns>
        </member>
        <member name="M:Aristocrat.Threading.WaitableCollection`2.CreateEvent(`0)">
            <summary>
            Creates a event with the specified key and adds it to the collection.
            </summary>
            <param name="key">The key of the event to create.</param>
            <returns><b>true</b> if successful; otherwise <b>false</b>.</returns>
        </member>
        <member name="M:Aristocrat.Threading.WaitableCollection`2.Dispose">
            <summary>
            Release allocated resources.
            </summary>
        </member>
        <member name="M:Aristocrat.Threading.WaitableCollection`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:WaitableCollection{T, U}"/>.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator{T}"/> that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Aristocrat.Threading.WaitableCollection`2.GetEventResult(`0)">
            <summary>
            Gets the result of the event.
            </summary>
            <param name="key">The key of the event to wait for.</param>
            <returns>The result if the event.</returns>
        </member>
        <member name="M:Aristocrat.Threading.WaitableCollection`2.SetEvent(`0,`1)">
            <summary>
            Sets the state of the event to signaled, allowing one or more waiting threads to proceed.
            </summary>
            <param name="key">The key of the event to set.</param>
            <param name="result">The result to set for the event.</param>
            <returns><b>true</b> if successful; otherwise <b>false</b>.</returns>
        </member>
        <member name="M:Aristocrat.Threading.WaitableCollection`2.WaitOne(`0)">
            <summary>
            Blocks the current thread until an item is enqueued.
            </summary>
            <param name="key">The key of the event to wait for.</param>
            <returns><b>true</b> if the current instance receives a signal; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Aristocrat.Threading.WaitableCollection`2.WaitOne(`0,System.Int32)">
            <summary>
            Blocks the current thread until the event receives a signal.
            </summary>
            <param name="key">The key of the event to wait for.</param>
            <param name="millisecondsTimeout"> The number of milliseconds to wait, or <see cref="F:Timeout.Infinite"/> (-1) 
            to wait indefinitely.</param>
            <returns><b>true</b> if the current instance receives a signal; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Aristocrat.Threading.WaitableCollection`2.WaitOne(`0,System.TimeSpan)">
            <summary>
            Blocks the current thread until the event receives a signal.
            </summary>
            <param name="key">The key of the event to wait for.</param>
            <param name="timeout">A <see cref="T:System.TimeSpan"/> that represents the number of milliseconds to wait, or a 
            <see cref="T:System.TimeSpan"/> that represents -1 milliseconds to wait indefinitely.</param>
            <returns><b>true</b> if the current instance receives a signal; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Aristocrat.Threading.WaitableCollection`2.WaitOne(`0,System.Int32,System.Boolean)">
            <summary>
            Blocks the current thread until the event receives a signal.
            </summary>
            <param name="key">The key of the event to wait for.</param>
            <param name="millisecondsTimeout"> The number of milliseconds to wait, or <see cref="F:Timeout.Infinite"/> (-1) 
            to wait indefinitely.</param>
            <param name="exitContext"><b>true</b> to exit the synchronization domain for the context before the wait (if in 
            a synchronized context), and reacquire it afterward; otherwise, <b>false</b>.</param>
            <returns><b>true</b> if the current instance receives a signal; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Aristocrat.Threading.WaitableCollection`2.WaitOne(`0,System.TimeSpan,System.Boolean)">
            <summary>
            Blocks the current thread until the event receives a signal.
            </summary>
            <param name="key">The key of the event to wait for.</param>
            <param name="timeout">A <see cref="T:System.TimeSpan"/> that represents the number of milliseconds to wait, or a 
            <see cref="T:System.TimeSpan"/> that represents -1 milliseconds to wait indefinitely.</param>
            <param name="exitContext"><b>true</b> to exit the synchronization domain for the context before the wait (if in a 
            synchronized context), and reacquire it afterward; otherwise, <b>false</b>.</param>
            <returns><b>true</b> if the current instance receives a signal; otherwise, <b>false</b>.</returns>
        </member>
        <member name="P:Aristocrat.Threading.WaitableCollection`2.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:WaitableCollection{T, U}"/>.
            </summary>
        </member>
        <member name="T:Aristocrat.Threading.WaitableQueue`1">
            <summary>
            A waitable queue object is a synchronization object whose state is set to signaled when an item is enqueued.
            </summary>
        </member>
        <member name="M:Aristocrat.Threading.WaitableQueue`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Aristocrat.Threading.WaitableQueue{T}"/> class that is empty and 
            has the default initial capacity.
            </summary>
        </member>
        <member name="M:Aristocrat.Threading.WaitableQueue`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Aristocrat.Threading.WaitableQueue{T}"/> class that contains 
            elements copied from the  specified collection and has sufficient capacity to accommodate the number of elements copied.
            </summary>
            <param name="collection">The collection whose elements are copied to the new <see cref="T:Aristocrat.Threading.WaitableQueue{T}"/>.
            </param>
        </member>
        <member name="M:Aristocrat.Threading.WaitableQueue`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Aristocrat.Threading.WaitableQueue{T}"/> class that is empty and has the specified 
            initial capacity.
            </summary>
            <param name="capacity">The initial number of elements that the <see cref="T:Aristocrat.Threading.WaitableQueue{T}"/> can contain.
            </param>
        </member>
        <member name="M:Aristocrat.Threading.WaitableQueue`1.Clear">
            <summary>
            Removes all objects from the queue.
            </summary>
        </member>
        <member name="M:Aristocrat.Threading.WaitableQueue`1.Dequeue">
            <summary>
            Gets the top item from the queue.
            </summary>
            <returns>The object that is removed from the beginning of the <see cref="T:WaitableQueue{T}"/>.</returns>
        </member>
        <member name="M:Aristocrat.Threading.WaitableQueue`1.Dispose">
            <summary>
            Release allocated resources.
            </summary>
        </member>
        <member name="M:Aristocrat.Threading.WaitableQueue`1.Enqueue(`0)">
            <summary>
            Added an item to the bottom of the queue
            </summary>
            <param name="item">The object to add to the <see cref="T:WaitableQueue{T}"/>. The value can be null for 
            reference types.</param>
        </member>
        <member name="M:Aristocrat.Threading.WaitableQueue`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:WaitableQueue{T}"/>.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator{T}"/> for the <see cref="T:WaitableQueue{T}"/>.</returns>
        </member>
        <member name="M:Aristocrat.Threading.WaitableQueue`1.Peek">
            <summary>
            Returns the object at the beginning of the queue without removing it.
            </summary>
            <returns>The object at the beginning of the queue.</returns>
        </member>
        <member name="M:Aristocrat.Threading.WaitableQueue`1.TrimExcess">
            <summary>
            Sets the capacity to the actual number of elements in the queue, if that number is less than 90 percent of 
            current capacity.
            </summary>
        </member>
        <member name="M:Aristocrat.Threading.WaitableQueue`1.WaitOne">
            <summary>
            Blocks the current thread until an item is enqueued.
            </summary>
            <returns>true if an item has been added, otherwise false</returns>
        </member>
        <member name="M:Aristocrat.Threading.WaitableQueue`1.WaitOne(System.Int32)">
            <summary>
            Blocks the current thread until an item is enqueued.
            </summary>
            <param name="millisecondsTimeout"> The number of milliseconds to wait, or <see cref="F:Timeout.Infinite"/> (-1) 
            to wait indefinitely.</param>
            <returns>true if an item has been added, otherwise false</returns>
        </member>
        <member name="M:Aristocrat.Threading.WaitableQueue`1.WaitOne(System.TimeSpan)">
            <summary>
            Blocks the current thread until an item is enqueued.
            </summary>
            <param name="timeout">A <see cref="T:System.TimeSpan"/> that represents the number of milliseconds to wait, or a 
            <see cref="T:System.TimeSpan"/> that represents -1 milliseconds to wait indefinitely.</param>
            <returns>true if the current instance receives a signal; otherwise, false.</returns>
        </member>
        <member name="M:Aristocrat.Threading.WaitableQueue`1.WaitOne(System.Int32,System.Boolean)">
            <summary>
            Blocks the current thread until an item is enqueued.
            </summary>
            <param name="millisecondsTimeout"> The number of milliseconds to wait, or <see cref="F:Timeout.Infinite"/> (-1) 
            to wait indefinitely.</param>
            <param name="exitContext">true to exit the synchronization domain for the context before the wait (if in a 
            synchronized context), and reacquire it afterward; otherwise, false.</param>
            <returns>true if the current instance receives a signal; otherwise, false.</returns>
        </member>
        <member name="M:Aristocrat.Threading.WaitableQueue`1.WaitOne(System.TimeSpan,System.Boolean)">
            <summary>
            Blocks the current thread until an item is enqueued.
            </summary>
            <param name="timeout">A <see cref="T:System.TimeSpan"/> that represents the number of milliseconds to wait, or a 
            <see cref="T:System.TimeSpan"/> that represents -1 milliseconds to wait indefinitely.</param>
            <param name="exitContext">true to exit the synchronization domain for the context before the wait (if in a 
            synchronized context), and reacquire it afterward; otherwise, false.</param>
            <returns>true if the current instance receives a signal; otherwise, false.</returns>
        </member>
        <member name="M:Aristocrat.Threading.WaitableQueue`1.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources and optionally releases the managed resources.
            </summary>
            <param name="disposing"><b>true</b> to release both managed and unmanaged resources; <b>false</b> to release 
            only unmanaged resources.</param>
        </member>
        <member name="P:Aristocrat.Threading.WaitableQueue`1.Count">
            <summary>
            Gets the number of items in the queue.
            </summary>
        </member>
        <member name="T:Aristocrat.Threading.ScheduleFrequency">
            <summary>
            Enum used to determine how often a <see cref="T:Aristocrat.Threading.ScheduleTimer"/> elapses.
            </summary>
        </member>
        <member name="F:Aristocrat.Threading.ScheduleFrequency.Daily">
            <summary>
            Timer elapses every day.
            </summary>
        </member>
        <member name="F:Aristocrat.Threading.ScheduleFrequency.Weekly">
            <summary>
            Timer elapses every 7 days.
            </summary>
        </member>
        <member name="F:Aristocrat.Threading.ScheduleFrequency.Monthly">
            <summary>
            Timer elapses every 1st of the month.
            </summary>
        </member>
        <member name="F:Aristocrat.Threading.ScheduleFrequency.Bimonthly">
            <summary>
            Timer elapses every 1st and 15th of the month.
            </summary>
        </member>
        <member name="F:Aristocrat.Threading.ScheduleFrequency.Yearly">
            <summary>
            Timer elapses January 1.
            </summary>
        </member>
        <member name="F:Aristocrat.Threading.ScheduleFrequency.Biyearly">
            <summary>
            Timer elapses January 1 and July 1.
            </summary>
        </member>
        <member name="T:Aristocrat.Threading.ScheduleTimer">
            <summary>
            A schedule timer object is a waitable timer object that specializes in long term schedule (ie - weekly, monthly, 
            yearly).
            </summary>
        </member>
        <member name="M:Aristocrat.Threading.ScheduleTimer.#ctor(Aristocrat.Threading.ScheduleFrequency,System.Threading.TimerCallback)">
            <summary>
            Create the timer. The caller should call <see cref="M:Close"/> as soon as the timer is no longer needed.
            </summary>
            <param name="frequency">The initial <see cref="T:Aristocrat.Threading.ScheduleFrequency"/> the timer should elapse.</param>
            <param name="callback">">A <see cref="T:System.Threading.TimerCallback"/> delegate representing a method to be executed.</param>
            <exception cref="T:System.ComponentModel.Win32Exception">When the timer could not be created.</exception>
        </member>
        <member name="M:Aristocrat.Threading.ScheduleTimer.#ctor(Aristocrat.Threading.ScheduleFrequency,System.Threading.TimerCallback,System.Object)">
            <summary>
            Create the timer. The caller should call <see cref="M:Close"/> as soon as the timer is no longer needed.
            </summary>
            <param name="frequency">The initial <see cref="T:Aristocrat.Threading.ScheduleFrequency"/> the timer should elapse.</param>
            <param name="callback">">A <see cref="T:System.Threading.TimerCallback"/> delegate representing a method to be executed.</param>
            <param name="state">An object containing information to be used by the callback method, or 
            <see langref="null"/>.</param>
            <exception cref="T:System.ComponentModel.Win32Exception">When the timer could not be created.</exception>
        </member>
        <member name="M:Aristocrat.Threading.ScheduleTimer.#ctor(Aristocrat.Threading.ScheduleFrequency,System.Threading.TimerCallback,System.Object,System.DateTime)">
            <summary>
            Create the timer. The caller should call <see cref="M:Close"/> as soon as the timer is no longer needed.
            </summary>
            <param name="frequency">The initial <see cref="T:Aristocrat.Threading.ScheduleFrequency"/> the timer should elapse.</param>
            <param name="callback">">A <see cref="T:System.Threading.TimerCallback"/> delegate representing a method to be executed.</param>
            <param name="state">An object containing information to be used by the callback method, or 
            <see langref="null"/>.</param>
            <param name="elapseTime">The time of day the timer should elapse.</param>
            <exception cref="T:System.ComponentModel.Win32Exception">When the timer could not be created.</exception>
        </member>
        <member name="M:Aristocrat.Threading.ScheduleTimer.Abort">
            <summary>
            Stop the <see cref="T:Aristocrat.Threading.ScheduleTimer"/> if necessary.
            </summary>
        </member>
        <member name="M:Aristocrat.Threading.ScheduleTimer.Change(Aristocrat.Threading.ScheduleFrequency)">
            <summary>
            Changes the the interval between method invocations for a timer, using 64-bit signed integers to measure time 
            intervals.
            </summary>
            <param name="frequency">The <see cref="T:Aristocrat.Threading.ScheduleFrequency"/> the timer should elapse.</param>
        </member>
        <member name="M:Aristocrat.Threading.ScheduleTimer.Change(Aristocrat.Threading.ScheduleFrequency,System.DateTime)">
            <summary>
            Changes the the interval between method invocations for a timer, using 64-bit signed integers to measure time 
            intervals.
            </summary>
            <param name="frequency">The <see cref="T:Aristocrat.Threading.ScheduleFrequency"/> the timer should elapse.</param>
            <param name="elapseTime">The time of day the timer should elapse.</param>
        </member>
        <member name="M:Aristocrat.Threading.ScheduleTimer.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:Aristocrat.Threading.ScheduleTimer"/>, and optionally releases the managed 
            resources.
            </summary>
            <param name="explicitDisposing"><see langref="true"/> to release both managed and unmanaged resources; 
            <see langref="false"/> to release only unmanaged resources.</param>
        </member>
        <member name="P:Aristocrat.Threading.ScheduleTimer.DueTime">
            <summary>
            Gets the scheduled time when the timer will elapse.
            </summary>
        </member>
        <member name="P:Aristocrat.Threading.ScheduleTimer.Frequency">
            <summary>
            Gets the frequency with which the timer will elapse.
            </summary>
        </member>
        <member name="P:Aristocrat.Threading.ScheduleTimer.Tag">
            <summary>
            Gets or sets user-defined data associated with the timer.
            </summary>
        </member>
        <member name="T:Aristocrat.Threading.WaitableTimer">
            <summary>
            A waitable timer object is a synchronization object whose state is set to signaled when the specified due time arrives.
            </summary>
        </member>
        <member name="F:Aristocrat.Threading.WaitableTimer.PerSecond">
            <summary>
            The number of milliseconds per second.
            </summary>
        </member>
        <member name="F:Aristocrat.Threading.WaitableTimer.PerMinute">
            <summary>
            The number of milliseconds per minute.
            </summary>
        </member>
        <member name="F:Aristocrat.Threading.WaitableTimer.PerHour">
            <summary>
            The number of milliseconds per hour.
            </summary>
        </member>
        <member name="F:Aristocrat.Threading.WaitableTimer.PerDay">
            <summary>
            The number of milliseconds per day.
            </summary>
        </member>
        <member name="F:Aristocrat.Threading.WaitableTimer.PerWeek">
            <summary>
            The number of milliseconds per week.
            </summary>
        </member>
        <member name="M:Aristocrat.Threading.WaitableTimer.#ctor(System.Threading.TimerCallback)">
            <summary>
            Create the timer. The caller should call <see cref="M:Close"/> as soon as the timer is no longer needed.
            </summary>
            <param name="callback">A <see cref="T:System.Threading.TimerCallback"/> delegate representing a method to be 
            executed.</param>
            <exception cref="T:System.ComponentModel.Win32Exception">When the timer could not be created.</exception>
        </member>
        <member name="M:Aristocrat.Threading.WaitableTimer.#ctor(System.Threading.TimerCallback,System.Object,System.DateTime)">
            <summary>
            Create the timer. The caller should call <see cref="M:Close"/> as soon as the timer is no longer needed.
            </summary>
            <param name="callback">A <see cref="T:System.Threading.TimerCallback"/> delegate representing a method to be 
            executed.</param>
            <param name="state">An object containing information to be used by the callback method, or 
            <see langref="null"/>.</param>
            <param name="dueTime">The initial <see cref="T:System.DateTime"/> the timer should elapse.</param>
            <exception cref="T:System.ComponentModel.Win32Exception">When the timer could not be created.</exception>
        </member>
        <member name="M:Aristocrat.Threading.WaitableTimer.#ctor(System.Threading.TimerCallback,System.Object,System.Int64)">
            <summary>
            Create the timer. The caller should call <see cref="M:Close"/> as soon as the timer is no longer needed.
            </summary>
            <param name="callback">A <see cref="T:System.Threading.TimerCallback"/> delegate representing a method to be 
            executed.</param>
            <param name="state">An object containing information to be used by the callback method, or 
            <see langref="null"/>.</param>
            <param name="interval">The time interval between invocations of callback, in milliseconds. Specify 
            <see cref="F:System.Threading.Timeout.Infinite"/> to disable periodic signaling.</param>
            <exception cref="T:System.ComponentModel.Win32Exception">When the timer could not be created.</exception>
        </member>
        <member name="M:Aristocrat.Threading.WaitableTimer.#ctor(System.Threading.TimerCallback,System.Object,System.DateTime,System.Int64)">
            <summary>
            Create the timer. The caller should call <see cref="M:Close"/> as soon as the timer is no longer needed.
            </summary>
            <param name="callback">A <see cref="T:System.Threading.TimerCallback"/> delegate representing a method to be 
            executed.</param>
            <param name="state">An object containing information to be used by the callback method, or 
            <see langref="null"/>.</param>
            <param name="dueTime">The initial <see cref="T:System.DateTime"/> the timer should elapse.</param>
            <param name="interval">The time interval between invocations of callback, in milliseconds. Specify 
            <see cref="F:System.Threading.Timeout.Infinite"/> to disable periodic signaling.</param>
            <exception cref="T:System.ComponentModel.Win32Exception">When the timer could not be created.</exception>
        </member>
        <member name="M:Aristocrat.Threading.WaitableTimer.Abort">
            <summary>
            Stop the <see cref="T:Aristocrat.Threading.WaitableTimer"/> if necessary.
            </summary>
        </member>
        <member name="M:Aristocrat.Threading.WaitableTimer.Change(System.Int64)">
            <summary>
            Changes the the interval between method invocations for a timer, using 64-bit signed integers to measure time 
            intervals.
            </summary>
            <param name="interval">The time interval between invocations of the callback method specified when the 
            <see cref="T:Aristocrat.Threading.WaitableTimer"/> was constructed, in milliseconds. Specify 
            <see cref="F:System.Threading.Timeout.Infinite"/> to disable  periodic signaling.</param>
        </member>
        <member name="M:Aristocrat.Threading.WaitableTimer.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:Aristocrat.Threading.WaitableTimer"/>, and optionally 
            releases the managed resources.
            </summary>
            <param name="explicitDisposing"><see langref="true"/> to release both managed and unmanaged resources; 
            <see langref="false"/> to release only unmanaged resources.</param>
        </member>
        <member name="P:Aristocrat.Threading.WaitableTimer.DueTime">
            <summary>
            Gets the scheduled time when the timer will elapse.
            </summary>
        </member>
        <member name="P:Aristocrat.Threading.WaitableTimer.Interval">
            <summary>
            Gets the frequency with which the timer will elapse after the indicated number of milliseconds.
            </summary>
        </member>
        <member name="P:Aristocrat.Threading.WaitableTimer.Priority">
            <summary>
            Gets or sets a value indicating the scheduling priority of a timer.
            </summary>
        </member>
        <member name="P:Aristocrat.Threading.WaitableTimer.Tag">
            <summary>
            Gets or sets user-defined data associated with the timer.
            </summary>
        </member>
    </members>
</doc>
